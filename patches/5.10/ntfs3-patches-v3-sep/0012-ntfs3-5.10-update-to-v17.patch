From a776ca810aab62ddef8c79294f013bdda571eddd Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Thu, 31 Dec 2020 16:32:09 +0100
Subject: [PATCH 12/12] ntfs3-5.10: update to v17

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 fs/ntfs3/attrib.c  | 31 ++++++++++++++++---------------
 fs/ntfs3/dir.c     |  9 ++-------
 fs/ntfs3/index.c   |  3 ---
 fs/ntfs3/inode.c   | 10 ----------
 fs/ntfs3/ntfs_fs.h |  1 -
 5 files changed, 18 insertions(+), 36 deletions(-)

diff --git a/fs/ntfs3/attrib.c b/fs/ntfs3/attrib.c
index 3f4c847c4..0e2c98e31 100644
--- a/fs/ntfs3/attrib.c
+++ b/fs/ntfs3/attrib.c
@@ -425,7 +425,7 @@ int attr_set_size(struct ntfs_inode *ni, enum ATTR_TYPE type,
 	bool is_mft =
 		ni->mi.rno == MFT_REC_MFT && type == ATTR_DATA && !name_len;
 	u64 old_valid, old_size, old_alloc, new_alloc, new_alloc_tmp;
-	struct ATTRIB *attr, *attr_b;
+	struct ATTRIB *attr = NULL, *attr_b;
 	struct ATTR_LIST_ENTRY *le, *le_b;
 	struct mft_inode *mi, *mi_b;
 	CLST alen, vcn, lcn, new_alen, old_alen, svcn, evcn;
@@ -825,7 +825,7 @@ int attr_data_get_block(struct ntfs_inode *ni, CLST vcn, CLST clen, CLST *lcn,
 	struct runs_tree *run = &ni->file.run;
 	struct ntfs_sb_info *sbi;
 	u8 cluster_bits;
-	struct ATTRIB *attr, *attr_b;
+	struct ATTRIB *attr = NULL, *attr_b;
 	struct ATTR_LIST_ENTRY *le, *le_b;
 	struct mft_inode *mi, *mi_b;
 	CLST hint, svcn, to_alloc, evcn1, next_svcn, asize, end;
@@ -1468,7 +1468,7 @@ int attr_allocate_frame(struct ntfs_inode *ni, CLST frame, size_t compr_size,
 	int err = 0;
 	struct runs_tree *run = &ni->file.run;
 	struct ntfs_sb_info *sbi = ni->mi.sbi;
-	struct ATTRIB *attr, *attr_b;
+	struct ATTRIB *attr = NULL, *attr_b;
 	struct ATTR_LIST_ENTRY *le, *le_b;
 	struct mft_inode *mi, *mi_b;
 	CLST svcn, evcn1, next_svcn, lcn, len;
@@ -1538,7 +1538,7 @@ int attr_allocate_frame(struct ntfs_inode *ni, CLST frame, size_t compr_size,
 		end = vcn + clst_data;
 		/* run contains updated range [vcn + len : end) */
 	} else {
-		CLST alen, hint;
+		CLST alen, hint = 0;
 		/* Get the last lcn to allocate from */
 		if (vcn + clst_data &&
 		    !run_lookup_entry(run, vcn + clst_data - 1, &hint, NULL,
@@ -1688,7 +1688,7 @@ int attr_collapse_range(struct ntfs_inode *ni, u64 vbo, u64 bytes)
 	int err = 0;
 	struct runs_tree *run = &ni->file.run;
 	struct ntfs_sb_info *sbi = ni->mi.sbi;
-	struct ATTRIB *attr, *attr_b;
+	struct ATTRIB *attr = NULL, *attr_b;
 	struct ATTR_LIST_ENTRY *le, *le_b;
 	struct mft_inode *mi, *mi_b;
 	CLST svcn, evcn1, len, dealloc, alen;
@@ -1711,7 +1711,6 @@ int attr_collapse_range(struct ntfs_inode *ni, u64 vbo, u64 bytes)
 	}
 
 	data_size = le64_to_cpu(attr_b->nres.data_size);
-	valid_size = le64_to_cpu(attr_b->nres.valid_size);
 	alloc_size = le64_to_cpu(attr_b->nres.alloc_size);
 	a_flags = attr_b->flags;
 
@@ -1900,11 +1899,6 @@ int attr_collapse_range(struct ntfs_inode *ni, u64 vbo, u64 bytes)
 		evcn1 = le64_to_cpu(attr->nres.evcn) + 1;
 	}
 
-	if (vbo + bytes <= valid_size)
-		valid_size -= bytes;
-	else if (vbo < valid_size)
-		valid_size = vbo;
-
 	if (!attr_b) {
 		le_b = NULL;
 		attr_b = ni_find_attr(ni, NULL, &le_b, ATTR_DATA, NULL, 0, NULL,
@@ -1915,9 +1909,16 @@ int attr_collapse_range(struct ntfs_inode *ni, u64 vbo, u64 bytes)
 		}
 	}
 
+	data_size -= bytes;
+	valid_size = ni->i_valid;
+	if (vbo + bytes <= valid_size)
+		valid_size -= bytes;
+	else if (vbo < valid_size)
+		valid_size = vbo;
+
 	attr_b->nres.alloc_size = cpu_to_le64(alloc_size - bytes);
-	attr_b->nres.data_size = cpu_to_le64(data_size - bytes);
-	attr_b->nres.valid_size = cpu_to_le64(valid_size);
+	attr_b->nres.data_size = cpu_to_le64(data_size);
+	attr_b->nres.valid_size = cpu_to_le64(min(valid_size, data_size));
 	total_size -= (u64)dealloc << sbi->cluster_bits;
 	if (is_attr_ext(attr_b))
 		attr_b->nres.total_size = cpu_to_le64(total_size);
@@ -1925,7 +1926,7 @@ int attr_collapse_range(struct ntfs_inode *ni, u64 vbo, u64 bytes)
 
 	/*update inode size*/
 	ni->i_valid = valid_size;
-	ni->vfs_inode.i_size = data_size - bytes;
+	ni->vfs_inode.i_size = data_size;
 	inode_set_bytes(&ni->vfs_inode, total_size);
 	ni->ni_flags |= NI_FLAG_UPDATE_PARENT;
 	mark_inode_dirty(&ni->vfs_inode);
@@ -1944,7 +1945,7 @@ int attr_punch_hole(struct ntfs_inode *ni, u64 vbo, u64 bytes)
 	int err = 0;
 	struct runs_tree *run = &ni->file.run;
 	struct ntfs_sb_info *sbi = ni->mi.sbi;
-	struct ATTRIB *attr, *attr_b;
+	struct ATTRIB *attr = NULL, *attr_b;
 	struct ATTR_LIST_ENTRY *le, *le_b;
 	struct mft_inode *mi, *mi_b;
 	CLST svcn, evcn1, vcn, len, end, alen, dealloc;
diff --git a/fs/ntfs3/dir.c b/fs/ntfs3/dir.c
index f1df3f9ea..df2de511e 100644
--- a/fs/ntfs3/dir.c
+++ b/fs/ntfs3/dir.c
@@ -365,7 +365,7 @@ static int ntfs_readdir(struct file *file, struct dir_context *ctx)
 	struct ntfs_inode *ni = ntfs_i(dir);
 	struct super_block *sb = dir->i_sb;
 	struct ntfs_sb_info *sbi = sb->s_fs_info;
-	loff_t i_size = dir->i_size;
+	loff_t i_size = i_size_read(dir);
 	u32 pos = ctx->pos;
 	u8 *name = NULL;
 	struct indx_node *node = NULL;
@@ -374,11 +374,6 @@ static int ntfs_readdir(struct file *file, struct dir_context *ctx)
 	/* name is a buffer of PATH_MAX length */
 	static_assert(NTFS_NAME_LEN * 4 < PATH_MAX);
 
-	if (ni->dir.changed) {
-		ni->dir.changed = false;
-		pos = 0;
-	}
-
 	eod = i_size + sbi->record_size;
 
 	if (pos >= eod)
@@ -569,7 +564,7 @@ bool dir_is_empty(struct inode *dir)
 const struct file_operations ntfs_dir_operations = {
 	.llseek = generic_file_llseek,
 	.read = generic_read_dir,
-	.iterate = ntfs_readdir,
+	.iterate_shared = ntfs_readdir,
 	.fsync = ntfs_file_fsync,
 	.open = ntfs_file_open,
 };
diff --git a/fs/ntfs3/index.c b/fs/ntfs3/index.c
index 64855f9c0..dfcdef0f7 100644
--- a/fs/ntfs3/index.c
+++ b/fs/ntfs3/index.c
@@ -1946,7 +1946,6 @@ int indx_insert_entry(struct ntfs_index *indx, struct ntfs_inode *ni,
 	}
 
 out:
-	indx->changed = true;
 	fnd_put(fnd_a);
 out1:
 	return err;
@@ -2591,9 +2590,7 @@ int indx_delete_entry(struct ntfs_index *indx, struct ntfs_inode *ni,
 out:
 	fnd_put(fnd2);
 out1:
-	indx->changed = true;
 	fnd_put(fnd);
-
 out2:
 	return err;
 }
diff --git a/fs/ntfs3/inode.c b/fs/ntfs3/inode.c
index 2b64fe8c1..c74cb12dc 100644
--- a/fs/ntfs3/inode.c
+++ b/fs/ntfs3/inode.c
@@ -591,16 +591,6 @@ static noinline int ntfs_get_block_vbo(struct inode *inode, u64 vbo,
 		/*ntfs_direct_IO will update ni->i_valid */
 		if (vbo >= valid)
 			set_buffer_new(bh);
-	} else if (create && ctx == GET_BLOCK_WRITE_BEGIN &&
-		   vbo + bh->b_size > valid) {
-		u32 voff = valid > vbo ? (valid - vbo) : 0;
-
-		off = vbo & (PAGE_SIZE - 1);
-		zero_user_segment(page, off + voff, off + bh->b_size);
-		set_buffer_uptodate(bh);
-		ni->i_valid = vbo + bh->b_size;
-
-		/* ntfs_write_end will update ni->i_valid*/
 	} else if (create) {
 		/*normal write*/
 		if (vbo >= valid) {
diff --git a/fs/ntfs3/ntfs_fs.h b/fs/ntfs3/ntfs_fs.h
index 6bdd2d35a..8fa5bd9ec 100644
--- a/fs/ntfs3/ntfs_fs.h
+++ b/fs/ntfs3/ntfs_fs.h
@@ -151,7 +151,6 @@ struct ntfs_index {
 	u8 index_bits; // log2(root->index_block_size)
 	u8 idx2vbn_bits; // log2(root->index_block_clst)
 	u8 vbn2vbo_bits; // index_block_size < cluster? 9 : cluster_bits
-	u8 changed; // set when tree is changed
 	u8 type; // index_mutex_classed
 };
 
-- 
2.30.0.rc0

