From 38c85aea852d176d88613992c35942d4876acba4 Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Fri, 12 Feb 2021 20:14:33 +0100
Subject: [PATCH 16/16] ntfs3-5.10: update to v21

(modulo userns changes from linux-next)

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 fs/ntfs3/attrib.c  |   8 +--
 fs/ntfs3/file.c    |   5 +-
 fs/ntfs3/frecord.c |   2 +-
 fs/ntfs3/index.c   |  45 ++++++++-----
 fs/ntfs3/inode.c   |  21 +++---
 fs/ntfs3/namei.c   |   6 +-
 fs/ntfs3/ntfs.h    |  12 ++--
 fs/ntfs3/ntfs_fs.h |   1 +
 fs/ntfs3/run.c     |   8 +--
 fs/ntfs3/super.c   |  58 ++++++++++++-----
 fs/ntfs3/xattr.c   | 159 ++++++++++++++++++---------------------------
 11 files changed, 160 insertions(+), 165 deletions(-)

diff --git a/fs/ntfs3/attrib.c b/fs/ntfs3/attrib.c
index a938ec23e..7c85a6d33 100644
--- a/fs/ntfs3/attrib.c
+++ b/fs/ntfs3/attrib.c
@@ -458,12 +458,12 @@ int attr_set_size(struct ntfs_inode *ni, enum ATTR_TYPE type,
 	is_ext = is_attr_ext(attr_b);
 
 again_1:
+	align = sbi->cluster_size;
+
 	if (is_ext) {
-		align = 1u << (attr_b->nres.c_unit + cluster_bits);
+		align <<= attr_b->nres.c_unit;
 		if (is_attr_sparsed(attr_b))
 			keep_prealloc = false;
-	} else {
-		align = sbi->cluster_size;
 	}
 
 	old_valid = le64_to_cpu(attr_b->nres.valid_size);
@@ -1720,7 +1720,7 @@ int attr_collapse_range(struct ntfs_inode *ni, u64 vbo, u64 bytes)
 
 	if (is_attr_ext(attr_b)) {
 		total_size = le64_to_cpu(attr_b->nres.total_size);
-		mask = (1u << (attr_b->nres.c_unit + sbi->cluster_bits)) - 1;
+		mask = (sbi->cluster_size << attr_b->nres.c_unit) - 1;
 	} else {
 		total_size = alloc_size;
 		mask = sbi->cluster_mask;
diff --git a/fs/ntfs3/file.c b/fs/ntfs3/file.c
index 04caa200a..3886a4a27 100644
--- a/fs/ntfs3/file.c
+++ b/fs/ntfs3/file.c
@@ -396,10 +396,8 @@ static int ntfs_extend(struct inode *inode, loff_t pos, size_t count,
 static int ntfs_truncate(struct inode *inode, loff_t new_size)
 {
 	struct super_block *sb = inode->i_sb;
-	struct ntfs_sb_info *sbi = sb->s_fs_info;
 	struct ntfs_inode *ni = ntfs_i(inode);
 	int err, dirty = 0;
-	u32 vcn;
 	u64 new_valid;
 
 	if (!S_ISREG(inode->i_mode))
@@ -415,7 +413,6 @@ static int ntfs_truncate(struct inode *inode, loff_t new_size)
 			return err;
 	}
 
-	vcn = bytes_to_cluster(sbi, new_size);
 	new_valid = ntfs_up_block(sb, min_t(u64, ni->i_valid, new_size));
 
 	ni_lock(ni);
@@ -584,7 +581,7 @@ static long ntfs_fallocate(struct file *file, int mode, loff_t vbo, loff_t len)
 				 * 1G of sparsed clusters + 1 cluster of data =>
 				 * valid_size == 1G + 1 cluster
 				 * fallocate(1G) will zero 1G and this can be very long
-				 * xfstest 016/086 will fail whithout 'ntfs_sparse_cluster'
+				 * xfstest 016/086 will fail without 'ntfs_sparse_cluster'
 				 */
 				/*ntfs_sparse_cluster(inode, NULL, vcn,
 				 *		    min(vcn_v - vcn, clen));
diff --git a/fs/ntfs3/frecord.c b/fs/ntfs3/frecord.c
index b89423fe8..9f4fe612c 100644
--- a/fs/ntfs3/frecord.c
+++ b/fs/ntfs3/frecord.c
@@ -21,7 +21,7 @@
 
 static inline void get_mi_ref(const struct mft_inode *mi, struct MFT_REF *ref)
 {
-#ifdef NTFS3_64BIT_CLUSTER
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
 	ref->low = cpu_to_le32(mi->rno);
 	ref->high = cpu_to_le16(mi->rno >> 32);
 #else
diff --git a/fs/ntfs3/index.c b/fs/ntfs3/index.c
index 6dbecf052..73867148a 100644
--- a/fs/ntfs3/index.c
+++ b/fs/ntfs3/index.c
@@ -28,12 +28,14 @@ static const struct INDEX_NAMES {
  * if l1 != 0
  *   both names are little endian on-disk ATTR_FILE_NAME structs
  * else
- *   f1 - cpu_str, f2 - ATTR_FILE_NAME
+ *   key1 - cpu_str, key2 - ATTR_FILE_NAME
  */
-static int cmp_fnames(const struct ATTR_FILE_NAME *f1, size_t l1,
-		      const struct ATTR_FILE_NAME *f2, size_t l2,
-		      const struct ntfs_sb_info *sbi)
+static int cmp_fnames(const void *key1, size_t l1, const void *key2, size_t l2,
+		      const void *data)
 {
+	const struct ATTR_FILE_NAME *f2 = key2;
+	const struct ntfs_sb_info *sbi = data;
+	const struct ATTR_FILE_NAME *f1;
 	u16 fsize2;
 	bool both_case;
 
@@ -46,24 +48,27 @@ static int cmp_fnames(const struct ATTR_FILE_NAME *f1, size_t l1,
 
 	both_case = f2->type != FILE_NAME_DOS /*&& !sbi->options.nocase*/;
 	if (!l1) {
-		const struct cpu_str *s1 = (struct cpu_str *)f1;
 		const struct le_str *s2 = (struct le_str *)&f2->name_len;
 
 		/*
 		 * If names are equal (case insensitive)
 		 * try to compare it case sensitive
 		 */
-		return ntfs_cmp_names_cpu(s1, s2, sbi->upcase, both_case);
+		return ntfs_cmp_names_cpu(key1, s2, sbi->upcase, both_case);
 	}
 
+	f1 = key1;
 	return ntfs_cmp_names(f1->name, f1->name_len, f2->name, f2->name_len,
 			      sbi->upcase, both_case);
 }
 
 /* $SII of $Secure and $Q of Quota */
-static int cmp_uint(const u32 *k1, size_t l1, const u32 *k2, size_t l2,
-		    const void *p)
+static int cmp_uint(const void *key1, size_t l1, const void *key2, size_t l2,
+		    const void *data)
 {
+	const u32 *k1 = key1;
+	const u32 *k2 = key2;
+
 	if (l2 < sizeof(u32))
 		return -1;
 
@@ -75,9 +80,11 @@ static int cmp_uint(const u32 *k1, size_t l1, const u32 *k2, size_t l2,
 }
 
 /* $SDH of $Secure */
-static int cmp_sdh(const struct SECURITY_KEY *k1, size_t l1,
-		   const struct SECURITY_KEY *k2, size_t l2, const void *p)
+static int cmp_sdh(const void *key1, size_t l1, const void *key2, size_t l2,
+		   const void *data)
 {
+	const struct SECURITY_KEY *k1 = key1;
+	const struct SECURITY_KEY *k2 = key2;
 	u32 t1, t2;
 
 	if (l2 < sizeof(struct SECURITY_KEY))
@@ -93,7 +100,7 @@ static int cmp_sdh(const struct SECURITY_KEY *k1, size_t l1,
 		return 1;
 
 	/* Second value is security Id */
-	if (p) {
+	if (data) {
 		t1 = le32_to_cpu(k1->sec_id);
 		t2 = le32_to_cpu(k2->sec_id);
 		if (t1 < t2)
@@ -106,12 +113,14 @@ static int cmp_sdh(const struct SECURITY_KEY *k1, size_t l1,
 }
 
 /* $O of ObjId and "$R" for Reparse */
-static int cmp_uints(const __le32 *k1, size_t l1, const __le32 *k2, size_t l2,
-		     const void *p)
+static int cmp_uints(const void *key1, size_t l1, const void *key2, size_t l2,
+		     const void *data)
 {
+	const __le32 *k1 = key1;
+	const __le32 *k2 = key2;
 	size_t count;
 
-	if ((size_t)p == 1) {
+	if ((size_t)data == 1) {
 		/*
 		 * ni_delete_all -> ntfs_remove_reparse -> delete all with this reference
 		 * k1, k2 - pointers to REPARSE_KEY
@@ -153,16 +162,16 @@ static inline NTFS_CMP_FUNC get_cmp_func(const struct INDEX_ROOT *root)
 	switch (root->type) {
 	case ATTR_NAME:
 		if (root->rule == NTFS_COLLATION_TYPE_FILENAME)
-			return (NTFS_CMP_FUNC)&cmp_fnames;
+			return &cmp_fnames;
 		break;
 	case ATTR_ZERO:
 		switch (root->rule) {
 		case NTFS_COLLATION_TYPE_UINT:
-			return (NTFS_CMP_FUNC)&cmp_uint;
+			return &cmp_uint;
 		case NTFS_COLLATION_TYPE_SECURITY_HASH:
-			return (NTFS_CMP_FUNC)&cmp_sdh;
+			return &cmp_sdh;
 		case NTFS_COLLATION_TYPE_UINTS:
-			return (NTFS_CMP_FUNC)&cmp_uints;
+			return &cmp_uints;
 		default:
 			break;
 		}
diff --git a/fs/ntfs3/inode.c b/fs/ntfs3/inode.c
index 9b07738d4..504d783f6 100644
--- a/fs/ntfs3/inode.c
+++ b/fs/ntfs3/inode.c
@@ -292,7 +292,7 @@ static struct inode *ntfs_read_mft(struct inode *inode,
 		if (ino == MFT_REC_MFT) {
 			if (!attr->non_res)
 				goto out;
-#ifndef NTFS3_64BIT_CLUSTER
+#ifndef CONFIG_NTFS3_64BIT_CLUSTER
 			/* 0x20000000 = 2^32 / 8 */
 			if (le64_to_cpu(attr->nres.alloc_size) >= 0x20000000)
 				goto out;
@@ -465,15 +465,18 @@ static struct inode *ntfs_read_mft(struct inode *inode,
 }
 
 /* returns 1 if match */
-static int ntfs_test_inode(struct inode *inode, const struct MFT_REF *ref)
+static int ntfs_test_inode(struct inode *inode, void *data)
 {
+	struct MFT_REF *ref = data;
+
 	return ino_get(ref) == inode->i_ino;
 }
 
-static int ntfs_set_inode(struct inode *inode, const struct MFT_REF *ref)
+static int ntfs_set_inode(struct inode *inode, void *data)
 {
-	inode->i_ino = ino_get(ref);
+	const struct MFT_REF *ref = data;
 
+	inode->i_ino = ino_get(ref);
 	return 0;
 }
 
@@ -482,9 +485,7 @@ struct inode *ntfs_iget5(struct super_block *sb, const struct MFT_REF *ref,
 {
 	struct inode *inode;
 
-	inode = iget5_locked(sb, ino_get(ref),
-			     (int (*)(struct inode *, void *))ntfs_test_inode,
-			     (int (*)(struct inode *, void *))ntfs_set_inode,
+	inode = iget5_locked(sb, ino_get(ref), ntfs_test_inode, ntfs_set_inode,
 			     (void *)ref);
 	if (unlikely(!inode))
 		return ERR_PTR(-ENOMEM);
@@ -1347,7 +1348,7 @@ int ntfs_create_inode(struct inode *dir, struct dentry *dentry,
 	fname = (struct ATTR_FILE_NAME *)(new_de + 1);
 
 	new_de->ref.low = cpu_to_le32(ino);
-#ifdef NTFS3_64BIT_CLUSTER
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
 	new_de->ref.high = cpu_to_le16(ino >> 32);
 	fname->home.high = cpu_to_le16(dir->i_ino >> 32);
 #endif
@@ -1686,7 +1687,7 @@ int ntfs_link_inode(struct inode *inode, struct dentry *dentry)
 		goto out;
 
 	new_de->ref.low = cpu_to_le32(inode->i_ino);
-#ifdef NTFS3_64BIT_CLUSTER
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
 	new_de->ref.high = cpu_to_le16(inode->i_ino >> 32);
 	fname->home.high = cpu_to_le16(dir->i_ino >> 32);
 #endif
@@ -1772,7 +1773,7 @@ int ntfs_unlink_inode(struct inode *dir, const struct dentry *dentry)
 	ntfs_set_state(sbi, NTFS_DIRTY_DIRTY);
 
 	/* find name in record */
-#ifdef NTFS3_64BIT_CLUSTER
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
 	ref.low = cpu_to_le32(dir->i_ino & 0xffffffff);
 	ref.high = cpu_to_le16(dir->i_ino >> 32);
 #else
diff --git a/fs/ntfs3/namei.c b/fs/ntfs3/namei.c
index e53cfc0f1..34d89ec2a 100644
--- a/fs/ntfs3/namei.c
+++ b/fs/ntfs3/namei.c
@@ -29,7 +29,7 @@ int fill_name_de(struct ntfs_sb_info *sbi, void *buf, const struct qstr *name,
 	u16 data_size;
 	struct ATTR_FILE_NAME *fname = (struct ATTR_FILE_NAME *)(e + 1);
 
-#ifndef NTFS3_64BIT_CLUSTER
+#ifndef CONFIG_NTFS3_64BIT_CLUSTER
 	e->ref.high = fname->home.high = 0;
 #endif
 	if (uni) {
@@ -332,7 +332,7 @@ static int ntfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 	ni_lock(old_ni);
 
 	old_name->home.low = cpu_to_le32(old_dir->i_ino);
-#ifdef NTFS3_64BIT_CLUSTER
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
 	old_name->home.high = cpu_to_le16(old_dir->i_ino >> 32);
 #endif
 	old_name->home.seq = old_dir_ni->mi.mrec->seq;
@@ -389,7 +389,7 @@ static int ntfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 
 	/* Add new name */
 	new_de->ref.low = cpu_to_le32(old_inode->i_ino);
-#ifdef NTFS3_64BIT_CLUSTER
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
 	new_de->ref.high = cpu_to_le16(old_inode->i_ino >> 32);
 	new_name->home.high = cpu_to_le16(new_dir->i_ino >> 32);
 #endif
diff --git a/fs/ntfs3/ntfs.h b/fs/ntfs3/ntfs.h
index c26401808..b6a97b628 100644
--- a/fs/ntfs3/ntfs.h
+++ b/fs/ntfs3/ntfs.h
@@ -36,7 +36,7 @@
  * Logical and virtual cluster number
  * If needed, may be redefined to use 64 bit value
  */
-//#define NTFS3_64BIT_CLUSTER
+//#define CONFIG_NTFS3_64BIT_CLUSTER
 
 #define NTFS_LZNT_MAX_CLUSTER	4096
 #define NTFS_LZNT_CUNIT		4
@@ -69,7 +69,7 @@ struct le_str {
 
 static_assert(SECTOR_SHIFT == 9);
 
-#ifdef NTFS3_64BIT_CLUSTER
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
 typedef u64 CLST;
 static_assert(sizeof(size_t) == 8);
 #else
@@ -187,7 +187,7 @@ static_assert(sizeof(__le64) == sizeof(struct MFT_REF));
 
 static inline CLST ino_get(const struct MFT_REF *ref)
 {
-#ifdef NTFS3_64BIT_CLUSTER
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
 	return le32_to_cpu(ref->low) | ((u64)le16_to_cpu(ref->high) << 32);
 #else
 	return le32_to_cpu(ref->low);
@@ -425,7 +425,7 @@ static inline bool is_attr_indexed(const struct ATTRIB *attr)
 	return !attr->non_res && (attr->res.flags & RESIDENT_FLAG_INDEXED);
 }
 
-static const inline __le16 *attr_name(const struct ATTRIB *attr)
+static inline __le16 const *attr_name(const struct ATTRIB *attr)
 {
 	return Add2Ptr(attr, le16_to_cpu(attr->name_off));
 }
@@ -542,7 +542,7 @@ static inline int le_cmp(const struct ATTR_LIST_ENTRY *le,
 		       le->name_len * sizeof(short)));
 }
 
-static const inline __le16 *le_name(const struct ATTR_LIST_ENTRY *le)
+static inline __le16 const *le_name(const struct ATTR_LIST_ENTRY *le)
 {
 	return Add2Ptr(le, le->name_off);
 }
@@ -1194,8 +1194,6 @@ struct EA_FULL {
 
 static_assert(offsetof(struct EA_FULL, name) == 8);
 
-#define MAX_EA_DATA_SIZE (256 * 1024)
-
 #define ACL_REVISION 2
 
 #define SE_SELF_RELATIVE cpu_to_le16(0x8000)
diff --git a/fs/ntfs3/ntfs_fs.h b/fs/ntfs3/ntfs_fs.h
index c6a42de17..6e5afe3dc 100644
--- a/fs/ntfs3/ntfs_fs.h
+++ b/fs/ntfs3/ntfs_fs.h
@@ -202,6 +202,7 @@ struct ntfs_sb_info {
 
 	struct ATTR_DEF_ENTRY *def_table; // attribute definition table
 	u32 def_entries;
+	u32 ea_max_size;
 
 	struct MFT_REC *new_rec;
 
diff --git a/fs/ntfs3/run.c b/fs/ntfs3/run.c
index e4e38242f..354c6baa0 100644
--- a/fs/ntfs3/run.c
+++ b/fs/ntfs3/run.c
@@ -944,13 +944,13 @@ int run_unpack(struct runs_tree *run, struct ntfs_sb_info *sbi, CLST ino,
 		if (next_vcn > evcn + 1)
 			return -EINVAL;
 
-#ifndef NTFS3_64BIT_CLUSTER
+#ifndef CONFIG_NTFS3_64BIT_CLUSTER
 		if (next_vcn > 0x100000000ull || (lcn + len) > 0x100000000ull) {
 			ntfs_err(
 				sbi->sb,
-				"This driver is compiled whitout NTFS3_64BIT_CLUSTER (like windows driver).\n"
+				"This driver is compiled whitout CONFIG_NTFS3_64BIT_CLUSTER (like windows driver).\n"
 				"Volume contains 64 bits run: vcn %llx, lcn %llx, len %llx.\n"
-				"Activate NTFS3_64BIT_CLUSTER to process this case",
+				"Activate CONFIG_NTFS3_64BIT_CLUSTER to process this case",
 				vcn64, lcn, len);
 			return -EOPNOTSUPP;
 		}
@@ -1109,7 +1109,7 @@ int run_get_highest_vcn(CLST vcn, const u8 *run_buf, u64 *highest_vcn)
 		run_buf += size_size + offset_size;
 		vcn64 += len;
 
-#ifndef NTFS3_64BIT_CLUSTER
+#ifndef CONFIG_NTFS3_64BIT_CLUSTER
 		if (vcn64 > 0x100000000ull)
 			return -EINVAL;
 #endif
diff --git a/fs/ntfs3/super.c b/fs/ntfs3/super.c
index f7bc59f72..69c8a7d33 100644
--- a/fs/ntfs3/super.c
+++ b/fs/ntfs3/super.c
@@ -642,7 +642,7 @@ static struct inode *ntfs_export_get_inode(struct super_block *sb, u64 ino,
 	struct inode *inode;
 
 	ref.low = cpu_to_le32(ino);
-#ifdef NTFS3_64BIT_CLUSTER
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
 	ref.high = cpu_to_le16(ino >> 32);
 #else
 	ref.high = 0;
@@ -835,9 +835,9 @@ static int ntfs_init_from_boot(struct super_block *sb, u32 sector_size,
 	}
 
 	clusters = sbi->volume.size >> sbi->cluster_bits;
-#ifdef NTFS3_64BIT_CLUSTER
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
 #if BITS_PER_LONG < 64
-#error "NTFS3_64BIT_CLUSTER incompatible in 32 bit OS"
+#error "CONFIG_NTFS3_64BIT_CLUSTER incompatible in 32 bit OS"
 #endif
 #else
 	/* 32 bits per cluster */
@@ -879,7 +879,7 @@ static int ntfs_init_from_boot(struct super_block *sb, u32 sector_size,
 	/* Maximum size for normal files */
 	sbi->maxbytes = (clusters << sbi->cluster_bits) - 1;
 
-#ifdef NTFS3_64BIT_CLUSTER
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
 	if (clusters >= (1ull << (64 - sbi->cluster_bits)))
 		sbi->maxbytes = -1;
 	sbi->maxbytes_sparse = -1;
@@ -931,7 +931,6 @@ static int ntfs_fill_super(struct super_block *sb, void *data, int silent)
 	sb->s_export_op = &ntfs_export_ops;
 	sb->s_time_gran = NTFS_TIME_GRAN; // 100 nsec
 	sb->s_xattr = ntfs_xattr_handlers;
-	sb->s_maxbytes = MAX_LFS_FILESIZE;
 
 	ratelimit_state_init(&sbi->msg_ratelimit, DEFAULT_RATELIMIT_INTERVAL,
 			     DEFAULT_RATELIMIT_BURST);
@@ -956,6 +955,12 @@ static int ntfs_fill_super(struct super_block *sb, void *data, int silent)
 	if (err)
 		goto out;
 
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
+	sb->s_maxbytes = MAX_LFS_FILESIZE;
+#else
+	sb->s_maxbytes = 0xFFFFFFFFull << sbi->cluster_bits;
+#endif
+
 	mutex_init(&sbi->compress.mtx_lznt);
 #ifdef CONFIG_NTFS3_LZX_XPRESS
 	mutex_init(&sbi->compress.mtx_xpress);
@@ -1137,7 +1142,7 @@ static int ntfs_fill_super(struct super_block *sb, void *data, int silent)
 
 	ni = ntfs_i(inode);
 
-#ifndef NTFS3_64BIT_CLUSTER
+#ifndef CONFIG_NTFS3_64BIT_CLUSTER
 	if (inode->i_size >> 32) {
 		err = -EINVAL;
 		goto out;
@@ -1208,15 +1213,19 @@ static int ntfs_fill_super(struct super_block *sb, void *data, int silent)
 	sbi->def_entries = 1;
 	done = sizeof(struct ATTR_DEF_ENTRY);
 	sbi->reparse.max_size = MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
+	sbi->ea_max_size = 0x10000; /* default formater value */
 
 	while (done + sizeof(struct ATTR_DEF_ENTRY) <= bytes) {
 		u32 t32 = le32_to_cpu(t->type);
+		u64 sz = le64_to_cpu(t->max_sz);
 
 		if ((t32 & 0xF) || le32_to_cpu(t[-1].type) >= t32)
 			break;
 
 		if (t->type == ATTR_REPARSE)
-			sbi->reparse.max_size = le64_to_cpu(t->max_sz);
+			sbi->reparse.max_size = sz;
+		else if (t->type == ATTR_EA)
+			sbi->ea_max_size = sz;
 
 		done += sizeof(struct ATTR_DEF_ENTRY);
 		t += 1;
@@ -1424,6 +1433,22 @@ static int __init init_ntfs_fs(void)
 {
 	int err;
 
+	pr_notice("ntfs3: Index binary search\n");
+	pr_notice("ntfs3: Hot fix free clusters\n");
+	pr_notice("ntfs3: Max link count %u\n", NTFS_LINK_MAX);
+
+#ifdef CONFIG_NTFS3_FS_POSIX_ACL
+	pr_notice("ntfs3: Enabled Linux POSIX ACLs support\n");
+#endif
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
+	pr_notice("ntfs3: Activated 64 bits per cluster\n");
+#else
+	pr_notice("ntfs3: Activated 32 bits per cluster\n");
+#endif
+#ifdef CONFIG_NTFS3_LZX_XPRESS
+	pr_notice("ntfs3: Read-only lzx/xpress compression included\n");
+#endif
+
 	ntfs_inode_cachep = kmem_cache_create(
 		"ntfs_inode_cache", sizeof(struct ntfs_inode), 0,
 		(SLAB_RECLAIM_ACCOUNT | SLAB_MEM_SPREAD | SLAB_ACCOUNT),
@@ -1454,20 +1479,19 @@ static void __exit exit_ntfs_fs(void)
 }
 
 MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("ntfs3 filesystem");
-#ifdef NTFS3_INDEX_BINARY_SEARCH
-MODULE_INFO(behaviour, "index binary search");
-#endif
-#ifdef NTFS3_CHECK_FREE_CLST
-MODULE_INFO(behaviour, "hot fix free clusters");
+MODULE_DESCRIPTION("ntfs3 read/write filesystem");
+MODULE_INFO(behaviour, "Index binary search");
+MODULE_INFO(behaviour, "Hot fix free clusters");
+#ifdef CONFIG_NTFS3_FS_POSIX_ACL
+MODULE_INFO(behaviour, "Enabled Linux POSIX ACLs support");
 #endif
-#ifdef NTFS3_64BIT_CLUSTER
-MODULE_INFO(cluster, "64 bits per cluster");
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
+MODULE_INFO(cluster, "Activated 64 bits per cluster");
 #else
-MODULE_INFO(cluster, "32 bits per cluster");
+MODULE_INFO(cluster, "Activated 32 bits per cluster");
 #endif
 #ifdef CONFIG_NTFS3_LZX_XPRESS
-MODULE_INFO(compression, "read-only lzx/xpress compression included");
+MODULE_INFO(compression, "Read-only lzx/xpress compression included");
 #endif
 
 MODULE_AUTHOR("Konstantin Komarov");
diff --git a/fs/ntfs3/xattr.c b/fs/ntfs3/xattr.c
index 3b9946ea0..f94f215c1 100644
--- a/fs/ntfs3/xattr.c
+++ b/fs/ntfs3/xattr.c
@@ -21,7 +21,6 @@
 #define SYSTEM_DOS_ATTRIB    "system.dos_attrib"
 #define SYSTEM_NTFS_ATTRIB   "system.ntfs_attrib"
 #define SYSTEM_NTFS_SECURITY "system.ntfs_security"
-#define USER_DOSATTRIB       "user.DOSATTRIB"
 // clang-format on
 
 static inline size_t unpacked_ea_size(const struct EA_FULL *ea)
@@ -103,8 +102,11 @@ static int ntfs_read_ea(struct ntfs_inode *ni, struct EA_FULL **ea,
 
 	/* Check Ea limit */
 	size = le32_to_cpu((*info)->size);
-	if (size > MAX_EA_DATA_SIZE || size + add_bytes > MAX_EA_DATA_SIZE)
-		return -EINVAL;
+	if (size > ni->mi.sbi->ea_max_size)
+		return -EFBIG;
+
+	if (attr_size(attr_ea) > ni->mi.sbi->ea_max_size)
+		return -EFBIG;
 
 	/* Allocate memory for packed Ea */
 	ea_p = ntfs_malloc(size + add_bytes);
@@ -145,13 +147,13 @@ static int ntfs_read_ea(struct ntfs_inode *ni, struct EA_FULL **ea,
 }
 
 /*
- * ntfs_listxattr_hlp
+ * ntfs_list_ea
  *
  * copy a list of xattrs names into the buffer
  * provided, or compute the buffer size required
  */
-static int ntfs_listxattr_hlp(struct ntfs_inode *ni, char *buffer,
-			      size_t bytes_per_buffer, size_t *bytes)
+static int ntfs_list_ea(struct ntfs_inode *ni, char *buffer,
+			size_t bytes_per_buffer, size_t *bytes)
 {
 	const struct EA_INFO *info;
 	struct EA_FULL *ea_all = NULL;
@@ -192,21 +194,23 @@ static int ntfs_listxattr_hlp(struct ntfs_inode *ni, char *buffer,
 	return err;
 }
 
-/*
- * ntfs_get_ea
- *
- * reads xattr
- */
-static int ntfs_get_ea(struct ntfs_inode *ni, const char *name, size_t name_len,
-		       void *buffer, size_t bytes_per_buffer, u32 *len)
+static int ntfs_get_ea(struct inode *inode, const char *name, size_t name_len,
+		       void *buffer, size_t size, size_t *required)
 {
+	struct ntfs_inode *ni = ntfs_i(inode);
 	const struct EA_INFO *info;
 	struct EA_FULL *ea_all = NULL;
 	const struct EA_FULL *ea;
-	u32 off;
+	u32 off, len;
 	int err;
 
-	*len = 0;
+	if (!(ni->ni_flags & NI_FLAG_EA))
+		return -ENODATA;
+
+	if (!required)
+		ni_lock(ni);
+
+	len = 0;
 
 	if (name_len > 255) {
 		err = -ENAMETOOLONG;
@@ -227,54 +231,33 @@ static int ntfs_get_ea(struct ntfs_inode *ni, const char *name, size_t name_len,
 	}
 	ea = Add2Ptr(ea_all, off);
 
-	*len = le16_to_cpu(ea->elength);
+	len = le16_to_cpu(ea->elength);
 	if (!buffer) {
 		err = 0;
 		goto out;
 	}
 
-	if (*len > bytes_per_buffer) {
+	if (len > size) {
 		err = -ERANGE;
+		if (required)
+			*required = len;
 		goto out;
 	}
-	memcpy(buffer, ea->name + ea->name_len + 1, *len);
+
+	memcpy(buffer, ea->name + ea->name_len + 1, len);
 	err = 0;
 
 out:
 	ntfs_free(ea_all);
-
-	return err;
-}
-
-static noinline int ntfs_getxattr_hlp(struct inode *inode, const char *name,
-				      void *value, size_t size,
-				      size_t *required)
-{
-	struct ntfs_inode *ni = ntfs_i(inode);
-	int err;
-	u32 len;
-
-	if (!(ni->ni_flags & NI_FLAG_EA))
-		return -ENODATA;
-
-	if (!required)
-		ni_lock(ni);
-
-	err = ntfs_get_ea(ni, name, strlen(name), value, size, &len);
-	if (!err)
-		err = len;
-	else if (-ERANGE == err && required)
-		*required = len;
-
 	if (!required)
 		ni_unlock(ni);
 
-	return err;
+	return err ? err : len;
 }
 
 static noinline int ntfs_set_ea(struct inode *inode, const char *name,
-				const void *value, size_t val_size, int flags,
-				int locked)
+				size_t name_len, const void *value,
+				size_t val_size, int flags, int locked)
 {
 	struct ntfs_inode *ni = ntfs_i(inode);
 	struct ntfs_sb_info *sbi = ni->mi.sbi;
@@ -283,7 +266,7 @@ static noinline int ntfs_set_ea(struct inode *inode, const char *name,
 	const struct EA_INFO *info;
 	struct EA_FULL *new_ea;
 	struct EA_FULL *ea_all = NULL;
-	size_t name_len, add;
+	size_t add, new_pack;
 	u32 off, size;
 	__le16 size_pack;
 	struct ATTRIB *attr;
@@ -297,7 +280,6 @@ static noinline int ntfs_set_ea(struct inode *inode, const char *name,
 		ni_lock(ni);
 
 	run_init(&ea_run);
-	name_len = strlen(name);
 
 	if (name_len > 255) {
 		err = -ENAMETOOLONG;
@@ -372,9 +354,21 @@ static noinline int ntfs_set_ea(struct inode *inode, const char *name,
 	memcpy(new_ea->name, name, name_len);
 	new_ea->name[name_len] = 0;
 	memcpy(new_ea->name + name_len + 1, value, val_size);
+	new_pack = le16_to_cpu(ea_info.size_pack) + packed_ea_size(new_ea);
 
-	le16_add_cpu(&ea_info.size_pack, packed_ea_size(new_ea));
+	/* should fit into 16 bits */
+	if (new_pack > 0xffff) {
+		err = -EFBIG; // -EINVAL?
+		goto out;
+	}
+	ea_info.size_pack = cpu_to_le16(new_pack);
+
+	/* new size of ATTR_EA */
 	size += add;
+	if (size > sbi->ea_max_size) {
+		err = -EFBIG; // -EINVAL?
+		goto out;
+	}
 	ea_info.size = cpu_to_le32(size);
 
 update_ea:
@@ -456,7 +450,7 @@ static noinline int ntfs_set_ea(struct inode *inode, const char *name,
 
 	/* Check if we delete the last xattr */
 	if (val_size || flags != XATTR_REPLACE ||
-	    ntfs_listxattr_hlp(ni, NULL, 0, &val_size) || val_size) {
+	    ntfs_list_ea(ni, NULL, 0, &val_size) || val_size) {
 		ni->ni_flags |= NI_FLAG_EA;
 	} else {
 		ni->ni_flags &= ~NI_FLAG_EA;
@@ -484,6 +478,7 @@ static struct posix_acl *ntfs_get_acl_ex(struct inode *inode, int type,
 {
 	struct ntfs_inode *ni = ntfs_i(inode);
 	const char *name;
+	size_t name_len;
 	struct posix_acl *acl;
 	size_t req;
 	int err;
@@ -495,13 +490,18 @@ static struct posix_acl *ntfs_get_acl_ex(struct inode *inode, int type,
 		return ERR_PTR(-ENOMEM);
 
 	/* Possible values of 'type' was already checked above */
-	name = type == ACL_TYPE_ACCESS ? XATTR_NAME_POSIX_ACL_ACCESS :
-					 XATTR_NAME_POSIX_ACL_DEFAULT;
+	if (type == ACL_TYPE_ACCESS) {
+		name = XATTR_NAME_POSIX_ACL_ACCESS;
+		name_len = sizeof(XATTR_NAME_POSIX_ACL_ACCESS) - 1;
+	} else {
+		name = XATTR_NAME_POSIX_ACL_DEFAULT;
+		name_len = sizeof(XATTR_NAME_POSIX_ACL_DEFAULT) - 1;
+	}
 
 	if (!locked)
 		ni_lock(ni);
 
-	err = ntfs_getxattr_hlp(inode, name, buf, PATH_MAX, &req);
+	err = ntfs_get_ea(inode, name, name_len, buf, PATH_MAX, &req);
 
 	if (!locked)
 		ni_unlock(ni);
@@ -534,7 +534,7 @@ static noinline int ntfs_set_acl_ex(struct inode *inode, struct posix_acl *acl,
 				    int type, int locked)
 {
 	const char *name;
-	size_t size;
+	size_t size, name_len;
 	void *value = NULL;
 	int err = 0;
 
@@ -565,12 +565,14 @@ static noinline int ntfs_set_acl_ex(struct inode *inode, struct posix_acl *acl,
 			}
 		}
 		name = XATTR_NAME_POSIX_ACL_ACCESS;
+		name_len = sizeof(XATTR_NAME_POSIX_ACL_ACCESS) - 1;
 		break;
 
 	case ACL_TYPE_DEFAULT:
 		if (!S_ISDIR(inode->i_mode))
 			return acl ? -EACCES : 0;
 		name = XATTR_NAME_POSIX_ACL_DEFAULT;
+		name_len = sizeof(XATTR_NAME_POSIX_ACL_DEFAULT) - 1;
 		break;
 
 	default:
@@ -589,7 +591,7 @@ static noinline int ntfs_set_acl_ex(struct inode *inode, struct posix_acl *acl,
 	if (err)
 		goto out;
 
-	err = ntfs_set_ea(inode, name, value, size, 0, locked);
+	err = ntfs_set_ea(inode, name, name_len, value, size, 0, locked);
 	if (err)
 		goto out;
 
@@ -617,11 +619,10 @@ int ntfs_set_acl(struct inode *inode, struct posix_acl *acl, int type)
 static int ntfs_xattr_get_acl(struct inode *inode, int type, void *buffer,
 			      size_t size)
 {
-	struct super_block *sb = inode->i_sb;
 	struct posix_acl *acl;
 	int err;
 
-	if (!(sb->s_flags & SB_POSIXACL))
+	if (!(inode->i_sb->s_flags & SB_POSIXACL))
 		return -EOPNOTSUPP;
 
 	acl = ntfs_get_acl(inode, type);
@@ -640,11 +641,10 @@ static int ntfs_xattr_get_acl(struct inode *inode, int type, void *buffer,
 static int ntfs_xattr_set_acl(struct inode *inode, int type, const void *value,
 			      size_t size)
 {
-	struct super_block *sb = inode->i_sb;
 	struct posix_acl *acl;
 	int err;
 
-	if (!(sb->s_flags & SB_POSIXACL))
+	if (!(inode->i_sb->s_flags & SB_POSIXACL))
 		return -EOPNOTSUPP;
 
 	if (!inode_owner_or_capable(inode))
@@ -658,7 +658,7 @@ static int ntfs_xattr_set_acl(struct inode *inode, int type, const void *value,
 		return PTR_ERR(acl);
 
 	if (acl) {
-		err = posix_acl_valid(sb->s_user_ns, acl);
+		err = posix_acl_valid(&init_user_ns, acl);
 		if (err)
 			goto release_and_out;
 	}
@@ -780,14 +780,13 @@ ssize_t ntfs_listxattr(struct dentry *dentry, char *buffer, size_t size)
 
 	ni_lock(ni);
 
-	err = ntfs_listxattr_hlp(ni, buffer, size, (size_t *)&ret);
+	err = ntfs_list_ea(ni, buffer, size, (size_t *)&ret);
 
 	ni_unlock(ni);
 
 	if (err)
 		ret = err;
 out:
-
 	return ret;
 }
 
@@ -828,21 +827,6 @@ static int ntfs_getxattr(const struct xattr_handler *handler, struct dentry *de,
 		goto out;
 	}
 
-	if (name_len == sizeof(USER_DOSATTRIB) - 1 &&
-	    !memcmp(name, USER_DOSATTRIB, sizeof(USER_DOSATTRIB))) {
-		/* user.DOSATTRIB */
-		if (!buffer) {
-			err = 5;
-		} else if (size < 5) {
-			err = -ENODATA;
-		} else {
-			err = sprintf((char *)buffer, "0x%x",
-				      le32_to_cpu(ni->std_fa) & 0xff) +
-			      1;
-		}
-		goto out;
-	}
-
 	if (name_len == sizeof(SYSTEM_NTFS_SECURITY) - 1 &&
 	    !memcmp(name, SYSTEM_NTFS_SECURITY, sizeof(SYSTEM_NTFS_SECURITY))) {
 		/* system.ntfs_security*/
@@ -900,7 +884,7 @@ static int ntfs_getxattr(const struct xattr_handler *handler, struct dentry *de,
 	}
 #endif
 	/* deal with ntfs extended attribute */
-	err = ntfs_getxattr_hlp(inode, name, buffer, size, NULL);
+	err = ntfs_get_ea(inode, name, name_len, buffer, size, NULL);
 
 out:
 	return err;
@@ -944,25 +928,6 @@ static noinline int ntfs_setxattr(const struct xattr_handler *handler,
 			if (err)
 				goto out;
 		}
-		goto set_new_fa;
-	}
-
-	if (name_len == sizeof(USER_DOSATTRIB) - 1 &&
-	    !memcmp(name, USER_DOSATTRIB, sizeof(USER_DOSATTRIB))) {
-		u32 attrib;
-
-		if (size < 4 || ((char *)value)[size - 1])
-			goto out;
-
-		/*
-		 * The input value must be string in form 0x%x with last zero
-		 * This means that the 'size' must be 4, 5, ...
-		 *  E.g: 0x1 - 4 bytes, 0x20 - 5 bytes
-		 */
-		if (sscanf((char *)value, "0x%x", &attrib) != 1)
-			goto out;
-
-		new_fa = cpu_to_le32(attrib);
 set_new_fa:
 		/*
 		 * Thanks Mark Harmstone:
@@ -1048,7 +1013,7 @@ static noinline int ntfs_setxattr(const struct xattr_handler *handler,
 	}
 #endif
 	/* deal with ntfs extended attribute */
-	err = ntfs_set_ea(inode, name, value, size, flags, 0);
+	err = ntfs_set_ea(inode, name, name_len, value, size, flags, 0);
 
 out:
 	return err;
-- 
2.30.1.457.gf011795891

