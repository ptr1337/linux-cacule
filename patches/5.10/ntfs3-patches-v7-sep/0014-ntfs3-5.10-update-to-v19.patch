From b83ef39c54ef4bbabe475a23e9d6fcb64614768e Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Thu, 28 Jan 2021 11:21:27 +0100
Subject: [PATCH 14/16] ntfs3-5.10: update to v19

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 fs/ntfs3/Kconfig   |  2 +-
 fs/ntfs3/dir.c     |  2 +-
 fs/ntfs3/fsntfs.c  |  8 +++----
 fs/ntfs3/index.c   | 58 ++++++++++++++++++----------------------------
 fs/ntfs3/inode.c   |  2 --
 fs/ntfs3/namei.c   |  2 +-
 fs/ntfs3/ntfs_fs.h | 13 +++++++++--
 fs/ntfs3/upcase.c  |  4 ++--
 8 files changed, 43 insertions(+), 48 deletions(-)

diff --git a/fs/ntfs3/Kconfig b/fs/ntfs3/Kconfig
index e47a90567..4dde88e79 100644
--- a/fs/ntfs3/Kconfig
+++ b/fs/ntfs3/Kconfig
@@ -31,7 +31,7 @@ config NTFS3_LZX_XPRESS
 
 	  It is recommended to say Y here.
 
-config NTFS3_POSIX_ACL
+config NTFS3_FS_POSIX_ACL
 	bool "NTFS POSIX Access Control Lists"
 	depends on NTFS3_FS
 	select FS_POSIX_ACL
diff --git a/fs/ntfs3/dir.c b/fs/ntfs3/dir.c
index eaf3cea33..f918c4b4c 100644
--- a/fs/ntfs3/dir.c
+++ b/fs/ntfs3/dir.c
@@ -233,7 +233,7 @@ struct inode *dir_search_u(struct inode *dir, const struct cpu_str *uni,
 	struct ntfs_fnd *fnd_a = NULL;
 
 	if (!fnd) {
-		fnd_a = fnd_get(&ni->dir);
+		fnd_a = fnd_get();
 		if (!fnd_a) {
 			err = -ENOMEM;
 			goto out;
diff --git a/fs/ntfs3/fsntfs.c b/fs/ntfs3/fsntfs.c
index a552add30..eae477bd5 100644
--- a/fs/ntfs3/fsntfs.c
+++ b/fs/ntfs3/fsntfs.c
@@ -1916,7 +1916,7 @@ int ntfs_security_init(struct ntfs_sb_info *sbi)
 	if (err)
 		goto out;
 
-	fnd_sii = fnd_get(indx_sii);
+	fnd_sii = fnd_get();
 	if (!fnd_sii) {
 		err = -ENOMEM;
 		goto out;
@@ -1985,7 +1985,7 @@ int ntfs_get_security_by_id(struct ntfs_sb_info *sbi, __le32 security_id,
 
 	mutex_lock_nested(&ni->ni_lock, NTFS_INODE_MUTEX_SECURITY);
 
-	fnd_sii = fnd_get(indx);
+	fnd_sii = fnd_get();
 	if (!fnd_sii) {
 		err = -ENOMEM;
 		goto out;
@@ -2108,7 +2108,7 @@ int ntfs_insert_security(struct ntfs_sb_info *sbi,
 
 	mutex_lock_nested(&ni->ni_lock, NTFS_INODE_MUTEX_SECURITY);
 
-	fnd_sdh = fnd_get(indx_sdh);
+	fnd_sdh = fnd_get();
 	if (!fnd_sdh) {
 		err = -ENOMEM;
 		goto out;
@@ -2424,7 +2424,7 @@ int ntfs_remove_reparse(struct ntfs_sb_info *sbi, __le32 rtag,
 		goto out1;
 	}
 
-	fnd = fnd_get(indx);
+	fnd = fnd_get();
 	if (!fnd) {
 		err = -ENOMEM;
 		goto out1;
diff --git a/fs/ntfs3/index.c b/fs/ntfs3/index.c
index 772692282..df2969248 100644
--- a/fs/ntfs3/index.c
+++ b/fs/ntfs3/index.c
@@ -645,24 +645,6 @@ static bool fnd_is_empty(struct ntfs_fnd *fnd)
 	return !fnd->de[fnd->level - 1];
 }
 
-struct ntfs_fnd *fnd_get(struct ntfs_index *indx)
-{
-	struct ntfs_fnd *fnd = ntfs_zalloc(sizeof(struct ntfs_fnd));
-
-	if (!fnd)
-		return NULL;
-
-	return fnd;
-}
-
-void fnd_put(struct ntfs_fnd *fnd)
-{
-	if (!fnd)
-		return;
-	fnd_clear(fnd);
-	ntfs_free(fnd);
-}
-
 /*
  * hdr_find_e
  *
@@ -923,8 +905,9 @@ int indx_init(struct ntfs_index *indx, struct ntfs_sb_info *sbi,
 		indx->vbn2vbo_bits = sbi->cluster_bits;
 	}
 
-	indx->cmp = get_cmp_func(root);
+	init_rwsem(&indx->run_lock);
 
+	indx->cmp = get_cmp_func(root);
 	return indx->cmp ? 0 : -EINVAL;
 }
 
@@ -1415,6 +1398,7 @@ static int indx_create_allocate(struct ntfs_index *indx, struct ntfs_inode *ni,
 	struct ATTRIB *bitmap;
 	struct ATTRIB *alloc;
 	u32 alloc_size = ntfs_up_cluster(sbi, 1u << indx->index_bits);
+	u32 bmp_size = QuadAlign(((alloc_size >> indx->index_bits) + 7) >> 3);
 	CLST len = alloc_size >> sbi->cluster_bits;
 	const struct INDEX_NAMES *in = &s_index_names[indx->type];
 	CLST alen;
@@ -1432,7 +1416,7 @@ static int indx_create_allocate(struct ntfs_index *indx, struct ntfs_inode *ni,
 	if (err)
 		goto out1;
 
-	err = ni_insert_resident(ni, QuadAlign(1), ATTR_BITMAP, in->name,
+	err = ni_insert_resident(ni, bmp_size, ATTR_BITMAP, in->name,
 				 in->name_len, &bitmap, NULL);
 	if (err)
 		goto out2;
@@ -1467,7 +1451,7 @@ static int indx_add_allocate(struct ntfs_index *indx, struct ntfs_inode *ni,
 	int err;
 	size_t bit;
 	u64 data_size, alloc_size;
-	u64 bpb, vbpb;
+	u64 bmp_size, bmp_size_v;
 	struct ATTRIB *bmp, *alloc;
 	struct mft_inode *mi;
 	const struct INDEX_NAMES *in = &s_index_names[indx->type];
@@ -1480,20 +1464,27 @@ static int indx_add_allocate(struct ntfs_index *indx, struct ntfs_inode *ni,
 		bmp = NULL;
 	} else {
 		if (bmp->non_res) {
-			bpb = le64_to_cpu(bmp->nres.data_size);
-			vbpb = le64_to_cpu(bmp->nres.valid_size);
+			bmp_size = le64_to_cpu(bmp->nres.data_size);
+			bmp_size_v = le64_to_cpu(bmp->nres.valid_size);
 		} else {
-			bpb = vbpb = le32_to_cpu(bmp->res.data_size);
+			bmp_size = bmp_size_v = le32_to_cpu(bmp->res.data_size);
 		}
 
+		bit = bmp_size << 3;
+	}
+
+	data_size = (u64)(bit + 1) << indx->index_bits;
+	alloc_size = ntfs_up_cluster(ni->mi.sbi, data_size);
+
+	if (bmp) {
+		u64 bits = ((alloc_size >> indx->index_bits) + 7) >> 3;
+
 		/* Increase bitmap */
 		err = attr_set_size(ni, ATTR_BITMAP, in->name, in->name_len,
-				    &indx->bitmap_run, QuadAlign(bpb + 8), NULL,
+				    &indx->bitmap_run, QuadAlign(bits), NULL,
 				    true, NULL);
 		if (err)
 			goto out1;
-
-		bit = bpb << 3;
 	}
 
 	alloc = ni_find_attr(ni, NULL, NULL, ATTR_ALLOC, in->name, in->name_len,
@@ -1504,9 +1495,6 @@ static int indx_add_allocate(struct ntfs_index *indx, struct ntfs_inode *ni,
 		goto out1;
 	}
 
-	data_size = (u64)(bit + 1) << indx->index_bits;
-	alloc_size = ntfs_up_cluster(ni->mi.sbi, data_size);
-
 	if (alloc_size > le64_to_cpu(alloc->nres.alloc_size)) {
 		/* Increase allocation */
 		err = attr_set_size(ni, ATTR_ALLOC, in->name, in->name_len,
@@ -1533,7 +1521,7 @@ static int indx_add_allocate(struct ntfs_index *indx, struct ntfs_inode *ni,
 out2:
 	/* Ops (no space?) */
 	attr_set_size(ni, ATTR_BITMAP, in->name, in->name_len,
-		      &indx->bitmap_run, bpb, &vbpb, false, NULL);
+		      &indx->bitmap_run, bmp_size, &bmp_size_v, false, NULL);
 
 out1:
 	return err;
@@ -1916,7 +1904,7 @@ int indx_insert_entry(struct ntfs_index *indx, struct ntfs_inode *ni,
 	struct INDEX_ROOT *root;
 
 	if (!fnd) {
-		fnd_a = fnd_get(indx);
+		fnd_a = fnd_get();
 		if (!fnd_a) {
 			err = -ENOMEM;
 			goto out1;
@@ -2244,13 +2232,13 @@ int indx_delete_entry(struct ntfs_index *indx, struct ntfs_inode *ni,
 	size_t trim_bit;
 	const struct INDEX_NAMES *in;
 
-	fnd = fnd_get(indx);
+	fnd = fnd_get();
 	if (!fnd) {
 		err = -ENOMEM;
 		goto out2;
 	}
 
-	fnd2 = fnd_get(NULL);
+	fnd2 = fnd_get();
 	if (!fnd2) {
 		err = -ENOMEM;
 		goto out1;
@@ -2619,7 +2607,7 @@ int indx_update_dup(struct ntfs_inode *ni, struct ntfs_sb_info *sbi,
 	struct mft_inode *mi;
 	struct ntfs_index *indx = &ni->dir;
 
-	fnd = fnd_get(indx);
+	fnd = fnd_get();
 	if (!fnd) {
 		err = -ENOMEM;
 		goto out1;
diff --git a/fs/ntfs3/inode.c b/fs/ntfs3/inode.c
index cbc674dc5..4b97065be 100644
--- a/fs/ntfs3/inode.c
+++ b/fs/ntfs3/inode.c
@@ -408,7 +408,6 @@ static struct inode *ntfs_read_mft(struct inode *inode,
 		inode->i_op = &ntfs_dir_inode_operations;
 		inode->i_fop = &ntfs_dir_operations;
 		ni->i_valid = 0;
-		init_rwsem(&ni->dir.run_lock);
 	} else if (S_ISLNK(mode)) {
 		ni->std_fa &= ~FILE_ATTRIBUTE_DIRECTORY;
 		inode->i_op = &ntfs_link_inode_operations;
@@ -1562,7 +1561,6 @@ int ntfs_create_inode(struct inode *dir, struct dentry *dentry,
 			mode |= S_ISGID;
 		inode->i_op = &ntfs_dir_inode_operations;
 		inode->i_fop = &ntfs_dir_operations;
-		init_rwsem(&ni->dir.run_lock);
 	} else if (is_link) {
 		inode->i_op = &ntfs_link_inode_operations;
 		inode->i_fop = NULL;
diff --git a/fs/ntfs3/namei.c b/fs/ntfs3/namei.c
index 783a2a659..700d4fc4f 100644
--- a/fs/ntfs3/namei.c
+++ b/fs/ntfs3/namei.c
@@ -507,7 +507,7 @@ static int ntfs_atomic_open(struct inode *dir, struct dentry *dentry,
 	ni_lock_dir(ni);
 
 	if (d_in_lookup(dentry)) {
-		fnd = fnd_get(&ntfs_i(dir)->dir);
+		fnd = fnd_get();
 		if (!fnd) {
 			err = -ENOMEM;
 			goto out1;
diff --git a/fs/ntfs3/ntfs_fs.h b/fs/ntfs3/ntfs_fs.h
index 166a4937a..09e183f95 100644
--- a/fs/ntfs3/ntfs_fs.h
+++ b/fs/ntfs3/ntfs_fs.h
@@ -591,8 +591,17 @@ int run_deallocate(struct ntfs_sb_info *sbi, struct runs_tree *run, bool trim);
 /* globals from index.c */
 int indx_used_bit(struct ntfs_index *indx, struct ntfs_inode *ni, size_t *bit);
 void fnd_clear(struct ntfs_fnd *fnd);
-struct ntfs_fnd *fnd_get(struct ntfs_index *indx);
-void fnd_put(struct ntfs_fnd *fnd);
+static inline struct ntfs_fnd *fnd_get(void)
+{
+	return ntfs_zalloc(sizeof(struct ntfs_fnd));
+}
+static inline void fnd_put(struct ntfs_fnd *fnd)
+{
+	if (fnd) {
+		fnd_clear(fnd);
+		ntfs_free(fnd);
+	}
+}
 void indx_clear(struct ntfs_index *idx);
 int indx_init(struct ntfs_index *indx, struct ntfs_sb_info *sbi,
 	      const struct ATTRIB *attr, enum index_mutex_classed type);
diff --git a/fs/ntfs3/upcase.c b/fs/ntfs3/upcase.c
index 270458fc7..57a03731b 100644
--- a/fs/ntfs3/upcase.c
+++ b/fs/ntfs3/upcase.c
@@ -30,7 +30,7 @@ int ntfs_cmp_names(const __le16 *s1, size_t l1, const __le16 *s2, size_t l2,
 {
 	int diff1 = 0;
 	int diff2;
-	size_t len = l1 < l2 ? l1 : l2;
+	size_t len = min(l1, l2);
 
 	if (!bothcase && upcase)
 		goto case_insentive;
@@ -67,7 +67,7 @@ int ntfs_cmp_names_cpu(const struct cpu_str *uni1, const struct le_str *uni2,
 	const __le16 *s2 = uni2->name;
 	size_t l1 = uni1->len;
 	size_t l2 = uni2->len;
-	size_t len = l1 < l2 ? l1 : l2;
+	size_t len = min(l1, l2);
 	int diff1 = 0;
 	int diff2;
 
-- 
2.30.1.457.gf011795891

