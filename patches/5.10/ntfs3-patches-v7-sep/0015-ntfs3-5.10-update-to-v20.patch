From 273ef40052bc70584b37e16b67a96173f2ecbf70 Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Sat, 6 Feb 2021 17:33:06 +0100
Subject: [PATCH 15/16] ntfs3-5.10: update to v20

(modulo userns changes from linux-next)

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 fs/ntfs3/attrib.c   |   2 +-
 fs/ntfs3/attrlist.c |   2 +-
 fs/ntfs3/bitfunc.c  |   2 +-
 fs/ntfs3/bitmap.c   |  29 ++++--------
 fs/ntfs3/debug.h    |   4 +-
 fs/ntfs3/dir.c      |   2 +-
 fs/ntfs3/file.c     |   2 +-
 fs/ntfs3/frecord.c  |   2 +-
 fs/ntfs3/fslog.c    |   6 +--
 fs/ntfs3/fsntfs.c   |   2 +-
 fs/ntfs3/index.c    | 113 +++++++++++++++++---------------------------
 fs/ntfs3/inode.c    |   9 +++-
 fs/ntfs3/lznt.c     |   2 +-
 fs/ntfs3/namei.c    |   2 +-
 fs/ntfs3/ntfs.h     |   4 +-
 fs/ntfs3/ntfs_fs.h  |  27 ++++++-----
 fs/ntfs3/record.c   |   2 +-
 fs/ntfs3/run.c      |  54 ++++++++++-----------
 fs/ntfs3/super.c    |  64 ++++++++++++-------------
 fs/ntfs3/upcase.c   |   2 +-
 fs/ntfs3/xattr.c    |   2 +-
 21 files changed, 154 insertions(+), 180 deletions(-)

diff --git a/fs/ntfs3/attrib.c b/fs/ntfs3/attrib.c
index 79360d944..a938ec23e 100644
--- a/fs/ntfs3/attrib.c
+++ b/fs/ntfs3/attrib.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  * TODO: merge attr_set_size/attr_data_get_block/attr_allocate_frame?
  */
diff --git a/fs/ntfs3/attrlist.c b/fs/ntfs3/attrlist.c
index 4a97e259d..04a30b58c 100644
--- a/fs/ntfs3/attrlist.c
+++ b/fs/ntfs3/attrlist.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 
diff --git a/fs/ntfs3/bitfunc.c b/fs/ntfs3/bitfunc.c
index 2d43d718d..2de5faef2 100644
--- a/fs/ntfs3/bitfunc.c
+++ b/fs/ntfs3/bitfunc.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 #include <linux/blkdev.h>
diff --git a/fs/ntfs3/bitmap.c b/fs/ntfs3/bitmap.c
index 1a4d65a6a..b1f6d6b17 100644
--- a/fs/ntfs3/bitmap.c
+++ b/fs/ntfs3/bitmap.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 
@@ -108,8 +108,7 @@ void wnd_close(struct wnd_bitmap *wnd)
 {
 	struct rb_node *node, *next;
 
-	if (wnd->free_bits != wnd->free_holder)
-		ntfs_free(wnd->free_bits);
+	ntfs_free(wnd->free_bits);
 	run_close(&wnd->run);
 
 	node = rb_first(&wnd->start_tree);
@@ -660,13 +659,9 @@ int wnd_init(struct wnd_bitmap *wnd, struct super_block *sb, size_t nbits)
 	if (!wnd->bits_last)
 		wnd->bits_last = wbits;
 
-	if (wnd->nwnd <= ARRAY_SIZE(wnd->free_holder)) {
-		wnd->free_bits = wnd->free_holder;
-	} else {
-		wnd->free_bits = ntfs_zalloc(wnd->nwnd * sizeof(u16));
-		if (!wnd->free_bits)
-			return -ENOMEM;
-	}
+	wnd->free_bits = ntfs_zalloc(wnd->nwnd * sizeof(u16));
+	if (!wnd->free_bits)
+		return -ENOMEM;
 
 	err = wnd_rescan(wnd);
 	if (err)
@@ -1335,22 +1330,16 @@ int wnd_extend(struct wnd_bitmap *wnd, size_t new_bits)
 		new_last = wbits;
 
 	if (new_wnd != wnd->nwnd) {
-		if (new_wnd <= ARRAY_SIZE(wnd->free_holder)) {
-			new_free = wnd->free_holder;
-		} else {
-			new_free = ntfs_malloc(new_wnd * sizeof(u16));
-			if (!new_free)
-				return -ENOMEM;
-		}
+		new_free = ntfs_malloc(new_wnd * sizeof(u16));
+		if (!new_free)
+			return -ENOMEM;
 
 		if (new_free != wnd->free_bits)
 			memcpy(new_free, wnd->free_bits,
 			       wnd->nwnd * sizeof(short));
 		memset(new_free + wnd->nwnd, 0,
 		       (new_wnd - wnd->nwnd) * sizeof(short));
-		if (wnd->free_bits != wnd->free_holder)
-			ntfs_free(wnd->free_bits);
-
+		ntfs_free(wnd->free_bits);
 		wnd->free_bits = new_free;
 	}
 
diff --git a/fs/ntfs3/debug.h b/fs/ntfs3/debug.h
index 418934210..dfaa4c79d 100644
--- a/fs/ntfs3/debug.h
+++ b/fs/ntfs3/debug.h
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  * useful functions for debuging
  */
@@ -57,6 +57,8 @@ void ntfs_inode_printk(struct inode *inode, const char *fmt, ...)
 
 #define ntfs_malloc(s)		kmalloc(s, GFP_NOFS)
 #define ntfs_zalloc(s)		kzalloc(s, GFP_NOFS)
+#define ntfs_vmalloc(s)		kvmalloc(s, GFP_KERNEL)
 #define ntfs_free(p)		kfree(p)
+#define ntfs_vfree(p)		kvfree(p)
 #define ntfs_memdup(src, len)	kmemdup(src, len, GFP_NOFS)
 // clang-format on
diff --git a/fs/ntfs3/dir.c b/fs/ntfs3/dir.c
index f918c4b4c..2b5114c5e 100644
--- a/fs/ntfs3/dir.c
+++ b/fs/ntfs3/dir.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  *  directory handling functions for ntfs-based filesystems
  *
diff --git a/fs/ntfs3/file.c b/fs/ntfs3/file.c
index bac5a10ac..04caa200a 100644
--- a/fs/ntfs3/file.c
+++ b/fs/ntfs3/file.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  *  regular file handling primitives for ntfs-based filesystems
  */
diff --git a/fs/ntfs3/frecord.c b/fs/ntfs3/frecord.c
index 3e436dd75..b89423fe8 100644
--- a/fs/ntfs3/frecord.c
+++ b/fs/ntfs3/frecord.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 
diff --git a/fs/ntfs3/fslog.c b/fs/ntfs3/fslog.c
index 1aeaa2544..140847de2 100644
--- a/fs/ntfs3/fslog.c
+++ b/fs/ntfs3/fslog.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 
@@ -1626,8 +1626,8 @@ static int last_log_lsn(struct ntfs_log *log)
 	struct RECORD_PAGE_HDR *first_tail = NULL;
 	struct RECORD_PAGE_HDR *second_tail = NULL;
 	struct RECORD_PAGE_HDR *tail_page = NULL;
-	struct RECORD_PAGE_HDR *second_tail_prev = NULL,
-			       *first_tail_prev = NULL;
+	struct RECORD_PAGE_HDR *second_tail_prev = NULL;
+	struct RECORD_PAGE_HDR *first_tail_prev = NULL;
 	struct RECORD_PAGE_HDR *page_bufs = NULL;
 	struct RECORD_PAGE_HDR *best_page;
 
diff --git a/fs/ntfs3/fsntfs.c b/fs/ntfs3/fsntfs.c
index eae477bd5..ecf3aaad7 100644
--- a/fs/ntfs3/fsntfs.c
+++ b/fs/ntfs3/fsntfs.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 
diff --git a/fs/ntfs3/index.c b/fs/ntfs3/index.c
index df2969248..6dbecf052 100644
--- a/fs/ntfs3/index.c
+++ b/fs/ntfs3/index.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 
@@ -1397,8 +1397,8 @@ static int indx_create_allocate(struct ntfs_index *indx, struct ntfs_inode *ni,
 	struct ntfs_sb_info *sbi = ni->mi.sbi;
 	struct ATTRIB *bitmap;
 	struct ATTRIB *alloc;
-	u32 alloc_size = ntfs_up_cluster(sbi, 1u << indx->index_bits);
-	u32 bmp_size = QuadAlign(((alloc_size >> indx->index_bits) + 7) >> 3);
+	u32 data_size = 1u << indx->index_bits;
+	u32 alloc_size = ntfs_up_cluster(sbi, data_size);
 	CLST len = alloc_size >> sbi->cluster_bits;
 	const struct INDEX_NAMES *in = &s_index_names[indx->type];
 	CLST alen;
@@ -1416,18 +1416,22 @@ static int indx_create_allocate(struct ntfs_index *indx, struct ntfs_inode *ni,
 	if (err)
 		goto out1;
 
-	err = ni_insert_resident(ni, bmp_size, ATTR_BITMAP, in->name,
+	alloc->nres.valid_size = alloc->nres.data_size = cpu_to_le64(data_size);
+
+	err = ni_insert_resident(ni, bitmap_size(1), ATTR_BITMAP, in->name,
 				 in->name_len, &bitmap, NULL);
 	if (err)
 		goto out2;
 
+	if (in->name == I30_NAME) {
+		ni->vfs_inode.i_size = data_size;
+		inode_set_bytes(&ni->vfs_inode, alloc_size);
+	}
+
 	memcpy(&indx->alloc_run, &run, sizeof(run));
 
 	*vbn = 0;
 
-	if (in->name == I30_NAME)
-		ni->vfs_inode.i_size = alloc_size;
-
 	return 0;
 
 out2:
@@ -1477,12 +1481,10 @@ static int indx_add_allocate(struct ntfs_index *indx, struct ntfs_inode *ni,
 	alloc_size = ntfs_up_cluster(ni->mi.sbi, data_size);
 
 	if (bmp) {
-		u64 bits = ((alloc_size >> indx->index_bits) + 7) >> 3;
-
 		/* Increase bitmap */
 		err = attr_set_size(ni, ATTR_BITMAP, in->name, in->name_len,
-				    &indx->bitmap_run, QuadAlign(bits), NULL,
-				    true, NULL);
+				    &indx->bitmap_run, bitmap_size(bit + 1),
+				    NULL, true, NULL);
 		if (err)
 			goto out1;
 	}
@@ -1495,23 +1497,14 @@ static int indx_add_allocate(struct ntfs_index *indx, struct ntfs_inode *ni,
 		goto out1;
 	}
 
-	if (alloc_size > le64_to_cpu(alloc->nres.alloc_size)) {
-		/* Increase allocation */
-		err = attr_set_size(ni, ATTR_ALLOC, in->name, in->name_len,
-				    &indx->alloc_run, alloc_size, &alloc_size,
-				    true, NULL);
-		if (err) {
-			if (bmp)
-				goto out2;
-			goto out1;
-		}
-
-		if (in->name == I30_NAME)
-			ni->vfs_inode.i_size = alloc_size;
-	} else if (data_size > le64_to_cpu(alloc->nres.data_size)) {
-		alloc->nres.data_size = alloc->nres.valid_size =
-			cpu_to_le64(data_size);
-		mi->dirty = true;
+	/* Increase allocation */
+	err = attr_set_size(ni, ATTR_ALLOC, in->name, in->name_len,
+			    &indx->alloc_run, data_size, &data_size, true,
+			    NULL);
+	if (err) {
+		if (bmp)
+			goto out2;
+		goto out1;
 	}
 
 	*vbn = bit << indx->idx2vbn_bits;
@@ -1548,7 +1541,7 @@ static int indx_insert_into_root(struct ntfs_index *indx, struct ntfs_inode *ni,
 	CLST new_vbn;
 	__le64 *sub_vbn, t_vbn;
 	u16 new_de_size;
-	u32 hdr_used, hdr_total, asize, tail, used, aoff, to_move;
+	u32 hdr_used, hdr_total, asize, used, aoff, to_move;
 	u32 root_size, new_root_size;
 	struct ntfs_sb_info *sbi;
 	char *next;
@@ -1574,23 +1567,18 @@ static int indx_insert_into_root(struct ntfs_index *indx, struct ntfs_inode *ni,
 	hdr_total = le32_to_cpu(hdr->total);
 	asize = le32_to_cpu(attr->size);
 	next = Add2Ptr(attr, asize);
-	tail = used - aoff - asize;
 	root_size = le32_to_cpu(attr->res.data_size);
 
 	ds_root = new_de_size + hdr_used - hdr_total;
 
 	if (used + ds_root < sbi->max_bytes_per_attr) {
 		/* make a room for new elements */
-		memmove(next + ds_root, next, used - aoff - asize);
+		mi_resize_attr(mi, attr, ds_root);
 		hdr->total = cpu_to_le32(hdr_total + ds_root);
 		e = hdr_insert_de(indx, hdr, new_de, root_de, ctx);
 		WARN_ON(!e);
 		fnd_clear(fnd);
 		fnd->root_de = e;
-		attr->size = cpu_to_le32(asize + ds_root);
-		attr->res.data_size = cpu_to_le32(root_size + ds_root);
-		rec->used = cpu_to_le32(used + ds_root);
-		mi->dirty = true;
 
 		return 0;
 	}
@@ -1645,15 +1633,8 @@ static int indx_insert_into_root(struct ntfs_index *indx, struct ntfs_inode *ni,
 		goto out;
 	}
 
-	if (ds_root) {
-		memmove(next + ds_root, next, tail);
-		used += ds_root;
-		asize += ds_root;
-		rec->used = cpu_to_le32(used);
-		attr->size = cpu_to_le32(asize);
-		attr->res.data_size = cpu_to_le32(new_root_size);
-		mi->dirty = true;
-	}
+	if (ds_root)
+		mi_resize_attr(mi, attr, ds_root);
 
 	/* Fill first entry (vcn will be set later) */
 	e = (struct NTFS_DE *)(root + 1);
@@ -1669,29 +1650,30 @@ static int indx_insert_into_root(struct ntfs_index *indx, struct ntfs_inode *ni,
 	mi->dirty = true;
 
 	/* Create alloc and bitmap attributes (if not) */
-	if (run_is_empty(&indx->alloc_run)) {
-		err = indx_create_allocate(indx, ni, &new_vbn);
-		if (err) {
-			/* restore root after 'indx_create_allocate' */
-			memmove(next - ds_root, next, tail);
-			used -= ds_root;
-			rec->used = cpu_to_le32(used);
-			memcpy(attr, a_root, asize);
-			goto out1;
-		}
-	} else {
-		err = indx_add_allocate(indx, ni, &new_vbn);
-		if (err)
-			goto out1;
-	}
+	err = run_is_empty(&indx->alloc_run) ?
+		      indx_create_allocate(indx, ni, &new_vbn) :
+		      indx_add_allocate(indx, ni, &new_vbn);
 
 	/* layout of record may be changed, so rescan root */
 	root = indx_get_root(indx, ni, &attr, &mi);
 	if (!root) {
+		/* bug? */
+		ntfs_set_state(sbi, NTFS_DIRTY_ERROR);
 		err = -EINVAL;
 		goto out1;
 	}
 
+	if (err) {
+		/* restore root */
+		if (mi_resize_attr(mi, attr, -ds_root))
+			memcpy(attr, a_root, asize);
+		else {
+			/* bug? */
+			ntfs_set_state(sbi, NTFS_DIRTY_ERROR);
+		}
+		goto out1;
+	}
+
 	e = (struct NTFS_DE *)(root + 1);
 	*(__le64 *)(e + 1) = cpu_to_le64(new_vbn);
 	mi->dirty = true;
@@ -2010,7 +1992,7 @@ static int indx_shrink(struct ntfs_index *indx, struct ntfs_inode *ni,
 		       size_t bit)
 {
 	int err = 0;
-	u64 bpb, new_alloc;
+	u64 bpb, new_data;
 	size_t nbits;
 	struct ATTRIB *b;
 	struct ATTR_LIST_ENTRY *le = NULL;
@@ -2050,17 +2032,13 @@ static int indx_shrink(struct ntfs_index *indx, struct ntfs_inode *ni,
 			return 0;
 	}
 
-	new_alloc = (u64)bit << indx->index_bits;
+	new_data = (u64)bit << indx->index_bits;
 
 	err = attr_set_size(ni, ATTR_ALLOC, in->name, in->name_len,
-			    &indx->alloc_run, new_alloc, &new_alloc, false,
-			    NULL);
+			    &indx->alloc_run, new_data, &new_data, false, NULL);
 	if (err)
 		return err;
 
-	if (in->name == I30_NAME)
-		ni->vfs_inode.i_size = new_alloc;
-
 	bpb = bitmap_size(bit);
 	if (bpb * 8 == nbits)
 		return 0;
@@ -2582,9 +2560,6 @@ int indx_delete_entry(struct ntfs_index *indx, struct ntfs_inode *ni,
 		hdr->used = hdr->total = cpu_to_le32(
 			new_root_size - offsetof(struct INDEX_ROOT, ihdr));
 		mi->dirty = true;
-
-		if (in->name == I30_NAME)
-			ni->vfs_inode.i_size = 0;
 	}
 
 out:
diff --git a/fs/ntfs3/inode.c b/fs/ntfs3/inode.c
index 4b97065be..9b07738d4 100644
--- a/fs/ntfs3/inode.c
+++ b/fs/ntfs3/inode.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 
@@ -1218,6 +1218,13 @@ int ntfs_create_inode(struct inode *dir, struct dentry *dentry,
 		/* use parent's directory attributes */
 		fa = dir_ni->std_fa | FILE_ATTRIBUTE_DIRECTORY |
 		     FILE_ATTRIBUTE_ARCHIVE;
+		/*
+		 * By default child directory inherits parent attributes
+		 * root directory is hidden + system
+		 * Make an exception for children in root
+		 */
+		if (dir->i_ino == MFT_REC_ROOT)
+			fa &= ~(FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_SYSTEM);
 	} else if (is_link) {
 		/* It is good idea that link should be the same type (file/dir) as target */
 		fa = FILE_ATTRIBUTE_REPARSE_POINT;
diff --git a/fs/ntfs3/lznt.c b/fs/ntfs3/lznt.c
index 73dc108c3..34822f02d 100644
--- a/fs/ntfs3/lznt.c
+++ b/fs/ntfs3/lznt.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 #include <linux/blkdev.h>
diff --git a/fs/ntfs3/namei.c b/fs/ntfs3/namei.c
index 700d4fc4f..e53cfc0f1 100644
--- a/fs/ntfs3/namei.c
+++ b/fs/ntfs3/namei.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 
diff --git a/fs/ntfs3/ntfs.h b/fs/ntfs3/ntfs.h
index 19aac05ff..c26401808 100644
--- a/fs/ntfs3/ntfs.h
+++ b/fs/ntfs3/ntfs.h
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  * on-disk ntfs structs
  */
@@ -792,7 +792,7 @@ struct INDEX_ROOT {
 	enum ATTR_TYPE type;	// 0x00: The type of attribute to index on
 	enum COLLATION_RULE rule; // 0x04: The rule
 	__le32 index_block_size;// 0x08: The size of index record
-	u8 index_block_clst;	// 0x0C: The number of clusters per index
+	u8 index_block_clst;	// 0x0C: The number of clusters or sectors per index
 	u8 res[3];
 	struct INDEX_HDR ihdr;	// 0x10:
 };
diff --git a/fs/ntfs3/ntfs_fs.h b/fs/ntfs3/ntfs_fs.h
index 09e183f95..c6a42de17 100644
--- a/fs/ntfs3/ntfs_fs.h
+++ b/fs/ntfs3/ntfs_fs.h
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 
@@ -68,7 +68,7 @@ struct ntfs_mount_options {
 
 /* TODO: use rb tree instead of array */
 struct runs_tree {
-	struct ntfs_run *runs_;
+	struct ntfs_run *runs;
 	size_t count; // Currently used size a ntfs_run storage.
 	size_t allocated; // Currently allocated ntfs_run storage size.
 };
@@ -99,8 +99,6 @@ struct wnd_bitmap {
 	struct runs_tree run;
 	size_t nbits;
 
-	u16 free_holder[8]; // holder for free_bits
-
 	size_t total_zeroes; // total number of free bits
 	u16 *free_bits; // free bits in each window
 	size_t nwnd;
@@ -140,7 +138,7 @@ enum index_mutex_classed {
 	INDEX_MUTEX_TOTAL
 };
 
-/* This struct works with indexes */
+/* ntfs_index - allocation unit inside directory */
 struct ntfs_index {
 	struct runs_tree bitmap_run;
 	struct runs_tree alloc_run;
@@ -213,10 +211,15 @@ struct ntfs_sb_info {
 		u64 lbo, lbo2;
 		struct ntfs_inode *ni;
 		struct wnd_bitmap bitmap; // $MFT::Bitmap
-		ulong reserved_bitmap;
+		/*
+		 * MFT records [11-24) used to expand MFT itself
+		 * They always marked as used in $MFT::Bitmap
+		 * 'reserved_bitmap' contains real bitmap of these records
+		 */
+		ulong reserved_bitmap; // bitmap of used records [11 - 24)
 		size_t next_free; // The next record to allocate from
-		size_t used;
-		u32 recs_mirr; // Number of records MFTMirr
+		size_t used; // mft valid size in records
+		u32 recs_mirr; // Number of records in MFTMirr
 		u8 next_reserved;
 		u8 reserved_bitmap_inited;
 	} mft;
@@ -231,7 +234,7 @@ struct ntfs_sb_info {
 		u64 blocks; // in blocks
 		u64 ser_num;
 		struct ntfs_inode *ni;
-		__le16 flags; // see VOLUME_FLAG_XXX
+		__le16 flags; // cached current VOLUME_INFO::flags, VOLUME_FLAG_DIRTY
 		u8 major_ver;
 		u8 minor_ver;
 		char label[65];
@@ -837,7 +840,7 @@ static inline size_t wnd_zone_len(const struct wnd_bitmap *wnd)
 
 static inline void run_init(struct runs_tree *run)
 {
-	run->runs_ = NULL;
+	run->runs = NULL;
 	run->count = 0;
 	run->allocated = 0;
 }
@@ -849,14 +852,14 @@ static inline struct runs_tree *run_alloc(void)
 
 static inline void run_close(struct runs_tree *run)
 {
-	ntfs_free(run->runs_);
+	ntfs_vfree(run->runs);
 	memset(run, 0, sizeof(*run));
 }
 
 static inline void run_free(struct runs_tree *run)
 {
 	if (run) {
-		ntfs_free(run->runs_);
+		ntfs_vfree(run->runs);
 		ntfs_free(run);
 	}
 }
diff --git a/fs/ntfs3/record.c b/fs/ntfs3/record.c
index 7727e5081..0d4a6251b 100644
--- a/fs/ntfs3/record.c
+++ b/fs/ntfs3/record.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 
diff --git a/fs/ntfs3/run.c b/fs/ntfs3/run.c
index 27efd0ad5..e4e38242f 100644
--- a/fs/ntfs3/run.c
+++ b/fs/ntfs3/run.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 
@@ -46,7 +46,7 @@ bool run_lookup(const struct runs_tree *run, CLST vcn, size_t *index)
 	max_idx = run->count - 1;
 
 	/* Check boundary cases specially, 'cause they cover the often requests */
-	r = run->runs_;
+	r = run->runs;
 	if (vcn < r->vcn) {
 		*index = 0;
 		return false;
@@ -70,7 +70,7 @@ bool run_lookup(const struct runs_tree *run, CLST vcn, size_t *index)
 
 	do {
 		mid_idx = min_idx + ((max_idx - min_idx) >> 1);
-		r = run->runs_ + mid_idx;
+		r = run->runs + mid_idx;
 
 		if (vcn < r->vcn) {
 			max_idx = mid_idx - 1;
@@ -96,7 +96,7 @@ bool run_lookup(const struct runs_tree *run, CLST vcn, size_t *index)
 static void run_consolidate(struct runs_tree *run, size_t index)
 {
 	size_t i;
-	struct ntfs_run *r = run->runs_ + index;
+	struct ntfs_run *r = run->runs + index;
 
 	while (index + 1 < run->count) {
 		/*
@@ -172,8 +172,8 @@ bool run_is_mapped_full(const struct runs_tree *run, CLST svcn, CLST evcn)
 	if (!run_lookup(run, svcn, &i))
 		return false;
 
-	end = run->runs_ + run->count;
-	r = run->runs_ + i;
+	end = run->runs + run->count;
+	r = run->runs + i;
 
 	for (;;) {
 		next_vcn = r->vcn + r->len;
@@ -196,13 +196,13 @@ bool run_lookup_entry(const struct runs_tree *run, CLST vcn, CLST *lcn,
 	struct ntfs_run *r;
 
 	/* Fail immediately if nrun was not touched yet. */
-	if (!run->runs_)
+	if (!run->runs)
 		return false;
 
 	if (!run_lookup(run, vcn, &idx))
 		return false;
 
-	r = run->runs_ + idx;
+	r = run->runs + idx;
 
 	if (vcn >= r->vcn + r->len)
 		return false;
@@ -232,7 +232,7 @@ void run_truncate_head(struct runs_tree *run, CLST vcn)
 	struct ntfs_run *r;
 
 	if (run_lookup(run, vcn, &index)) {
-		r = run->runs_ + index;
+		r = run->runs + index;
 
 		if (vcn > r->vcn) {
 			CLST dlen = vcn - r->vcn;
@@ -246,14 +246,14 @@ void run_truncate_head(struct runs_tree *run, CLST vcn)
 		if (!index)
 			return;
 	}
-	r = run->runs_;
+	r = run->runs;
 	memmove(r, r + index, sizeof(*r) * (run->count - index));
 
 	run->count -= index;
 
 	if (!run->count) {
-		ntfs_free(run->runs_);
-		run->runs_ = NULL;
+		ntfs_vfree(run->runs);
+		run->runs = NULL;
 		run->allocated = 0;
 	}
 }
@@ -274,7 +274,7 @@ void run_truncate(struct runs_tree *run, CLST vcn)
 	 * then it will entirely be removed.
 	 */
 	if (run_lookup(run, vcn, &index)) {
-		struct ntfs_run *r = run->runs_ + index;
+		struct ntfs_run *r = run->runs + index;
 
 		r->len = vcn - r->vcn;
 
@@ -291,8 +291,8 @@ void run_truncate(struct runs_tree *run, CLST vcn)
 
 	/* Do not reallocate array 'runs'. Only free if possible */
 	if (!index) {
-		ntfs_free(run->runs_);
-		run->runs_ = NULL;
+		ntfs_vfree(run->runs);
+		run->runs = NULL;
 		run->allocated = 0;
 	}
 }
@@ -303,7 +303,7 @@ void run_truncate_around(struct runs_tree *run, CLST vcn)
 	run_truncate_head(run, vcn);
 
 	if (run->count >= NTFS3_RUN_MAX_BYTES / sizeof(struct ntfs_run) / 2)
-		run_truncate(run, (run->runs_ + (run->count >> 1))->vcn);
+		run_truncate(run, (run->runs + (run->count >> 1))->vcn);
 }
 
 /*
@@ -338,7 +338,7 @@ bool run_add_entry(struct runs_tree *run, CLST vcn, CLST lcn, CLST len,
 	 * existing range as my start point.
 	 */
 	if (!inrange && index > 0) {
-		struct ntfs_run *t = run->runs_ + index - 1;
+		struct ntfs_run *t = run->runs + index - 1;
 
 		if (t->vcn + t->len == vcn &&
 		    (t->lcn == SPARSE_LCN) == (lcn == SPARSE_LCN) &&
@@ -386,25 +386,25 @@ bool run_add_entry(struct runs_tree *run, CLST vcn, CLST lcn, CLST len,
 
 			WARN_ON(!is_mft && bytes > NTFS3_RUN_MAX_BYTES);
 
-			new_ptr = ntfs_malloc(bytes);
+			new_ptr = ntfs_vmalloc(bytes);
 
 			if (!new_ptr)
 				return false;
 
 			r = new_ptr + index;
-			memcpy(new_ptr, run->runs_,
+			memcpy(new_ptr, run->runs,
 			       index * sizeof(struct ntfs_run));
-			memcpy(r + 1, run->runs_ + index,
+			memcpy(r + 1, run->runs + index,
 			       sizeof(struct ntfs_run) * (run->count - index));
 
-			ntfs_free(run->runs_);
-			run->runs_ = new_ptr;
+			ntfs_vfree(run->runs);
+			run->runs = new_ptr;
 			run->allocated = bytes;
 
 		} else {
 			size_t i = run->count - index;
 
-			r = run->runs_ + index;
+			r = run->runs + index;
 
 			/* memmove appears to be a bottle neck here... */
 			if (i > 0)
@@ -416,7 +416,7 @@ bool run_add_entry(struct runs_tree *run, CLST vcn, CLST lcn, CLST len,
 		r->len = len;
 		run->count += 1;
 	} else {
-		r = run->runs_ + index;
+		r = run->runs + index;
 
 		/*
 		 * If one of ranges was not allocated
@@ -491,8 +491,8 @@ bool run_collapse_range(struct runs_tree *run, CLST vcn, CLST len)
 	if (WARN_ON(!run_lookup(run, vcn, &index)))
 		return true; /* should never be here */
 
-	e = run->runs_ + run->count;
-	r = run->runs_ + index;
+	e = run->runs + run->count;
+	r = run->runs + index;
 	end = vcn + len;
 
 	if (vcn > r->vcn) {
@@ -556,7 +556,7 @@ bool run_get_entry(const struct runs_tree *run, size_t index, CLST *vcn,
 	if (index >= run->count)
 		return false;
 
-	r = run->runs_ + index;
+	r = run->runs + index;
 
 	if (!r->len)
 		return false;
diff --git a/fs/ntfs3/super.c b/fs/ntfs3/super.c
index 9d9e597c3..f7bc59f72 100644
--- a/fs/ntfs3/super.c
+++ b/fs/ntfs3/super.c
@@ -1,20 +1,24 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  *
  *                 terminology
  *
- * vcn - virtual cluster number - offset inside the file in clusters
- * vbo - virtual byte offset    - offset inside the file in bytes
- * lcn - logical cluster number - 0 based cluster in clusters heap
- * lbo - logical byte offset    - absolute position inside volume
- * run - maps vcn to lcn        - stored in attributes in packed form
- * attr - attribute segment     - std/name/data etc records inside MFT
- * mi  - mft inode              - one MFT record(usually 1024 bytes), consists of attributes
- * ni  - ntfs inode             - extends linux inode. consists of one or more mft inodes
+ * cluster - allocation unit     - 512,1K,2K,4K,...,2M
+ * vcn - virtual cluster number  - offset inside the file in clusters
+ * vbo - virtual byte offset     - offset inside the file in bytes
+ * lcn - logical cluster number  - 0 based cluster in clusters heap
+ * lbo - logical byte offset     - absolute position inside volume
+ * run - maps vcn to lcn         - stored in attributes in packed form
+ * attr - attribute segment      - std/name/data etc records inside MFT
+ * mi  - mft inode               - one MFT record(usually 1024 bytes or 4K), consists of attributes
+ * ni  - ntfs inode              - extends linux inode. consists of one or more mft inodes
+ * index - unit inside directory - 2K, 4K, <=page size, does not depend on cluster size
  *
+ * TODO: Implement
+ * https://docs.microsoft.com/en-us/windows/wsl/file-permissions
  */
 
 #include <linux/backing-dev.h>
@@ -468,7 +472,7 @@ static void init_once(void *foo)
 static noinline void put_ntfs(struct ntfs_sb_info *sbi)
 {
 	ntfs_free(sbi->new_rec);
-	ntfs_free(ntfs_put_shared(sbi->upcase));
+	ntfs_vfree(ntfs_put_shared(sbi->upcase));
 	ntfs_free(sbi->def_table);
 
 	wnd_close(&sbi->mft.bitmap);
@@ -1238,7 +1242,7 @@ static int ntfs_fill_super(struct super_block *sb, void *data, int silent)
 		goto out;
 	}
 
-	sbi->upcase = upcase = ntfs_malloc(0x10000 * sizeof(short));
+	sbi->upcase = upcase = ntfs_vmalloc(0x10000 * sizeof(short));
 	if (!upcase) {
 		err = -ENOMEM;
 		goto out;
@@ -1268,7 +1272,7 @@ static int ntfs_fill_super(struct super_block *sb, void *data, int silent)
 	shared = ntfs_set_shared(upcase, 0x10000 * sizeof(short));
 	if (shared && upcase != shared) {
 		sbi->upcase = shared;
-		ntfs_free(upcase);
+		ntfs_vfree(upcase);
 	}
 
 	iput(inode);
@@ -1420,27 +1424,6 @@ static int __init init_ntfs_fs(void)
 {
 	int err;
 
-#ifdef NTFS3_INDEX_BINARY_SEARCH
-	pr_notice("ntfs3: +index binary search\n");
-#endif
-
-#ifdef NTFS3_CHECK_FREE_CLST
-	pr_notice("ntfs3: +check free clusters\n");
-#endif
-
-#if NTFS_LINK_MAX < 0xffff
-	pr_notice("ntfs3: max link count %u\n", NTFS_LINK_MAX);
-#endif
-
-#ifdef NTFS3_64BIT_CLUSTER
-	pr_notice("ntfs3: 64 bits per cluster\n");
-#else
-	pr_notice("ntfs3: 32 bits per cluster\n");
-#endif
-#ifdef CONFIG_NTFS3_LZX_XPRESS
-	pr_notice("ntfs3: read-only lzx/xpress compression included\n");
-#endif
-
 	ntfs_inode_cachep = kmem_cache_create(
 		"ntfs_inode_cache", sizeof(struct ntfs_inode), 0,
 		(SLAB_RECLAIM_ACCOUNT | SLAB_MEM_SPREAD | SLAB_ACCOUNT),
@@ -1472,6 +1455,21 @@ static void __exit exit_ntfs_fs(void)
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("ntfs3 filesystem");
+#ifdef NTFS3_INDEX_BINARY_SEARCH
+MODULE_INFO(behaviour, "index binary search");
+#endif
+#ifdef NTFS3_CHECK_FREE_CLST
+MODULE_INFO(behaviour, "hot fix free clusters");
+#endif
+#ifdef NTFS3_64BIT_CLUSTER
+MODULE_INFO(cluster, "64 bits per cluster");
+#else
+MODULE_INFO(cluster, "32 bits per cluster");
+#endif
+#ifdef CONFIG_NTFS3_LZX_XPRESS
+MODULE_INFO(compression, "read-only lzx/xpress compression included");
+#endif
+
 MODULE_AUTHOR("Konstantin Komarov");
 MODULE_ALIAS_FS("ntfs3");
 
diff --git a/fs/ntfs3/upcase.c b/fs/ntfs3/upcase.c
index 57a03731b..f43af9cad 100644
--- a/fs/ntfs3/upcase.c
+++ b/fs/ntfs3/upcase.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 #include <linux/blkdev.h>
diff --git a/fs/ntfs3/xattr.c b/fs/ntfs3/xattr.c
index cc69295eb..3b9946ea0 100644
--- a/fs/ntfs3/xattr.c
+++ b/fs/ntfs3/xattr.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
  *
- * Copyright (C) 2019-2020 Paragon Software GmbH, All rights reserved.
+ * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
  */
 
-- 
2.30.1.457.gf011795891

