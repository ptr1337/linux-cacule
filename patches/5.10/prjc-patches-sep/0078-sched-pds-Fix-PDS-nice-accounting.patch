From 64e80b9e666349b0e3ef8739bf8fc90308bec529 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Tue, 8 Dec 2020 15:01:33 +0800
Subject: [PATCH 78/79] sched/pds: Fix PDS nice accounting.

---
 kernel/sched/alt_sched.h |  2 ++
 kernel/sched/bmq.h       |  6 ------
 kernel/sched/bmq_imp.h   |  5 +++++
 kernel/sched/pds.h       |  7 +------
 kernel/sched/pds_imp.h   | 12 ++++++++++++
 5 files changed, 20 insertions(+), 12 deletions(-)

diff --git a/kernel/sched/alt_sched.h b/kernel/sched/alt_sched.h
index 4698d6d16a2d..fd75b7895469 100644
--- a/kernel/sched/alt_sched.h
+++ b/kernel/sched/alt_sched.h
@@ -373,6 +373,8 @@ static inline bool task_running(struct task_struct *p)
 	return p->on_cpu;
 }
 
+extern int task_running_nice(struct task_struct *p);
+
 extern struct static_key_false sched_schedstats;
 
 #ifdef CONFIG_CPU_IDLE
diff --git a/kernel/sched/bmq.h b/kernel/sched/bmq.h
index aff0bb30a884..aba3c98759f8 100644
--- a/kernel/sched/bmq.h
+++ b/kernel/sched/bmq.h
@@ -11,10 +11,4 @@ struct bmq {
 	struct list_head heads[SCHED_BITS];
 };
 
-
-static inline int task_running_nice(struct task_struct *p)
-{
-	return (p->prio + p->boost_prio > DEFAULT_PRIO + MAX_PRIORITY_ADJ);
-}
-
 #endif
diff --git a/kernel/sched/bmq_imp.h b/kernel/sched/bmq_imp.h
index e213e82475ab..83c2d019c446 100644
--- a/kernel/sched/bmq_imp.h
+++ b/kernel/sched/bmq_imp.h
@@ -62,6 +62,11 @@ static inline void time_slice_expired(struct task_struct *p, struct rq *rq)
 	}
 }
 
+static inline int task_running_nice(struct task_struct *p)
+{
+	return (p->prio + p->boost_prio > DEFAULT_PRIO + MAX_PRIORITY_ADJ);
+}
+
 static inline void update_task_priodl(struct task_struct *p) {}
 
 static inline unsigned long sched_queue_watermark(struct rq *rq)
diff --git a/kernel/sched/pds.h b/kernel/sched/pds.h
index 7fdeace7e8a5..623908cf4380 100644
--- a/kernel/sched/pds.h
+++ b/kernel/sched/pds.h
@@ -3,12 +3,7 @@
 
 /* bits:
  * RT(0-99), (Low prio adj range, nice width, high prio adj range) / 2, cpu idle task */
-#define SCHED_BITS	(MAX_RT_PRIO + 20 + 1)
+#define SCHED_BITS	(MAX_RT_PRIO + NICE_WIDTH / 2 + 1)
 #define IDLE_TASK_SCHED_PRIO	(SCHED_BITS - 1)
 
-static inline int task_running_nice(struct task_struct *p)
-{
-	return (p->prio > DEFAULT_PRIO);
-}
-
 #endif
diff --git a/kernel/sched/pds_imp.h b/kernel/sched/pds_imp.h
index 5a5de14598d4..6b2140f0a69e 100644
--- a/kernel/sched/pds_imp.h
+++ b/kernel/sched/pds_imp.h
@@ -26,6 +26,13 @@ static const unsigned char dl_level_map[] = {
 	 1,  0
 };
 
+/* DEFAULT_SCHED_PRIO:
+ * dl_level_map[(user_prio2deadline[39] - user_prio2deadline[0]) >> 21] =
+ * dl_level_map[68] =
+ * 10
+ */
+#define DEFAULT_SCHED_PRIO (MAX_RT_PRIO + 10)
+
 static inline int normal_prio(struct task_struct *p)
 {
 	if (task_has_rt_policy(p))
@@ -51,6 +58,11 @@ task_sched_prio(const struct task_struct *p, const struct rq *rq)
 	return MAX_RT_PRIO + dl_level_map[delta];
 }
 
+int task_running_nice(struct task_struct *p)
+{
+	return task_sched_prio(p, task_rq(p)) > DEFAULT_SCHED_PRIO;
+}
+
 static inline void update_task_priodl(struct task_struct *p)
 {
 	p->priodl = (((u64) (p->prio))<<56) | ((p->deadline)>>8);
-- 
2.29.2.456.g3a0b884cab

