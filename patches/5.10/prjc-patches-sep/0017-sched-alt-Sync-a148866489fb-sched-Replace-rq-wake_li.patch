From b1d776db68450eac7b27fb61aa0e1d3df8326c50 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Sun, 2 Aug 2020 11:17:52 +0800
Subject: [PATCH 17/79] sched/alt: [Sync] a148866489fb sched: Replace
 rq::wake_list

---
 include/linux/sched.h    |  6 ++----
 kernel/sched/alt_core.c  | 25 ++++++++-----------------
 kernel/sched/alt_sched.h |  3 ---
 3 files changed, 10 insertions(+), 24 deletions(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index 5639ee15c39a..a42c15ea5e6f 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -660,15 +660,13 @@ struct task_struct {
 	unsigned int			flags;
 	unsigned int			ptrace;
 
-#if defined(CONFIG_SMP)
+#ifdef CONFIG_SMP
 	struct llist_node		wake_entry;
+	unsigned int			wake_entry_type;
 #endif
 #if defined(CONFIG_SMP) || defined(CONFIG_SCHED_ALT)
 	int				on_cpu;
 #endif
-#if defined(CONFIG_SMP) && !defined(CONFIG_SCHED_ALT)
-	struct llist_node		wake_entry;
-#endif
 
 #ifdef CONFIG_SMP
 #ifdef CONFIG_THREAD_INFO_IN_TASK
diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 31b37ba36bcb..ecdfbbd6d572 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -1172,7 +1172,7 @@ static int migration_cpu_stop(void *data)
 	 * __migrate_task() such that we will not miss enforcing cpus_ptr
 	 * during wakeups, see set_cpus_allowed_ptr()'s TASK_WAKING test.
 	 */
-	sched_ttwu_pending();
+	flush_smp_call_function_from_idle();
 
 	raw_spin_lock(&p->pi_lock);
 	raw_spin_lock(&rq->lock);
@@ -1654,14 +1654,13 @@ static int ttwu_remote(struct task_struct *p, int wake_flags)
 }
 
 #ifdef CONFIG_SMP
-void sched_ttwu_pending(void)
+void sched_ttwu_pending(void *arg)
 {
+	struct llist_node *llist = arg;
 	struct rq *rq = this_rq();
-	struct llist_node *llist;
 	struct task_struct *p, *t;
 	struct rq_flags rf;
 
-	llist = llist_del_all(&rq->wake_list);
 	if (!llist)
 		return;
 
@@ -1682,11 +1681,6 @@ void sched_ttwu_pending(void)
 	rq_unlock_irqrestore(rq, &rf);
 }
 
-static void wake_csd_func(void *info)
-{
-	sched_ttwu_pending();
-}
-
 void send_call_function_single_ipi(int cpu)
 {
 	struct rq *rq = cpu_rq(cpu);
@@ -1710,12 +1704,7 @@ static void __ttwu_queue_wakelist(struct task_struct *p, int cpu, int wake_flags
 	p->sched_remote_wakeup = !!(wake_flags & WF_MIGRATED);
 
 	WRITE_ONCE(rq->ttwu_pending, 1);
-	if (llist_add(&p->wake_entry, &rq->wake_list)) {
-		if (!set_nr_if_polling(rq->idle))
-			smp_call_function_single_async(cpu, &rq->wake_csd);
-		else
-			trace_sched_wake_idle_without_ipi(cpu);
-	}
+	__smp_call_single_queue(cpu, &p->wake_entry);
 }
 
 static inline bool ttwu_queue_cond(int cpu, int wake_flags)
@@ -2138,6 +2127,9 @@ static inline void __sched_fork(unsigned long clone_flags, struct task_struct *p
 #ifdef CONFIG_COMPACTION
 	p->capture_control = NULL;
 #endif
+#ifdef CONFIG_SMP
+	p->wake_entry_type = CSD_TYPE_TTWU;
+#endif
 }
 
 /*
@@ -5628,9 +5620,8 @@ int sched_cpu_dying(unsigned int cpu)
 	unsigned long flags;
 
 	/* Handle pending wakeups and then migrate everything off */
-	sched_ttwu_pending();
-
 	sched_tick_stop(cpu);
+
 	raw_spin_lock_irqsave(&rq->lock, flags);
 	set_rq_offline(rq);
 	migrate_tasks(rq);
diff --git a/kernel/sched/alt_sched.h b/kernel/sched/alt_sched.h
index 194aae423056..2e7fa0fe74fc 100644
--- a/kernel/sched/alt_sched.h
+++ b/kernel/sched/alt_sched.h
@@ -103,7 +103,6 @@ struct rq {
 	bool online;
 
 	unsigned int		ttwu_pending;
-	struct llist_head	wake_list;
 	unsigned char		nohz_idle_balance;
 
 #ifdef CONFIG_HAVE_SCHED_AVG_IRQ
@@ -231,12 +230,10 @@ static inline int best_mask_cpu(int cpu, const cpumask_t *cpumask)
 		__best_mask_cpu(cpu, cpumask, &(per_cpu(sched_cpu_affinity_masks, cpu)[0]));
 }
 
-extern void sched_ttwu_pending(void);
 extern void flush_smp_call_function_from_idle(void);
 
 #else  /* !CONFIG_SMP */
 static inline void flush_smp_call_function_from_idle(void) { }
-static inline void sched_ttwu_pending(void) { }
 #endif
 
 #ifndef arch_scale_freq_tick
-- 
2.29.2.456.g3a0b884cab

