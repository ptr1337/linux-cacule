From bf3462b9bf0c71c0ac19e1b773a7e2f2be6b9ee8 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Sun, 6 Dec 2020 19:26:20 +0800
Subject: [PATCH 74/79] sched/pds: Fix for low priority NORMAL policy task.

Task priodl is not properly set, which cause low priority task freezed.
---
 init/init_task.c        | 7 ++++++-
 kernel/sched/alt_core.c | 8 --------
 kernel/sched/bmq_imp.h  | 8 ++++++++
 kernel/sched/pds_imp.h  | 8 ++++++++
 4 files changed, 22 insertions(+), 9 deletions(-)

diff --git a/init/init_task.c b/init/init_task.c
index cd105e2612a3..60864a24418f 100644
--- a/init/init_task.c
+++ b/init/init_task.c
@@ -75,10 +75,15 @@ struct task_struct init_task
 	.stack		= init_stack,
 	.usage		= REFCOUNT_INIT(2),
 	.flags		= PF_KTHREAD,
-#ifdef CONFIG_SCHED_ALT
+#ifdef CONFIG_SCHED_BMQ
 	.prio		= DEFAULT_PRIO + MAX_PRIORITY_ADJ,
 	.static_prio	= DEFAULT_PRIO,
 	.normal_prio	= DEFAULT_PRIO + MAX_PRIORITY_ADJ,
+#endif
+#ifdef CONFIG_SCHED_PDS
+	.prio		= MAX_USER_RT_PRIO,
+	.static_prio	= DEFAULT_PRIO,
+	.normal_prio	= MAX_USER_RT_PRIO,
 #else
 	.prio		= MAX_PRIO - 20,
 	.static_prio	= MAX_PRIO - 20,
diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 58a432fffd53..3808507c44c1 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -1035,14 +1035,6 @@ static inline void hrtick_rq_init(struct rq *rq)
 }
 #endif	/* CONFIG_SCHED_HRTICK */
 
-static inline int normal_prio(struct task_struct *p)
-{
-	if (task_has_rt_policy(p))
-		return MAX_RT_PRIO - 1 - p->rt_priority;
-
-	return p->static_prio + MAX_PRIORITY_ADJ;
-}
-
 /*
  * Calculate the current priority, i.e. the priority
  * taken into account by the scheduler. This value might
diff --git a/kernel/sched/bmq_imp.h b/kernel/sched/bmq_imp.h
index ad9a7c448da7..e213e82475ab 100644
--- a/kernel/sched/bmq_imp.h
+++ b/kernel/sched/bmq_imp.h
@@ -36,6 +36,14 @@ static inline void deboost_task(struct task_struct *p)
 /*
  * Common interfaces
  */
+static inline int normal_prio(struct task_struct *p)
+{
+	if (task_has_rt_policy(p))
+		return MAX_RT_PRIO - 1 - p->rt_priority;
+
+	return p->static_prio + MAX_PRIORITY_ADJ;
+}
+
 static inline int task_sched_prio(struct task_struct *p, struct rq *rq)
 {
 	return (p->prio < MAX_RT_PRIO)? p->prio : MAX_RT_PRIO / 2 + (p->prio + p->boost_prio) / 2;
diff --git a/kernel/sched/pds_imp.h b/kernel/sched/pds_imp.h
index 73fe42b84fc0..5a5de14598d4 100644
--- a/kernel/sched/pds_imp.h
+++ b/kernel/sched/pds_imp.h
@@ -26,6 +26,14 @@ static const unsigned char dl_level_map[] = {
 	 1,  0
 };
 
+static inline int normal_prio(struct task_struct *p)
+{
+	if (task_has_rt_policy(p))
+		return MAX_RT_PRIO - 1 - p->rt_priority;
+
+	return MAX_USER_RT_PRIO;
+}
+
 static inline int
 task_sched_prio(const struct task_struct *p, const struct rq *rq)
 {
-- 
2.29.2.456.g3a0b884cab

