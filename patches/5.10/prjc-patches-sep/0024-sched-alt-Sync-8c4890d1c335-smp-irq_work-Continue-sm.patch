From 71761a674d5b1b2643745cdda97b465e0d5c557a Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Sun, 2 Aug 2020 23:58:37 +0800
Subject: [PATCH 24/79] sched/alt: [Sync] 8c4890d1c335 smp, irq_work: Continue
 smp_call_function*() and irq_work*() integration

---
 include/linux/sched.h   | 3 +--
 kernel/sched/alt_core.c | 6 +++---
 2 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index a42c15ea5e6f..f9e5b3d71b79 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -661,8 +661,7 @@ struct task_struct {
 	unsigned int			ptrace;
 
 #ifdef CONFIG_SMP
-	struct llist_node		wake_entry;
-	unsigned int			wake_entry_type;
+	struct __call_single_node	wake_entry;
 #endif
 #if defined(CONFIG_SMP) || defined(CONFIG_SCHED_ALT)
 	int				on_cpu;
diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index f09922beba24..7e3a1798f348 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -1675,7 +1675,7 @@ void sched_ttwu_pending(void *arg)
 	rq_lock_irqsave(rq, &rf);
 	update_rq_clock(rq);
 
-	llist_for_each_entry_safe(p, t, llist, wake_entry) {
+	llist_for_each_entry_safe(p, t, llist, wake_entry.llist) {
 		if (WARN_ON_ONCE(p->on_cpu))
 			smp_cond_load_acquire(&p->on_cpu, !VAL);
 
@@ -1713,7 +1713,7 @@ static void __ttwu_queue_wakelist(struct task_struct *p, int cpu, int wake_flags
 	p->sched_remote_wakeup = !!(wake_flags & WF_MIGRATED);
 
 	WRITE_ONCE(rq->ttwu_pending, 1);
-	__smp_call_single_queue(cpu, &p->wake_entry);
+	__smp_call_single_queue(cpu, &p->wake_entry.llist);
 }
 
 static inline bool ttwu_queue_cond(int cpu, int wake_flags)
@@ -2153,7 +2153,7 @@ static inline void __sched_fork(unsigned long clone_flags, struct task_struct *p
 	p->capture_control = NULL;
 #endif
 #ifdef CONFIG_SMP
-	p->wake_entry_type = CSD_TYPE_TTWU;
+	p->wake_entry.u_flags = CSD_TYPE_TTWU;
 #endif
 }
 
-- 
2.29.2.456.g3a0b884cab

