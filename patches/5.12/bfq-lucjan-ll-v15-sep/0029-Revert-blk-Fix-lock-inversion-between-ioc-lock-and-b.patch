From 0f498060c1c1d34c6f4815dc0b8ef11516301226 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Mon, 24 May 2021 23:39:49 +0200
Subject: [PATCH 29/42] Revert "blk: Fix lock inversion between ioc lock and
 bfqd lock"

This reverts commit 54ab1753974aa84a23d712b29886885cb0ee2e39.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-iosched.c | 20 +++++++++++++-------
 block/blk-merge.c   | 19 +++++++++++--------
 block/blk.h         |  2 +-
 block/mq-deadline.c |  4 +---
 4 files changed, 26 insertions(+), 19 deletions(-)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index 18f7b3dc8..4a1ad90b7 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -2317,9 +2317,9 @@ static bool bfq_bio_merge(struct request_queue *q, struct bio *bio,
 
 	ret = blk_mq_sched_try_merge(q, bio, nr_segs, &free);
 
-	spin_unlock_irq(&bfqd->lock);
 	if (free)
 		blk_mq_free_request(free);
+	spin_unlock_irq(&bfqd->lock);
 
 	return ret;
 }
@@ -5951,7 +5951,6 @@ static void bfq_insert_request(struct blk_mq_hw_ctx *hctx, struct request *rq,
 	spin_lock_irq(&bfqd->lock);
 	if (blk_mq_sched_try_insert_merge(q, rq)) {
 		spin_unlock_irq(&bfqd->lock);
-		blk_put_request(rq);
 		return;
 	}
 
@@ -6395,7 +6394,6 @@ static void bfq_finish_requeue_request(struct request *rq)
 {
 	struct bfq_queue *bfqq = RQ_BFQQ(rq);
 	struct bfq_data *bfqd;
-	unsigned long flags;
 
 	/*
 	 * rq either is not associated with any icq, or is an already
@@ -6413,12 +6411,18 @@ static void bfq_finish_requeue_request(struct request *rq)
 					     rq->io_start_time_ns,
 					     rq->cmd_flags);
 
-	spin_lock_irqsave(&bfqd->lock, flags);
 	if (likely(rq->rq_flags & RQF_STARTED)) {
+		unsigned long flags;
+
+		spin_lock_irqsave(&bfqd->lock, flags);
+
 		if (rq == bfqd->waited_rq)
 			bfq_update_inject_limit(bfqd, bfqq);
 
 		bfq_completed_request(bfqq, bfqd);
+		bfq_finish_requeue_request_body(bfqq);
+
+		spin_unlock_irqrestore(&bfqd->lock, flags);
 	} else {
 		/*
 		 * Request rq may be still/already in the scheduler,
@@ -6428,16 +6432,18 @@ static void bfq_finish_requeue_request(struct request *rq)
 		 * inconsistencies in the time interval from the end
 		 * of this function to the start of the deferred work.
 		 * This situation seems to occur only in process
-		 * context, as a consequence of a merge.
+		 * context, as a consequence of a merge. In the
+		 * current version of the code, this implies that the
+		 * lock is held.
 		 */
+
 		if (!RB_EMPTY_NODE(&rq->rb_node)) {
 			bfq_remove_request(rq->q, rq);
 			bfqg_stats_update_io_remove(bfqq_group(bfqq),
 						    rq->cmd_flags);
 		}
+		bfq_finish_requeue_request_body(bfqq);
 	}
-	bfq_finish_requeue_request_body(bfqq);
-	spin_unlock_irqrestore(&bfqd->lock, flags);
 
 	/*
 	 * Reset private fields. In case of a requeue, this allows
diff --git a/block/blk-merge.c b/block/blk-merge.c
index 1398b52a2..4d97fb6dd 100644
--- a/block/blk-merge.c
+++ b/block/blk-merge.c
@@ -846,15 +846,18 @@ static struct request *attempt_front_merge(struct request_queue *q,
 	return NULL;
 }
 
-/*
- * Try to merge 'next' into 'rq'. Return true if the merge happened, false
- * otherwise. The caller is responsible for freeing 'next' if the merge
- * happened.
- */
-bool blk_attempt_req_merge(struct request_queue *q, struct request *rq,
-			   struct request *next)
+int blk_attempt_req_merge(struct request_queue *q, struct request *rq,
+			  struct request *next)
 {
-	return attempt_merge(q, rq, next);
+	struct request *free;
+
+	free = attempt_merge(q, rq, next);
+	if (free) {
+		blk_put_request(free);
+		return 1;
+	}
+
+	return 0;
 }
 
 bool blk_rq_merge_ok(struct request *rq, struct bio *bio)
diff --git a/block/blk.h b/block/blk.h
index 52ff5d4a3..3b53e44b9 100644
--- a/block/blk.h
+++ b/block/blk.h
@@ -224,7 +224,7 @@ ssize_t part_timeout_store(struct device *, struct device_attribute *,
 void __blk_queue_split(struct bio **bio, unsigned int *nr_segs);
 int ll_back_merge_fn(struct request *req, struct bio *bio,
 		unsigned int nr_segs);
-bool blk_attempt_req_merge(struct request_queue *q, struct request *rq,
+int blk_attempt_req_merge(struct request_queue *q, struct request *rq,
 				struct request *next);
 unsigned int blk_recalc_rq_segments(struct request *rq);
 void blk_rq_set_mixed_merge(struct request *rq);
diff --git a/block/mq-deadline.c b/block/mq-deadline.c
index 13b892039..df34f773e 100644
--- a/block/mq-deadline.c
+++ b/block/mq-deadline.c
@@ -494,10 +494,8 @@ static void dd_insert_request(struct blk_mq_hw_ctx *hctx, struct request *rq,
 	 */
 	blk_req_zone_write_unlock(rq);
 
-	if (blk_mq_sched_try_insert_merge(q, rq)) {
-		blk_put_request(rq);
+	if (blk_mq_sched_try_insert_merge(q, rq))
 		return;
-	}
 
 	trace_block_rq_insert(rq);
 
-- 
2.32.0.rc1

