From 4a7729afaa6e3ed32c4a6075f0698e37c5f5328e Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Tue, 29 Oct 2019 21:58:28 +0800
Subject: [PATCH 38/53] bmq: [Sync] 4b211f2b129d sched/core: Streamle calls to
 task_rq_unlock()

---
 kernel/sched/bmq.c | 20 +++++++++++---------
 1 file changed, 11 insertions(+), 9 deletions(-)

diff --git a/kernel/sched/bmq.c b/kernel/sched/bmq.c
index 9b0606693cb4..63bdcb48444a 100644
--- a/kernel/sched/bmq.c
+++ b/kernel/sched/bmq.c
@@ -3894,9 +3894,8 @@ static int __sched_setscheduler(struct task_struct *p,
 	 * Changing the policy of the stop threads its a very bad idea
 	 */
 	if (p == rq->stop) {
-		__task_access_unlock(p, lock);
-		raw_spin_unlock_irqrestore(&p->pi_lock, flags);
-		return -EINVAL;
+		retval = -EINVAL;
+		goto unlock;
 	}
 
 	/*
@@ -3910,9 +3909,8 @@ static int __sched_setscheduler(struct task_struct *p,
 			goto change;
 
 		p->sched_reset_on_fork = reset_on_fork;
-		__task_access_unlock(p, lock);
-		raw_spin_unlock_irqrestore(&p->pi_lock, flags);
-		return 0;
+		retval = 0;
+		goto unlock;
 	}
 change:
 
@@ -3936,9 +3934,8 @@ static int __sched_setscheduler(struct task_struct *p,
 		 */
 		if (rt_effective_prio(p, newprio) == p->prio) {
 			__setscheduler_params(p, attr);
-			__task_access_unlock(p, lock);
-			raw_spin_unlock_irqrestore(&p->pi_lock, flags);
-			return 0;
+			retval = 0;
+			goto unlock;
 		}
 	}
 
@@ -3957,6 +3954,11 @@ static int __sched_setscheduler(struct task_struct *p,
 	preempt_enable();
 
 	return 0;
+
+unlock:
+	__task_access_unlock(p, lock);
+	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
+	return retval;
 }
 
 static int _sched_setscheduler(struct task_struct *p, int policy,
-- 
2.24.0.155.gd9f6f3b619

