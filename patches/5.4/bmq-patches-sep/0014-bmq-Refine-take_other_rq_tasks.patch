From d0a4d3ad6b67e0dddef84bab91d407a54fe43f89 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Wed, 17 Jul 2019 17:55:08 +0800
Subject: [PATCH 14/53] bmq: Refine take_other_rq_tasks().

---
 kernel/sched/bmq.c | 44 ++++++++++++++++++++------------------------
 1 file changed, 20 insertions(+), 24 deletions(-)

diff --git a/kernel/sched/bmq.c b/kernel/sched/bmq.c
index 96330686e91c..aa2e067142fe 100644
--- a/kernel/sched/bmq.c
+++ b/kernel/sched/bmq.c
@@ -2825,10 +2825,9 @@ static inline void check_curr(struct task_struct *p, struct rq *rq)
  * SCHED_RQ_NR_MIGRATION to @dest_cpu
  */
 static inline int
-migrate_pending_tasks(struct rq *rq, struct rq *dest_rq)
+migrate_pending_tasks(struct rq *rq, struct rq *dest_rq, const int dest_cpu)
 {
 	struct task_struct *p, *next;
-	int dest_cpu = cpu_of(dest_rq);
 	int nr_migrated = 0;
 	int nr_tries = min((rq->nr_running + 1) / 2, SCHED_RQ_NR_MIGRATION);
 
@@ -2854,28 +2853,8 @@ migrate_pending_tasks(struct rq *rq, struct rq *dest_rq)
 	return nr_migrated;
 }
 
-static inline int
-lock_and_migrate_pending_tasks(struct rq *src_rq, struct rq *rq)
-{
-	int nr_migrated;
-
-	if (!do_raw_spin_trylock(&src_rq->lock))
-		return 0;
-	spin_acquire(&src_rq->lock.dep_map, SINGLE_DEPTH_NESTING, 1, _RET_IP_);
-
-	update_rq_clock(src_rq);
-	if ((nr_migrated = migrate_pending_tasks(src_rq, rq)))
-		cpufreq_update_util(rq, 0);
-
-	spin_release(&src_rq->lock.dep_map, 1, _RET_IP_);
-	do_raw_spin_unlock(&src_rq->lock);
-
-	return nr_migrated;
-}
-
 static inline int take_other_rq_tasks(struct rq *rq, int cpu)
 {
-	int i, tried = 0;
 	struct cpumask *affinity_mask, *end_mask;
 
 	if (cpumask_empty(&sched_rq_pending_mask))
@@ -2883,11 +2862,28 @@ static inline int take_other_rq_tasks(struct rq *rq, int cpu)
 
 	affinity_mask = per_cpu(sched_cpu_llc_start_mask, cpu);
 	end_mask = per_cpu(sched_cpu_affinity_chk_end_masks, cpu);
-
 	do {
+		int i, tried = 0;
+
 		for_each_cpu_and(i, &sched_rq_pending_mask, affinity_mask) {
-			if (lock_and_migrate_pending_tasks(cpu_rq(i), rq))
+			int nr_migrated;
+			struct rq *src_rq;
+
+			src_rq = cpu_rq(i);
+			if (!do_raw_spin_trylock(&src_rq->lock))
+				continue;
+			spin_acquire(&src_rq->lock.dep_map,
+				     SINGLE_DEPTH_NESTING, 1, _RET_IP_);
+
+			nr_migrated = migrate_pending_tasks(src_rq, rq, cpu);
+
+			spin_release(&src_rq->lock.dep_map, 1, _RET_IP_);
+			do_raw_spin_unlock(&src_rq->lock);
+
+			if (nr_migrated) {
+				cpufreq_update_util(rq, 0);
 				return 1;
+			}
 			if (tried)
 				return 0;
 			tried++;
-- 
2.24.0.155.gd9f6f3b619

