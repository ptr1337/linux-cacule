From 12b86fcf124a5b90e96b501f12373db75a6a297a Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Mon, 2 Sep 2019 23:55:14 +0800
Subject: [PATCH 05/53] bmq: [Sync] aacedf26fb76 sched/core: Optimize
 try_to_wake_up() for local wakeups

---
 kernel/sched/bmq.c | 36 +++++++++++++++++++++++++++++++-----
 1 file changed, 31 insertions(+), 5 deletions(-)

diff --git a/kernel/sched/bmq.c b/kernel/sched/bmq.c
index fd815bd38f17..e9fca77b641b 100644
--- a/kernel/sched/bmq.c
+++ b/kernel/sched/bmq.c
@@ -1590,6 +1590,30 @@ static int try_to_wake_up(struct task_struct *p, unsigned int state,
 	struct rq *rq;
 	int cpu, success = 0;
 
+	preempt_disable();
+	if (p == current) {
+		/*
+		 * We're waking current, this means 'p->on_rq' and 'task_cpu(p)
+		 * == smp_processor_id()'. Together this means we can special
+		 * case the whole 'p->on_rq && ttwu_remote()' case below
+		 * without taking any locks.
+		 *
+		 * In particular:
+		 *  - we rely on Program-Order guarantees for all the ordering,
+		 *  - we're serialized against set_special_state() by virtue of
+		 *    it disabling IRQs (this allows not taking ->pi_lock).
+		 */
+		if (!(p->state & state))
+			goto out;
+
+		success = 1;
+		cpu = task_cpu(p);
+		trace_sched_waking(p);
+		p->state = TASK_RUNNING;
+		trace_sched_wakeup(p);
+		goto out;
+	}
+
 	/*
 	 * If we are going to wake up a thread waiting for CONDITION we
 	 * need to ensure that CONDITION=1 done by the caller can not be
@@ -1599,7 +1623,7 @@ static int try_to_wake_up(struct task_struct *p, unsigned int state,
 	raw_spin_lock_irqsave(&p->pi_lock, flags);
 	smp_mb__after_spinlock();
 	if (!(p->state & state))
-		goto out;
+		goto unlock;
 
 	trace_sched_waking(p);
 
@@ -1629,7 +1653,7 @@ static int try_to_wake_up(struct task_struct *p, unsigned int state,
 	 */
 	smp_rmb();
 	if (p->on_rq && ttwu_remote(p, wake_flags))
-		goto stat;
+		goto unlock;
 
 #ifdef CONFIG_SMP
 	/*
@@ -1695,10 +1719,12 @@ static int try_to_wake_up(struct task_struct *p, unsigned int state,
 
 	raw_spin_unlock(&rq->lock);
 
-stat:
-	ttwu_stat(p, cpu, wake_flags);
-out:
+unlock:
 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
+out:
+	if (success)
+		ttwu_stat(p, cpu, wake_flags);
+	preempt_enable();
 
 	return success;
 }
-- 
2.24.0.155.gd9f6f3b619

