From e0cd283105fa5ace5f83b6502b8eab83e5bcf91f Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Tue, 29 Oct 2019 20:22:35 +0800
Subject: [PATCH 51/53] bmq: [Sync] e0e8d4911ed2 sched/isolation: Prefer
 housekeeping CPU in local node

---
 kernel/sched/bmq.c       | 21 +++++++++++++++++++--
 kernel/sched/bmq_sched.h |  9 +++++++++
 2 files changed, 28 insertions(+), 2 deletions(-)

diff --git a/kernel/sched/bmq.c b/kernel/sched/bmq.c
index fcd89fe545ea..0876bde7c104 100644
--- a/kernel/sched/bmq.c
+++ b/kernel/sched/bmq.c
@@ -1326,7 +1326,7 @@ static int select_fallback_rq(int cpu, struct task_struct *p)
 	return dest_cpu;
 }
 
-static inline int __best_mask_cpu(int cpu, cpumask_t *cpumask)
+static inline int __best_mask_cpu(int cpu, const cpumask_t *cpumask)
 {
 	cpumask_t *mask = &(per_cpu(sched_cpu_affinity_masks, cpu)[0]);
 	while ((cpu = cpumask_any_and(cpumask, mask)) >= nr_cpu_ids)
@@ -1334,7 +1334,7 @@ static inline int __best_mask_cpu(int cpu, cpumask_t *cpumask)
 	return cpu;
 }
 
-static inline int best_mask_cpu(int cpu, cpumask_t *cpumask)
+static inline int best_mask_cpu(int cpu, const cpumask_t *cpumask)
 {
 	return cpumask_test_cpu(cpu, cpumask)? cpu:__best_mask_cpu(cpu, cpumask);
 }
@@ -5412,6 +5412,23 @@ void partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],
  */
 static int num_cpus_frozen;
 
+#ifdef CONFIG_NUMA
+int __read_mostly		node_reclaim_distance = RECLAIM_DISTANCE;
+
+/*
+ * sched_numa_find_closest() - given the NUMA topology, find the cpu
+ *                             closest to @cpu from @cpumask.
+ * cpumask: cpumask to find a cpu from
+ * cpu: cpu to be close to
+ *
+ * returns: cpu, or nr_cpu_ids when nothing found.
+ */
+int sched_numa_find_closest(const struct cpumask *cpus, int cpu)
+{
+	return best_mask_cpu(cpu, cpus);
+}
+#endif /* CONFIG_NUMA */
+
 /*
  * Update cpusets according to cpu_active mask.  If cpusets are
  * disabled, cpuset_update_active_cpus() becomes a simple wrapper
diff --git a/kernel/sched/bmq_sched.h b/kernel/sched/bmq_sched.h
index 3b5a87748c67..ed08dd0b8227 100644
--- a/kernel/sched/bmq_sched.h
+++ b/kernel/sched/bmq_sched.h
@@ -460,4 +460,13 @@ static inline int task_running_nice(struct task_struct *p)
 {
 	return (p->prio + p->boost_prio > DEFAULT_PRIO + MAX_PRIORITY_ADJ);
 }
+
+#ifdef CONFIG_NUMA
+extern int sched_numa_find_closest(const struct cpumask *cpus, int cpu);
+#else
+static inline int sched_numa_find_closest(const struct cpumask *cpus, int cpu)
+{
+	return nr_cpu_ids;
+}
+#endif
 #endif /* BMQ_SCHED_H */
-- 
2.24.0.155.gd9f6f3b619

