From 9be65d047443a59653963b97a39c37169863febc Mon Sep 17 00:00:00 2001
From: Yu Zhao <yuzhao@google.com>
Date: Wed, 21 Jul 2021 17:24:25 -0600
Subject: [PATCH 12/14] mm: fix priority queue in multigenerational lru

The priority queue helps select the best memcg to reclaim memory from
when there are multiple candidates. If reclaim didn't make progress
after it has tried those at the front, it increments the priority of
the rest in the queue by one. If the queue is not empty, more memcgs
will appear at the front and then reclaim will try them again.

However, this wasn't properly implemented, which causes the memory
pressure to be distributed to all memcgs in the queue. If one of them
uses a large amount of page cache, the distributed memory pressure
will slow down the rest.

Signed-off-by: Yu Zhao <yuzhao@google.com>
---
 include/linux/mmzone.h |  2 ++
 mm/vmscan.c            | 14 +++++++++++++-
 2 files changed, 15 insertions(+), 1 deletion(-)

diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
index b6005e881..f0c8378e4 100644
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -364,6 +364,8 @@ struct lrugen {
 	unsigned long avg_refaulted[ANON_AND_FILE][MAX_NR_TIERS];
 	/* the exponential moving average of evicted+protected */
 	unsigned long avg_total[ANON_AND_FILE][MAX_NR_TIERS];
+	/* the priority queue when choosing reclaimable memcgs */
+	atomic_t priority;
 	/* whether the multigenerational lru is enabled */
 	bool enabled[ANON_AND_FILE];
 };
diff --git a/mm/vmscan.c b/mm/vmscan.c
index 6f7c69924..bb5cbf849 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -4248,6 +4248,8 @@ static int scan_pages(struct lruvec *lruvec, struct scan_control *sc, long *nr_t
 	}
 
 	success = try_to_inc_min_seq(lruvec, type);
+	if (memcg && !mem_cgroup_is_root(memcg) && !cgroup_reclaim(sc) && success && type)
+		atomic_add_unless(&lrugen->priority, -1, 0);
 
 	*nr_to_scan -= scanned;
 
@@ -4449,6 +4451,10 @@ static long get_nr_to_scan(struct lruvec *lruvec, struct scan_control *sc, int s
 	struct mem_cgroup *memcg = lruvec_memcg(lruvec);
 	DEFINE_MAX_SEQ(lruvec);
 	DEFINE_MIN_SEQ(lruvec);
+	/* only proceed with memcgs at the front of the priority queue */
+	if (!cgroup_reclaim(sc) && atomic_read(&lrugen->priority) != DEF_PRIORITY)
+		return 0;
+
 
 	for (type = !swappiness; type < ANON_AND_FILE; type++) {
 		unsigned long seq;
@@ -4529,6 +4535,10 @@ static void lru_gen_shrink_lruvec(struct lruvec *lruvec, struct scan_control *sc
 }
 
 /******************************************************************************
+		struct lrugen *lrugen = &lruvec->evictable;
+		if (memcg && !mem_cgroup_is_root(memcg) && sc->priority != DEF_PRIORITY)
+			atomic_add_unless(&lrugen->priority, 1, DEF_PRIORITY);
+
  *                          state change
  ******************************************************************************/
 
@@ -4931,7 +4941,7 @@ static int lru_gen_seq_show(struct seq_file *m, void *v)
 		seq_printf(m, "memcg %5hu %s\n", mem_cgroup_id(memcg), path);
 	}
 
-	seq_printf(m, " node %5d\n", nid);
+	seq_printf(m, " node %5d %10d\n", nid, atomic_read(&lrugen->priority));
 
 	if (!full)
 		seq = min(min_seq[0], min_seq[1]);
@@ -5163,6 +5173,8 @@ void lru_gen_init_lrugen(struct lruvec *lruvec)
 	lrugen->enabled[0] = lru_gen_enabled() && lru_gen_nr_swapfiles;
 	lrugen->enabled[1] = lru_gen_enabled();
 
+	atomic_set(&lrugen->priority, DEF_PRIORITY);
+
 	for (i = 0; i <= MIN_NR_GENS + 1; i++)
 		lrugen->timestamps[i] = jiffies;
 
-- 
2.33.0.113.g6c40894d24

