From 8abbac41076d72dbac4bc94b030a83be04fedc0c Mon Sep 17 00:00:00 2001
From: Steven Barrett <steven@liquorix.net>
Date: Mon, 6 Sep 2021 09:35:35 -0500
Subject: [PATCH 14/14] Revert "mm: fix priority queue in multigenerational
 lru"

This wasn't included in the original v4 patch, drop for now since it was
probably not required for the complete swap/oom fix worked on in #216.

This reverts commit 7dba8055be721488d6d04fd4566a1074499e00e5.
---
 include/linux/mmzone.h |  2 --
 mm/vmscan.c            | 14 +-------------
 2 files changed, 1 insertion(+), 15 deletions(-)

diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
index f0c8378e4..b6005e881 100644
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -364,8 +364,6 @@ struct lrugen {
 	unsigned long avg_refaulted[ANON_AND_FILE][MAX_NR_TIERS];
 	/* the exponential moving average of evicted+protected */
 	unsigned long avg_total[ANON_AND_FILE][MAX_NR_TIERS];
-	/* the priority queue when choosing reclaimable memcgs */
-	atomic_t priority;
 	/* whether the multigenerational lru is enabled */
 	bool enabled[ANON_AND_FILE];
 };
diff --git a/mm/vmscan.c b/mm/vmscan.c
index 5955ae6ad..3b17bf7da 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -4336,8 +4336,6 @@ static int scan_pages(struct lruvec *lruvec, struct scan_control *sc, long *nr_t
 	}
 
 	success = try_to_inc_min_seq(lruvec, type);
-	if (memcg && !mem_cgroup_is_root(memcg) && !cgroup_reclaim(sc) && success && type)
-		atomic_add_unless(&lrugen->priority, -1, 0);
 
 	*nr_to_scan -= scanned;
 
@@ -4539,10 +4537,6 @@ static long get_nr_to_scan(struct lruvec *lruvec, struct scan_control *sc, int s
 	struct mem_cgroup *memcg = lruvec_memcg(lruvec);
 	DEFINE_MAX_SEQ(lruvec);
 	DEFINE_MIN_SEQ(lruvec);
-	/* only proceed with memcgs at the front of the priority queue */
-	if (!cgroup_reclaim(sc) && atomic_read(&lrugen->priority) != DEF_PRIORITY)
-		return 0;
-
 
 	for (type = !swappiness; type < ANON_AND_FILE; type++) {
 		unsigned long seq;
@@ -4623,10 +4617,6 @@ static void lru_gen_shrink_lruvec(struct lruvec *lruvec, struct scan_control *sc
 }
 
 /******************************************************************************
-		struct lrugen *lrugen = &lruvec->evictable;
-		if (memcg && !mem_cgroup_is_root(memcg) && sc->priority != DEF_PRIORITY)
-			atomic_add_unless(&lrugen->priority, 1, DEF_PRIORITY);
-
  *                          state change
  ******************************************************************************/
 
@@ -5029,7 +5019,7 @@ static int lru_gen_seq_show(struct seq_file *m, void *v)
 		seq_printf(m, "memcg %5hu %s\n", mem_cgroup_id(memcg), path);
 	}
 
-	seq_printf(m, " node %5d %10d\n", nid, atomic_read(&lrugen->priority));
+	seq_printf(m, " node %5d\n", nid);
 
 	if (!full)
 		seq = min(min_seq[0], min_seq[1]);
@@ -5261,8 +5251,6 @@ void lru_gen_init_lrugen(struct lruvec *lruvec)
 	lrugen->enabled[0] = lru_gen_enabled() && lru_gen_nr_swapfiles;
 	lrugen->enabled[1] = lru_gen_enabled();
 
-	atomic_set(&lrugen->priority, DEF_PRIORITY);
-
 	for (i = 0; i <= MIN_NR_GENS + 1; i++)
 		lrugen->timestamps[i] = jiffies;
 
-- 
2.33.0.113.g6c40894d24

