From c31b7ccfdac57bfb92c6eb6d49b9c078e25674f4 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Tue, 30 Mar 2021 10:21:02 +0800
Subject: [PATCH 123/148] sched/alt: Remove USER_PRIO, TASK_USER_PRIO and
 MAX_USER_PRIO and MAX_USER_RT_PRIO

9d061ba6bc17 sched: Remove USER_PRIO, TASK_USER_PRIO and MAX_USER_PRIO
ae18ad281e82 sched: Remove MAX_USER_RT_PRIO
---
 init/init_task.c        | 4 ++--
 kernel/sched/alt_core.c | 6 +++---
 kernel/sched/pds_imp.h  | 8 +++++---
 3 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/init/init_task.c b/init/init_task.c
index 06bff1bfcaec..412b06506b84 100644
--- a/init/init_task.c
+++ b/init/init_task.c
@@ -81,9 +81,9 @@ struct task_struct init_task
 	.normal_prio	= DEFAULT_PRIO + MAX_PRIORITY_ADJ,
 #endif
 #ifdef CONFIG_SCHED_PDS
-	.prio		= MAX_USER_RT_PRIO,
+	.prio		= MAX_RT_PRIO,
 	.static_prio	= DEFAULT_PRIO,
-	.normal_prio	= MAX_USER_RT_PRIO,
+	.normal_prio	= MAX_RT_PRIO,
 #else
 	.prio		= MAX_PRIO - 20,
 	.static_prio	= MAX_PRIO - 20,
diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 847a1baff835..426af5230831 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -4697,11 +4697,11 @@ static int __sched_setscheduler(struct task_struct *p,
 
 	/*
 	 * Valid priorities for SCHED_FIFO and SCHED_RR are
-	 * 1..MAX_USER_RT_PRIO-1, valid priority for SCHED_NORMAL and
+	 * 1..MAX_RT_PRIO-1, valid priority for SCHED_NORMAL and
 	 * SCHED_BATCH and SCHED_IDLE is 0.
 	 */
 	if (attr->sched_priority < 0 ||
-	    (p->mm && attr->sched_priority > MAX_USER_RT_PRIO - 1) ||
+	    (p->mm && attr->sched_priority > MAX_RT_PRIO - 1) ||
 	    (!p->mm && attr->sched_priority > MAX_RT_PRIO - 1))
 		return -EINVAL;
 	if ((SCHED_RR == policy || SCHED_FIFO == policy) !=
@@ -5614,7 +5614,7 @@ SYSCALL_DEFINE1(sched_get_priority_max, int, policy)
 	switch (policy) {
 	case SCHED_FIFO:
 	case SCHED_RR:
-		ret = MAX_USER_RT_PRIO-1;
+		ret = MAX_RT_PRIO - 1;
 		break;
 	case SCHED_NORMAL:
 	case SCHED_BATCH:
diff --git a/kernel/sched/pds_imp.h b/kernel/sched/pds_imp.h
index b1ad3d0b0430..0f068a98db87 100644
--- a/kernel/sched/pds_imp.h
+++ b/kernel/sched/pds_imp.h
@@ -38,7 +38,7 @@ static inline int normal_prio(struct task_struct *p)
 	if (task_has_rt_policy(p))
 		return MAX_RT_PRIO - 1 - p->rt_priority;
 
-	return MAX_USER_RT_PRIO;
+	return MAX_RT_PRIO;
 }
 
 static inline int
@@ -76,7 +76,8 @@ static inline void time_slice_expired(struct task_struct *p, struct rq *rq)
 	p->time_slice = sched_timeslice_ns;
 
 	if (p->prio >= MAX_RT_PRIO)
-		p->deadline = rq->clock + user_prio2deadline[TASK_USER_PRIO(p)];
+		p->deadline = rq->clock +
+			user_prio2deadline[p->static_prio - MAX_RT_PRIO];
 	update_task_priodl(p);
 
 	if (SCHED_FIFO != p->policy && task_on_rq_queued(p))
@@ -237,7 +238,8 @@ static void sched_task_fork(struct task_struct *p, struct rq *rq)
 {
 	p->sl_level = pds_skiplist_random_level(p);
 	if (p->prio >= MAX_RT_PRIO)
-		p->deadline = rq->clock + user_prio2deadline[TASK_USER_PRIO(p)];
+		p->deadline = rq->clock +
+			user_prio2deadline[p->static_prio - MAX_RT_PRIO];
 	update_task_priodl(p);
 }
 
-- 
2.32.0.93.g670b81a890

