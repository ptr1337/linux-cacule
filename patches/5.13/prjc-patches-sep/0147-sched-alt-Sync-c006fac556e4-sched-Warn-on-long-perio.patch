From 7ba167de0fd9c5277017091edf32a71b48ab2384 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Wed, 9 Jun 2021 09:48:48 +0000
Subject: [PATCH 147/148] sched/alt: [Sync] c006fac556e4 sched: Warn on long
 periods of pending need_resched

---
 kernel/sched/alt_core.c  | 74 +++++++++++++++++++++++++++++++++++++++-
 kernel/sched/alt_sched.h |  6 ++++
 kernel/sched/debug.c     |  2 +-
 3 files changed, 80 insertions(+), 2 deletions(-)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index cf4ad8c4203d..345a2b606b65 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -52,6 +52,21 @@
  */
 EXPORT_TRACEPOINT_SYMBOL_GPL(pelt_irq_tp);
 
+#ifdef CONFIG_SCHED_DEBUG
+#define sched_feat(x)	(1)
+/*
+ * Print a warning if need_resched is set for the given duration (if
+ * LATENCY_WARN is enabled).
+ *
+ * If sysctl_resched_latency_warn_once is set, only one warning will be shown
+ * per boot.
+ */
+__read_mostly int sysctl_resched_latency_warn_ms = 100;
+__read_mostly int sysctl_resched_latency_warn_once = 1;
+#else
+#define sched_feat(x)	(0)
+#endif /* CONFIG_SCHED_DEBUG */
+
 #define ALT_SCHED_VERSION "v5.12-r1"
 
 /* rt_prio(prio) defined in include/linux/sched/rt.h */
@@ -3323,6 +3338,55 @@ static inline void scheduler_task_tick(struct rq *rq)
 	set_preempt_need_resched();
 }
 
+#ifdef CONFIG_SCHED_DEBUG
+static u64 cpu_resched_latency(struct rq *rq)
+{
+	int latency_warn_ms = READ_ONCE(sysctl_resched_latency_warn_ms);
+	u64 resched_latency, now = rq_clock(rq);
+	static bool warned_once;
+
+	if (sysctl_resched_latency_warn_once && warned_once)
+		return 0;
+
+	if (!need_resched() || !latency_warn_ms)
+		return 0;
+
+	if (system_state == SYSTEM_BOOTING)
+		return 0;
+
+	if (!rq->last_seen_need_resched_ns) {
+		rq->last_seen_need_resched_ns = now;
+		rq->ticks_without_resched = 0;
+		return 0;
+	}
+
+	rq->ticks_without_resched++;
+	resched_latency = now - rq->last_seen_need_resched_ns;
+	if (resched_latency <= latency_warn_ms * NSEC_PER_MSEC)
+		return 0;
+
+	warned_once = true;
+
+	return resched_latency;
+}
+
+static int __init setup_resched_latency_warn_ms(char *str)
+{
+	long val;
+
+	if ((kstrtol(str, 0, &val))) {
+		pr_warn("Unable to set resched_latency_warn_ms\n");
+		return 1;
+	}
+
+	sysctl_resched_latency_warn_ms = val;
+	return 1;
+}
+__setup("resched_latency_warn_ms=", setup_resched_latency_warn_ms);
+#else
+static inline u64 cpu_resched_latency(struct rq *rq) { return 0; }
+#endif /* CONFIG_SCHED_DEBUG */
+
 /*
  * This function gets called by the timer code, with HZ frequency.
  * We call it with interrupts disabled.
@@ -3331,6 +3395,7 @@ void scheduler_tick(void)
 {
 	int cpu __maybe_unused = smp_processor_id();
 	struct rq *rq = cpu_rq(cpu);
+	u64 resched_latency;
 
 	arch_scale_freq_tick();
 	sched_clock_tick();
@@ -3339,11 +3404,16 @@ void scheduler_tick(void)
 	update_rq_clock(rq);
 
 	scheduler_task_tick(rq);
+	if (sched_feat(LATENCY_WARN))
+		resched_latency = cpu_resched_latency(rq);
 	calc_global_load_tick(rq);
 
 	rq->last_tick = rq->clock;
 	raw_spin_unlock(&rq->lock);
 
+	if (sched_feat(LATENCY_WARN) && resched_latency)
+		resched_latency_warn(cpu, resched_latency);
+
 	perf_event_task_tick();
 }
 
@@ -4018,7 +4088,9 @@ static void __sched notrace __schedule(bool preempt)
 	next = choose_next_task(rq, cpu, prev);
 	clear_tsk_need_resched(prev);
 	clear_preempt_need_resched();
-
+#ifdef CONFIG_SCHED_DEBUG
+	rq->last_seen_need_resched_ns = 0;
+#endif
 
 	if (likely(prev != next)) {
 		next->last_ran = rq->clock_task;
diff --git a/kernel/sched/alt_sched.h b/kernel/sched/alt_sched.h
index cf9ed4480d86..ac11555ba4f1 100644
--- a/kernel/sched/alt_sched.h
+++ b/kernel/sched/alt_sched.h
@@ -58,6 +58,7 @@
 
 #ifdef CONFIG_SCHED_DEBUG
 # define SCHED_WARN_ON(x)	WARN_ONCE(x, #x)
+extern void resched_latency_warn(int cpu, u64 latency);
 #else
 # define SCHED_WARN_ON(x)	({ (void)(x), 0; })
 static inline void resched_latency_warn(int cpu, u64 latency) {}
@@ -155,6 +156,11 @@ struct rq {
 
 	atomic_t nr_iowait;
 
+#ifdef CONFIG_SCHED_DEBUG
+	u64 last_seen_need_resched_ns;
+	int ticks_without_resched;
+#endif
+
 #ifdef CONFIG_MEMBARRIER
 	int membarrier_state;
 #endif
diff --git a/kernel/sched/debug.c b/kernel/sched/debug.c
index 8361d4a55fd6..105433c36b5f 100644
--- a/kernel/sched/debug.c
+++ b/kernel/sched/debug.c
@@ -1056,6 +1056,7 @@ void proc_sched_set_task(struct task_struct *p)
 	memset(&p->se.statistics, 0, sizeof(p->se.statistics));
 #endif
 }
+#endif /* !CONFIG_SCHED_ALT */
 
 void resched_latency_warn(int cpu, u64 latency)
 {
@@ -1066,4 +1067,3 @@ void resched_latency_warn(int cpu, u64 latency)
 	     "without schedule\n",
 	     cpu, latency, cpu_rq(cpu)->ticks_without_resched);
 }
-#endif /* !CONFIG_SCHED_ALT */
-- 
2.32.0.93.g670b81a890

