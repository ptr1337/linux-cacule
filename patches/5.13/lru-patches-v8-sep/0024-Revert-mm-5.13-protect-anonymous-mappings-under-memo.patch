From df97c1df7fac0cb3418a9540dddac729946b8a38 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Sun, 22 Aug 2021 19:23:41 +0200
Subject: [PATCH 24/26] Revert "mm-5.13: protect anonymous mappings under
 memory pressure"

This reverts commit 05a4088969425dfe55fea69f90bf753a3295860c.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 Documentation/admin-guide/sysctl/vm.rst | 27 ------------------
 kernel/sysctl.c                         | 35 -----------------------
 mm/Kconfig                              | 36 ------------------------
 mm/vmscan.c                             | 37 +------------------------
 4 files changed, 1 insertion(+), 134 deletions(-)

diff --git a/Documentation/admin-guide/sysctl/vm.rst b/Documentation/admin-guide/sysctl/vm.rst
index 41794711b..16826b31d 100644
--- a/Documentation/admin-guide/sysctl/vm.rst
+++ b/Documentation/admin-guide/sysctl/vm.rst
@@ -71,8 +71,6 @@ Currently, these files are in /proc/sys/vm:
 - swappiness
 - unevictable_file_kbytes_low
 - unevictable_file_kbytes_min
-- unevictable_anon_kbytes_low
-- unevictable_anon_kbytes_min
 - unprivileged_userfaultfd
 - user_reserve_kbytes
 - vfs_cache_pressure
@@ -915,31 +913,6 @@ Setting it to 0 effectively disables this feature.
 The default value is 128 MiB.
 
 
-unevictable_anon_kbytes_low
-===========================
-
-Keep some anonymous pages still mapped under memory pressure to avoid
-potential stalls that may occur due to swapping.
-This implements soft swapping throttling, and some anonymous pages can
-still be swapped out.
-
-Setting it to 0 effectively disables this feature.
-
-The default value is 64 MiB.
-
-
-unevictable_anon_kbytes_min
-===========================
-
-Keep all anonymous pages still mapped under memory pressure to avoid
-potential stalls that may occur due to swapping.
-This is the hard limit.
-
-Setting it to 0 effectively disables this feature.
-
-The default value is 32 MiB.
-
-
 user_reserve_kbytes
 ===================
 
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index 1daa5a15d..6967ef721 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -127,22 +127,6 @@ unsigned long sysctl_unevictable_file_kbytes_min __read_mostly =
 	CONFIG_UNEVICTABLE_FILE_KBYTES_MIN;
 #endif
 
-#if defined(CONFIG_UNEVICTABLE_ANON)
-#if CONFIG_UNEVICTABLE_ANON_KBYTES_LOW < 0
-#error "CONFIG_UNEVICTABLE_ANON_KBYTES_LOW should be >= 0"
-#endif
-#if CONFIG_UNEVICTABLE_ANON_KBYTES_MIN < 0
-#error "CONFIG_UNEVICTABLE_ANON_KBYTES_MIN should be >= 0"
-#endif
-#if CONFIG_UNEVICTABLE_ANON_KBYTES_LOW < CONFIG_UNEVICTABLE_ANON_KBYTES_MIN
-#error "CONFIG_UNEVICTABLE_ANON_KBYTES_LOW should be >= CONFIG_UNEVICTABLE_ANON_KBYTES_MIN"
-#endif
-unsigned long sysctl_unevictable_anon_kbytes_low __read_mostly =
-	CONFIG_UNEVICTABLE_ANON_KBYTES_LOW;
-unsigned long sysctl_unevictable_anon_kbytes_min __read_mostly =
-	CONFIG_UNEVICTABLE_ANON_KBYTES_MIN;
-#endif
-
 static int __maybe_unused neg_one = -1;
 static int __maybe_unused two = 2;
 static int __maybe_unused four = 4;
@@ -3136,25 +3120,6 @@ static struct ctl_table vm_table[] = {
 		.extra1		= &zero_ul,
 		.extra2		= &sysctl_unevictable_file_kbytes_low,
 	},
-#endif
-#if defined(CONFIG_UNEVICTABLE_ANON)
-	{
-		.procname	= "unevictable_anon_kbytes_low",
-		.data		= &sysctl_unevictable_anon_kbytes_low,
-		.maxlen		= sizeof(sysctl_unevictable_anon_kbytes_low),
-		.mode		= 0644,
-		.proc_handler	= proc_doulongvec_minmax,
-		.extra1		= &sysctl_unevictable_anon_kbytes_min,
-	},
-	{
-		.procname	= "unevictable_anon_kbytes_min",
-		.data		= &sysctl_unevictable_anon_kbytes_min,
-		.maxlen		= sizeof(sysctl_unevictable_anon_kbytes_min),
-		.mode		= 0644,
-		.proc_handler	= proc_doulongvec_minmax,
-		.extra1		= &zero_ul,
-		.extra2		= &sysctl_unevictable_anon_kbytes_low,
-	},
 #endif
 	{
 		.procname	= "user_reserve_kbytes",
diff --git a/mm/Kconfig b/mm/Kconfig
index bd0ba1e59..251c52eda 100644
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@ -99,42 +99,6 @@ config UNEVICTABLE_FILE_KBYTES_MIN
 	depends on UNEVICTABLE_FILE
 	default "131072"
 
-config UNEVICTABLE_ANON
-	bool "Keep some anonymous pages under memory pressure"
-	depends on SYSCTL
-	def_bool y
-	help
-	  Keep some anonymous pages still mapped under memory pressure
-	  to avoid potential stalls that may occur due to swapping.
-
-	  The UNEVICTABLE_ANON_KBYTES_LOW value defines a threshold
-	  to throttle swapping of anonymous pages.
-	  The vm.unevictable_anon_kbytes_low sysctl knob is used to
-	  change the amount in the runtime (setting it to 0
-	  effectively disables this feature).
-
-	  Recommended value: 65536 for a typical desktop workload.
-
-	  The UNEVICTABLE_ANON_KBYTES_MIN value sets the amount of
-	  pages to keep as a hard limit.
-	  The vm.unevictable_anon_kbytes_min sysctl knob is used to
-	  change the amount in the runtime (setting it to 0
-	  effectively disables this feature).
-
-	  Recommended value: 32768 for a typical desktop workload.
-
-	  See also: Documentation/admin-guide/sysctl/vm.rst
-
-config UNEVICTABLE_ANON_KBYTES_LOW
-	int "Default value for vm.unevictable_anon_kbytes_low"
-	depends on UNEVICTABLE_ANON
-	default "65536"
-
-config UNEVICTABLE_ANON_KBYTES_MIN
-	int "Default value for vm.unevictable_anon_kbytes_min"
-	depends on UNEVICTABLE_ANON
-	default "32768"
-
 config DISCONTIGMEM
 	def_bool y
 	depends on (!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE) || DISCONTIGMEM_MANUAL
diff --git a/mm/vmscan.c b/mm/vmscan.c
index 2c771e8c8..bf99c354f 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -131,14 +131,6 @@ struct scan_control {
 	/* The file pages on the current node are dangerously low */
 	unsigned int file_is_tiny:1;
 
-#if defined(CONFIG_UNEVICTABLE_ANON)
-	/* The anonymous pages on the current node are low */
-	unsigned int anon_is_low:1;
-
-	/* The anonymous pages on the current node are minimal */
-	unsigned int anon_is_min:1;
-#endif
-
 	/* Allocation order */
 	s8 order;
 
@@ -190,11 +182,6 @@ extern unsigned long sysctl_unevictable_file_kbytes_low;
 extern unsigned long sysctl_unevictable_file_kbytes_min;
 #endif
 
-#if defined(CONFIG_UNEVICTABLE_ANON)
-extern unsigned long sysctl_unevictable_anon_kbytes_low;
-extern unsigned long sysctl_unevictable_anon_kbytes_min;
-#endif
-
 /*
  * From 0 .. 200.  Higher means more swappy.
  */
@@ -2459,7 +2446,7 @@ enum scan_balance {
 	SCAN_FILE,
 };
 
-#if defined(CONFIG_UNEVICTABLE_FILE) || defined(CONFIG_UNEVICTABLE_ANON)
+#if defined(CONFIG_UNEVICTABLE_FILE)
 #define K(x) ((x) << (PAGE_SHIFT - 10))
 #endif
 
@@ -2536,9 +2523,6 @@ static void prepare_scan_count(pg_data_t *pgdat, struct scan_control *sc)
 		unsigned long free, anon;
 #if defined(CONFIG_UNEVICTABLE_FILE)
 		unsigned long reclaimable_file, clean_file, dirty_file;
-#endif
-#if defined(CONFIG_UNEVICTABLE_ANON)
-		unsigned long reclaimable_anon;
 #endif
 		int z;
 
@@ -2549,11 +2533,6 @@ static void prepare_scan_count(pg_data_t *pgdat, struct scan_control *sc)
 		reclaimable_file = file + node_page_state(pgdat, NR_ISOLATED_FILE);
 		dirty_file = node_page_state(pgdat, NR_FILE_DIRTY);
 #endif
-#if defined(CONFIG_UNEVICTABLE_ANON)
-		reclaimable_anon = node_page_state(pgdat, NR_ACTIVE_ANON) +
-				   node_page_state(pgdat, NR_INACTIVE_ANON) +
-				   node_page_state(pgdat, NR_ISOLATED_ANON);
-#endif
 
 		for (z = 0; z < MAX_NR_ZONES; z++) {
 			struct zone *zone = &pgdat->node_zones[z];
@@ -2594,12 +2573,6 @@ static void prepare_scan_count(pg_data_t *pgdat, struct scan_control *sc)
 			          K(clean_file) > sysctl_unevictable_file_kbytes_min;
 
 		sc->file_is_min = K(clean_file) <= sysctl_unevictable_file_kbytes_min;
-#endif
-#if defined(CONFIG_UNEVICTABLE_ANON)
-		sc->anon_is_low = K(reclaimable_anon) < sysctl_unevictable_anon_kbytes_low &&
-				  K(reclaimable_anon) > sysctl_unevictable_anon_kbytes_min;
-
-		sc->anon_is_min = K(reclaimable_anon) <= sysctl_unevictable_anon_kbytes_min;
 #endif
 	}
 }
@@ -2805,14 +2778,6 @@ static void get_scan_count(struct lruvec *lruvec, struct scan_control *sc,
 				scan = 0;
 		}
 #endif
-#if defined(CONFIG_UNEVICTABLE_ANON)
-		if (!file && scan) {
-			if (sc->anon_is_low)
-				scan = min(scan, SWAP_CLUSTER_MAX >> sc->priority);
-			else if (sc->anon_is_min)
-				scan = 0;
-		}
-#endif
 
 		nr[lru] = scan;
 	}
-- 
2.33.0

