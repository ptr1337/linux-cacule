From c5cb2baca3061e984804bed58bbeb7140b0214c3 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Thu, 22 Jul 2021 15:01:33 +0200
Subject: [PATCH 19/22] Revert "mm: fix priority queue in multigenerational lru
 v2"

This reverts commit ea2907d5561a7fea56d39e1115f4b430d6f64fbc.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 include/linux/mmzone.h |  2 --
 mm/vmscan.c            | 10 ++--------
 2 files changed, 2 insertions(+), 10 deletions(-)

diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
index 77866d0..ded72f4 100644
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -377,8 +377,6 @@ struct lrugen {
 	/* arithmetic mean weighted by geometric series 1/2, 1/4, ... */
 	unsigned long avg_total[ANON_AND_FILE][MAX_NR_TIERS];
 	unsigned long avg_refaulted[ANON_AND_FILE][MAX_NR_TIERS];
-	/* the priority queue when choosing reclaimable memcgs */
-	atomic_t priority;
 	/* whether the multigenerational lru is enabled */
 	bool enabled[ANON_AND_FILE];
 };
diff --git a/mm/vmscan.c b/mm/vmscan.c
index c9a4a19..0cc6e59 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -4223,7 +4223,7 @@ static int scan_pages(struct lruvec *lruvec, struct scan_control *sc, long *nr_t
 	}
 
 	success = try_inc_min_seq(lruvec, type);
-	if (memcg && !mem_cgroup_is_root(memcg) && !cgroup_reclaim(sc) && success && type)
+	if (memcg && !mem_cgroup_is_root(memcg) && !cgroup_reclaim(sc) && success && file)
 		atomic_add_unless(&lrugen->priority, -1, 0);
 
 	item = current_is_kswapd() ? PGSCAN_KSWAPD : PGSCAN_DIRECT;
@@ -4548,15 +4548,11 @@ static void lru_gen_age_node(struct pglist_data *pgdat, struct scan_control *sc)
 	memcg = mem_cgroup_iter(NULL, NULL, NULL);
 	do {
 		struct lruvec *lruvec = mem_cgroup_lruvec(memcg, pgdat);
-		struct lrugen *lrugen = &lruvec->evictable;
 
 		if (!mem_cgroup_below_min(memcg) &&
 		    (!mem_cgroup_below_low(memcg) || sc->memcg_low_reclaim))
 			try_walk_mm_list(lruvec, sc);
 
-		if (memcg && !mem_cgroup_is_root(memcg) && sc->priority != DEF_PRIORITY)
-			atomic_add_unless(&lrugen->priority, 1, DEF_PRIORITY);
-
 		cond_resched();
 	} while ((memcg = mem_cgroup_iter(NULL, memcg, NULL)));
 }
@@ -4961,7 +4957,7 @@ static int lru_gen_seq_show(struct seq_file *m, void *v)
 		seq_printf(m, "memcg %5hu %s\n", mem_cgroup_id(memcg), (char *)m->private);
 	}
 
-	seq_printf(m, " node %5d %10d\n", nid, atomic_read(&lrugen->priority));
+	seq_printf(m, " node %5d\n", nid);
 
 	seq = full ? (max_seq < MAX_NR_GENS ? 0 : max_seq - MAX_NR_GENS + 1) :
 		     min(min_seq[0], min_seq[1]);
@@ -5187,8 +5183,6 @@ void lru_gen_init_lruvec(struct lruvec *lruvec)
 	lrugen->enabled[0] = lru_gen_enabled() && lru_gen_nr_swapfiles;
 	lrugen->enabled[1] = lru_gen_enabled();
 
-	atomic_set(&lrugen->priority, DEF_PRIORITY);
-
 	for (i = 0; i <= MIN_NR_GENS + 1; i++)
 		lrugen->timestamps[i] = jiffies;
 
-- 
2.32.0.452.g940fe202ad

