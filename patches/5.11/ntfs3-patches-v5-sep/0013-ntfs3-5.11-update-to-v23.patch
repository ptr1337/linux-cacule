From f4aec27e2085ceee033e8a88c07c712a95e43921 Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Tue, 16 Mar 2021 09:01:09 +0100
Subject: [PATCH 13/15] ntfs3-5.11: update to v23

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 fs/ntfs3/attrib.c   |  4 +---
 fs/ntfs3/attrlist.c | 27 +++++++++++++-------------
 fs/ntfs3/bitmap.c   | 46 ++++++++++++++++++++++++++++++++++-----------
 fs/ntfs3/index.c    | 12 ++++--------
 fs/ntfs3/ntfs_fs.h  |  6 ++++--
 fs/ntfs3/run.c      |  3 ++-
 fs/ntfs3/super.c    | 17 ++++++++++++-----
 fs/ntfs3/upcase.c   | 11 ++++++++++-
 8 files changed, 81 insertions(+), 45 deletions(-)

diff --git a/fs/ntfs3/attrib.c b/fs/ntfs3/attrib.c
index edd9485fe..188c8b280 100644
--- a/fs/ntfs3/attrib.c
+++ b/fs/ntfs3/attrib.c
@@ -831,7 +831,7 @@ int attr_data_get_block(struct ntfs_inode *ni, CLST vcn, CLST clen, CLST *lcn,
 	struct ATTR_LIST_ENTRY *le, *le_b;
 	struct mft_inode *mi, *mi_b;
 	CLST hint, svcn, to_alloc, evcn1, next_svcn, asize, end;
-	u64 new_size, total_size;
+	u64 total_size;
 	u32 clst_per_frame;
 	bool ok;
 
@@ -855,7 +855,6 @@ int attr_data_get_block(struct ntfs_inode *ni, CLST vcn, CLST clen, CLST *lcn,
 
 	sbi = ni->mi.sbi;
 	cluster_bits = sbi->cluster_bits;
-	new_size = ((u64)vcn + clen) << cluster_bits;
 
 	ni_lock(ni);
 	down_write(&ni->file.run_lock);
@@ -923,7 +922,6 @@ int attr_data_get_block(struct ntfs_inode *ni, CLST vcn, CLST clen, CLST *lcn,
 
 		if (ok && clen > *len) {
 			clen = *len;
-			new_size = ((u64)vcn + clen) << cluster_bits;
 			to_alloc = (clen + clst_per_frame - 1) &
 				   ~(clst_per_frame - 1);
 		}
diff --git a/fs/ntfs3/attrlist.c b/fs/ntfs3/attrlist.c
index 04a30b58c..ea561361b 100644
--- a/fs/ntfs3/attrlist.c
+++ b/fs/ntfs3/attrlist.c
@@ -101,8 +101,8 @@ int ntfs_load_attr_list(struct ntfs_inode *ni, struct ATTRIB *attr)
 /*
  * al_enumerate
  *
- * Returns the next list le
- * if le is NULL then returns the first le
+ * Returns the next list 'le'
+ * if 'le' is NULL then returns the first 'le'
  */
 struct ATTR_LIST_ENTRY *al_enumerate(struct ntfs_inode *ni,
 				     struct ATTR_LIST_ENTRY *le)
@@ -115,7 +115,7 @@ struct ATTR_LIST_ENTRY *al_enumerate(struct ntfs_inode *ni,
 	} else {
 		sz = le16_to_cpu(le->size);
 		if (sz < sizeof(struct ATTR_LIST_ENTRY)) {
-			/* Impossible 'cause we should not return such le */
+			/* Impossible 'cause we should not return such 'le' */
 			return NULL;
 		}
 		le = Add2Ptr(le, sz);
@@ -130,7 +130,7 @@ struct ATTR_LIST_ENTRY *al_enumerate(struct ntfs_inode *ni,
 
 	sz = le16_to_cpu(le->size);
 
-	/* Check le for errors */
+	/* Check 'le' for errors */
 	if (sz < sizeof(struct ATTR_LIST_ENTRY) ||
 	    off + sz > ni->attr_list.size ||
 	    sz < le->name_off + le->name_len * sizeof(short)) {
@@ -143,7 +143,7 @@ struct ATTR_LIST_ENTRY *al_enumerate(struct ntfs_inode *ni,
 /*
  * al_find_le
  *
- * finds the first le in the list which matches type, name and vcn
+ * finds the first 'le' in the list which matches type, name and vcn
  * Returns NULL if not found
  */
 struct ATTR_LIST_ENTRY *al_find_le(struct ntfs_inode *ni,
@@ -159,7 +159,7 @@ struct ATTR_LIST_ENTRY *al_find_le(struct ntfs_inode *ni,
 /*
  * al_find_ex
  *
- * finds the first le in the list which matches type, name and vcn
+ * finds the first 'le' in the list which matches type, name and vcn
  * Returns NULL if not found
  */
 struct ATTR_LIST_ENTRY *al_find_ex(struct ntfs_inode *ni,
@@ -277,15 +277,14 @@ int al_add_le(struct ntfs_inode *ni, enum ATTR_TYPE type, const __le16 *name,
 	typeof(ni->attr_list) *al = &ni->attr_list;
 
 	/*
-	 * Compute the size of the new le and the new length of the
-	 * list with al le added.
+	 * Compute the size of the new 'le'
 	 */
 	sz = le_size(name_len);
 	new_size = al->size + sz;
 	asize = al_aligned(al->size);
 	new_asize = al_aligned(new_size);
 
-	/* Scan forward to the point at which the new le should be inserted. */
+	/* Scan forward to the point at which the new 'le' should be inserted. */
 	le = al_find_le_to_insert(ni, type, name, name_len, svcn);
 	off = PtrOffset(al->le, le);
 
@@ -349,7 +348,7 @@ bool al_remove_le(struct ntfs_inode *ni, struct ATTR_LIST_ENTRY *le)
 	if (!al_is_valid_le(ni, le))
 		return false;
 
-	/* Save on stack the size of le */
+	/* Save on stack the size of 'le' */
 	size = le16_to_cpu(le->size);
 	off = PtrOffset(al->le, le);
 
@@ -364,7 +363,7 @@ bool al_remove_le(struct ntfs_inode *ni, struct ATTR_LIST_ENTRY *le)
 /*
  * al_delete_le
  *
- * deletes from the list the first le which matches its parameters.
+ * deletes from the list the first 'le' which matches its parameters.
  */
 bool al_delete_le(struct ntfs_inode *ni, enum ATTR_TYPE type, CLST vcn,
 		  const __le16 *name, size_t name_len,
@@ -375,7 +374,7 @@ bool al_delete_le(struct ntfs_inode *ni, enum ATTR_TYPE type, CLST vcn,
 	size_t off;
 	typeof(ni->attr_list) *al = &ni->attr_list;
 
-	/* Scan forward to the first le that matches the input */
+	/* Scan forward to the first 'le' that matches the input */
 	le = al_find_ex(ni, NULL, type, name, name_len, &vcn);
 	if (!le)
 		return false;
@@ -406,9 +405,9 @@ bool al_delete_le(struct ntfs_inode *ni, enum ATTR_TYPE type, CLST vcn,
 		goto next;
 	}
 
-	/* Save on stack the size of le */
+	/* Save on stack the size of 'le' */
 	size = le16_to_cpu(le->size);
-	/* Delete the le. */
+	/* Delete 'le'. */
 	memmove(le, Add2Ptr(le, size), al->size - (off + size));
 
 	al->size -= size;
diff --git a/fs/ntfs3/bitmap.c b/fs/ntfs3/bitmap.c
index 8331cd15c..32aab0031 100644
--- a/fs/ntfs3/bitmap.c
+++ b/fs/ntfs3/bitmap.c
@@ -3,6 +3,11 @@
  *
  * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
+ * This code builds two trees of free clusters extents.
+ * Trees are sorted by start of extent and by length of extent.
+ * NTFS_MAX_WND_EXTENTS defines the maximum number of elements in trees.
+ * In extreme case code reads on-disk bitmap to find free clusters
+ *
  */
 
 #include <linux/blkdev.h>
@@ -14,6 +19,11 @@
 #include "ntfs.h"
 #include "ntfs_fs.h"
 
+/*
+ * Maximum number of extents in tree.
+ */
+#define NTFS_MAX_WND_EXTENTS (32u * 1024u)
+
 struct rb_node_key {
 	struct rb_node node;
 	size_t key;
@@ -31,6 +41,21 @@ static int wnd_rescan(struct wnd_bitmap *wnd);
 static struct buffer_head *wnd_map(struct wnd_bitmap *wnd, size_t iw);
 static bool wnd_is_free_hlp(struct wnd_bitmap *wnd, size_t bit, size_t bits);
 
+static struct kmem_cache *ntfs_enode_cachep;
+
+int __init ntfs3_init_bitmap(void)
+{
+	ntfs_enode_cachep =
+		kmem_cache_create("ntfs3_enode_cache", sizeof(struct e_node), 0,
+				  SLAB_RECLAIM_ACCOUNT, NULL);
+	return ntfs_enode_cachep ? 0 : -ENOMEM;
+}
+
+void ntfs3_exit_bitmap(void)
+{
+	kmem_cache_destroy(ntfs_enode_cachep);
+}
+
 static inline u32 wnd_bits(const struct wnd_bitmap *wnd, size_t i)
 {
 	return i + 1 == wnd->nwnd ? wnd->bits_last : wnd->sb->s_blocksize * 8;
@@ -102,7 +127,7 @@ static size_t wnd_scan(const ulong *buf, size_t wbit, u32 wpos, u32 wend,
 /*
  * wnd_close
  *
- *
+ * Frees all resources
  */
 void wnd_close(struct wnd_bitmap *wnd)
 {
@@ -116,7 +141,8 @@ void wnd_close(struct wnd_bitmap *wnd)
 	while (node) {
 		next = rb_next(node);
 		rb_erase(node, &wnd->start_tree);
-		ntfs_free(rb_entry(node, struct e_node, start.node));
+		kmem_cache_free(ntfs_enode_cachep,
+				rb_entry(node, struct e_node, start.node));
 		node = next;
 	}
 }
@@ -181,7 +207,7 @@ static inline bool rb_insert_count(struct rb_root *root, struct e_node *e)
 /*
  * inline bool rb_insert_start
  *
- * Helper function to insert special kind of 'count' tree
+ * Helper function to insert special kind of 'start' tree
  */
 static inline bool rb_insert_start(struct rb_root *root, struct e_node *e)
 {
@@ -210,8 +236,6 @@ static inline bool rb_insert_start(struct rb_root *root, struct e_node *e)
 	return true;
 }
 
-#define NTFS_MAX_WND_EXTENTS (32u * 1024u)
-
 /*
  * wnd_add_free_ext
  *
@@ -271,7 +295,7 @@ static void wnd_add_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len,
 			if (!e0)
 				e0 = e;
 			else
-				ntfs_free(e);
+				kmem_cache_free(ntfs_enode_cachep, e);
 		}
 
 		if (wnd->uptodated != 1) {
@@ -301,7 +325,7 @@ static void wnd_add_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len,
 	/* Insert new fragment */
 	if (wnd->count >= NTFS_MAX_WND_EXTENTS) {
 		if (e0)
-			ntfs_free(e0);
+			kmem_cache_free(ntfs_enode_cachep, e0);
 
 		wnd->uptodated = -1;
 
@@ -325,7 +349,7 @@ static void wnd_add_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len,
 		rb_erase(&e->count.node, &wnd->count_tree);
 		wnd->count -= 1;
 	} else {
-		e = e0 ? e0 : ntfs_malloc(sizeof(struct e_node));
+		e = e0 ? e0 : kmem_cache_alloc(ntfs_enode_cachep, GFP_ATOMIC);
 		if (!e) {
 			wnd->uptodated = -1;
 			goto out;
@@ -404,7 +428,7 @@ static void wnd_remove_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len)
 			rb_erase(&e3->start.node, &wnd->start_tree);
 			rb_erase(&e3->count.node, &wnd->count_tree);
 			wnd->count -= 1;
-			ntfs_free(e3);
+			kmem_cache_free(ntfs_enode_cachep, e3);
 		}
 		if (!bmax)
 			return;
@@ -440,7 +464,7 @@ static void wnd_remove_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len)
 			rb_erase(&e->start.node, &wnd->start_tree);
 			rb_erase(&e->count.node, &wnd->count_tree);
 			wnd->count -= 1;
-			ntfs_free(e);
+			kmem_cache_free(ntfs_enode_cachep, e);
 		}
 		goto out;
 	}
@@ -465,7 +489,7 @@ static void wnd_remove_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len)
 		rb_erase(&e->count.node, &wnd->count_tree);
 		wnd->count -= 1;
 	} else {
-		e = ntfs_malloc(sizeof(struct e_node));
+		e = kmem_cache_alloc(ntfs_enode_cachep, GFP_ATOMIC);
 		if (!e)
 			wnd->uptodated = -1;
 	}
diff --git a/fs/ntfs3/index.c b/fs/ntfs3/index.c
index 5a2f52990..8ccb4ed5d 100644
--- a/fs/ntfs3/index.c
+++ b/fs/ntfs3/index.c
@@ -551,7 +551,7 @@ int indx_used_bit(struct ntfs_index *indx, struct ntfs_inode *ni, size_t *bit)
  * be split.
  * NOTE: This function should never return 'END' entry NULL returns on error
  */
-static const inline struct NTFS_DE *hdr_find_split(const struct INDEX_HDR *hdr)
+static inline const struct NTFS_DE *hdr_find_split(const struct INDEX_HDR *hdr)
 {
 	size_t o;
 	const struct NTFS_DE *e = hdr_first_de(hdr);
@@ -582,7 +582,7 @@ static const inline struct NTFS_DE *hdr_find_split(const struct INDEX_HDR *hdr)
  * inserts some entries at the beginning of the buffer.
  * It is used to insert entries into a newly-created buffer.
  */
-static const inline struct NTFS_DE *
+static inline const struct NTFS_DE *
 hdr_insert_head(struct INDEX_HDR *hdr, const void *ins, u32 ins_bytes)
 {
 	u32 to_move;
@@ -1462,7 +1462,7 @@ static int indx_add_allocate(struct ntfs_index *indx, struct ntfs_inode *ni,
 {
 	int err;
 	size_t bit;
-	u64 data_size, alloc_size;
+	u64 data_size;
 	u64 bmp_size, bmp_size_v;
 	struct ATTRIB *bmp, *alloc;
 	struct mft_inode *mi;
@@ -1486,7 +1486,6 @@ static int indx_add_allocate(struct ntfs_index *indx, struct ntfs_inode *ni,
 	}
 
 	data_size = (u64)(bit + 1) << indx->index_bits;
-	alloc_size = ntfs_up_cluster(ni->mi.sbi, data_size);
 
 	if (bmp) {
 		/* Increase bitmap */
@@ -1549,10 +1548,9 @@ static int indx_insert_into_root(struct ntfs_index *indx, struct ntfs_inode *ni,
 	CLST new_vbn;
 	__le64 *sub_vbn, t_vbn;
 	u16 new_de_size;
-	u32 hdr_used, hdr_total, asize, used, aoff, to_move;
+	u32 hdr_used, hdr_total, asize, used, to_move;
 	u32 root_size, new_root_size;
 	struct ntfs_sb_info *sbi;
-	char *next;
 	int ds_root;
 	struct INDEX_ROOT *root, *a_root = NULL;
 
@@ -1568,13 +1566,11 @@ static int indx_insert_into_root(struct ntfs_index *indx, struct ntfs_inode *ni,
 	hdr = &root->ihdr;
 	sbi = ni->mi.sbi;
 	rec = mi->mrec;
-	aoff = PtrOffset(rec, attr);
 	used = le32_to_cpu(rec->used);
 	new_de_size = le16_to_cpu(new_de->size);
 	hdr_used = le32_to_cpu(hdr->used);
 	hdr_total = le32_to_cpu(hdr->total);
 	asize = le32_to_cpu(attr->size);
-	next = Add2Ptr(attr, asize);
 	root_size = le32_to_cpu(attr->res.data_size);
 
 	ds_root = new_de_size + hdr_used - hdr_total;
diff --git a/fs/ntfs3/ntfs_fs.h b/fs/ntfs3/ntfs_fs.h
index 6e5afe3dc..984656737 100644
--- a/fs/ntfs3/ntfs_fs.h
+++ b/fs/ntfs3/ntfs_fs.h
@@ -698,7 +698,7 @@ static inline bool mi_is_ref(const struct mft_inode *mi,
 	if (ref->seq != mi->mrec->seq)
 		return false;
 
-#ifdef NTFS3_64BIT_CLUSTER
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
 	return le16_to_cpu(ref->high) == (mi->rno >> 32);
 #else
 	return !ref->high;
@@ -740,7 +740,9 @@ void *ntfs_put_shared(void *ptr);
 void ntfs_unmap_meta(struct super_block *sb, CLST lcn, CLST len);
 int ntfs_discard(struct ntfs_sb_info *sbi, CLST Lcn, CLST Len);
 
-/* globals from ubitmap.c*/
+/* globals from bitmap.c*/
+int __init ntfs3_init_bitmap(void);
+void ntfs3_exit_bitmap(void);
 void wnd_close(struct wnd_bitmap *wnd);
 static inline size_t wnd_zeroes(const struct wnd_bitmap *wnd)
 {
diff --git a/fs/ntfs3/run.c b/fs/ntfs3/run.c
index 67d1a856c..5cdf6efe6 100644
--- a/fs/ntfs3/run.c
+++ b/fs/ntfs3/run.c
@@ -3,6 +3,7 @@
  *
  * Copyright (C) 2019-2021 Paragon Software GmbH, All rights reserved.
  *
+ * TODO: try to use extents tree (instead of array)
  */
 
 #include <linux/blkdev.h>
@@ -600,7 +601,7 @@ static inline int run_packed_size(const s64 n)
 		if (!(p[0] & 0x80))
 			p -= 1;
 	}
-	return (const u8 *)n + sizeof(n) - p;
+	return (const u8 *)&n + sizeof(n) - p;
 }
 
 /* full trusted function. It does not check 'size' for errors */
diff --git a/fs/ntfs3/super.c b/fs/ntfs3/super.c
index 9648f82e5..3d45e7055 100644
--- a/fs/ntfs3/super.c
+++ b/fs/ntfs3/super.c
@@ -1449,22 +1449,28 @@ static int __init init_ntfs_fs(void)
 	pr_notice("ntfs3: Read-only lzx/xpress compression included\n");
 #endif
 
+	err = ntfs3_init_bitmap();
+	if (err)
+		return err;
+
 	ntfs_inode_cachep = kmem_cache_create(
 		"ntfs_inode_cache", sizeof(struct ntfs_inode), 0,
 		(SLAB_RECLAIM_ACCOUNT | SLAB_MEM_SPREAD | SLAB_ACCOUNT),
 		init_once);
 	if (!ntfs_inode_cachep) {
 		err = -ENOMEM;
-		goto failed;
+		goto out1;
 	}
 
 	err = register_filesystem(&ntfs_fs_type);
-	if (!err)
-		return 0;
+	if (err)
+		goto out;
 
+	return 0;
+out:
 	kmem_cache_destroy(ntfs_inode_cachep);
-
-failed:
+out1:
+	ntfs3_exit_bitmap();
 	return err;
 }
 
@@ -1476,6 +1482,7 @@ static void __exit exit_ntfs_fs(void)
 	}
 
 	unregister_filesystem(&ntfs_fs_type);
+	ntfs3_exit_bitmap();
 }
 
 MODULE_LICENSE("GPL");
diff --git a/fs/ntfs3/upcase.c b/fs/ntfs3/upcase.c
index bd828bc17..9617382ac 100644
--- a/fs/ntfs3/upcase.c
+++ b/fs/ntfs3/upcase.c
@@ -24,7 +24,16 @@ static inline u16 upcase_unicode_char(const u16 *upcase, u16 chr)
 	return upcase[chr];
 }
 
-/* Thanks Kari Argillander <kari.argillander@gmail.com> for idea and implementation 'bothcase' */
+/*
+ * Thanks Kari Argillander <kari.argillander@gmail.com> for idea and implementation 'bothcase'
+ *
+ * Straigth way to compare names:
+ * - case insensitive
+ * - if name equals and 'bothcases' then
+ * - case sensitive
+ * 'Straigth way' code scans input names twice in worst case
+ * Optimized code scans input names only once
+ */
 int ntfs_cmp_names(const __le16 *s1, size_t l1, const __le16 *s2, size_t l2,
 		   const u16 *upcase, bool bothcase)
 {
-- 
2.31.0.97.g1424303384

