From 42d66dec09cd2df98623478da742f6b3e4fc35ef Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Sat, 27 Mar 2021 23:27:27 +0100
Subject: [PATCH 15/15] ntfs3-5.11: update to v25

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 fs/ntfs3/frecord.c | 28 +++++++-----------------
 fs/ntfs3/fslog.c   | 12 ++++++-----
 fs/ntfs3/fsntfs.c  |  8 +++----
 fs/ntfs3/index.c   |  4 ++--
 fs/ntfs3/inode.c   | 54 +++++++++++++---------------------------------
 fs/ntfs3/namei.c   | 46 ++++++++++++++-------------------------
 fs/ntfs3/ntfs_fs.h | 21 +++++++++++++-----
 fs/ntfs3/super.c   | 17 ++++++---------
 8 files changed, 75 insertions(+), 115 deletions(-)

diff --git a/fs/ntfs3/frecord.c b/fs/ntfs3/frecord.c
index 1999dae8c..27ccb3706 100644
--- a/fs/ntfs3/frecord.c
+++ b/fs/ntfs3/frecord.c
@@ -19,18 +19,6 @@
 #include "lib/lib.h"
 #endif
 
-static inline void get_mi_ref(const struct mft_inode *mi, struct MFT_REF *ref)
-{
-#ifdef CONFIG_NTFS3_64BIT_CLUSTER
-	ref->low = cpu_to_le32(mi->rno);
-	ref->high = cpu_to_le16(mi->rno >> 32);
-#else
-	ref->low = cpu_to_le32(mi->rno);
-	ref->high = 0;
-#endif
-	ref->seq = mi->mrec->seq;
-}
-
 static struct mft_inode *ni_ins_mi(struct ntfs_inode *ni, struct rb_root *tree,
 				   CLST ino, struct rb_node *ins)
 {
@@ -409,7 +397,7 @@ bool ni_add_subrecord(struct ntfs_inode *ni, CLST rno, struct mft_inode **mi)
 		return false;
 	}
 
-	get_mi_ref(&ni->mi, &m->mrec->parent_ref);
+	mi_get_ref(&ni->mi, &m->mrec->parent_ref);
 
 	ni_add_mi(ni, m);
 	*mi = m;
@@ -502,7 +490,7 @@ static struct ATTRIB *ni_ins_new_attr(struct ntfs_inode *ni,
 	bool le_added = false;
 	struct MFT_REF ref;
 
-	get_mi_ref(mi, &ref);
+	mi_get_ref(mi, &ref);
 
 	if (type != ATTR_LIST && !le && ni->attr_list.size) {
 		err = al_add_le(ni, type, name, name_len, svcn, cpu_to_le16(-1),
@@ -703,7 +691,7 @@ static int ni_try_remove_attr_list(struct ntfs_inode *ni)
 
 	/* free space in primary record without attribute list */
 	free = sbi->record_size - le32_to_cpu(ni->mi.mrec->used) + asize;
-	get_mi_ref(&ni->mi, &ref);
+	mi_get_ref(&ni->mi, &ref);
 
 	le = NULL;
 	while ((le = al_enumerate(ni, le))) {
@@ -805,7 +793,7 @@ int ni_create_attr_list(struct ntfs_inode *ni)
 		goto out;
 	}
 
-	get_mi_ref(&ni->mi, &le->ref);
+	mi_get_ref(&ni->mi, &le->ref);
 	ni->attr_list.le = le;
 
 	attr = NULL;
@@ -871,7 +859,7 @@ int ni_create_attr_list(struct ntfs_inode *ni)
 				      b->name_len, asize, name_off);
 		WARN_ON(!attr);
 
-		get_mi_ref(mi, &le_b[nb]->ref);
+		mi_get_ref(mi, &le_b[nb]->ref);
 		le_b[nb]->id = attr->id;
 
 		/* copy all except id */
@@ -1335,7 +1323,7 @@ int ni_expand_list(struct ntfs_inode *ni)
 	bool is_mft = ni->mi.rno == MFT_REC_MFT;
 	struct MFT_REF ref;
 
-	get_mi_ref(&ni->mi, &ref);
+	mi_get_ref(&ni->mi, &ref);
 	le = NULL;
 
 	while ((le = al_enumerate(ni, le))) {
@@ -1545,7 +1533,7 @@ int ni_delete_all(struct ntfs_inode *ni)
 		if (!nt3 || attr->name_len) {
 			;
 		} else if (attr->type == ATTR_REPARSE) {
-			get_mi_ref(&ni->mi, &ref);
+			mi_get_ref(&ni->mi, &ref);
 			ntfs_remove_reparse(sbi, 0, &ref);
 		} else if (attr->type == ATTR_ID && !attr->non_res &&
 			   le32_to_cpu(attr->res.data_size) >=
@@ -2225,7 +2213,7 @@ int ni_decompress_file(struct ntfs_inode *ni)
 		if (attr->type == ATTR_REPARSE) {
 			struct MFT_REF ref;
 
-			get_mi_ref(&ni->mi, &ref);
+			mi_get_ref(&ni->mi, &ref);
 			ntfs_remove_reparse(sbi, 0, &ref);
 		}
 
diff --git a/fs/ntfs3/fslog.c b/fs/ntfs3/fslog.c
index e9260d472..fc287a500 100644
--- a/fs/ntfs3/fslog.c
+++ b/fs/ntfs3/fslog.c
@@ -984,7 +984,7 @@ static inline void *alloc_rsttbl_from_idx(struct RESTART_TABLE **tbl, u32 vbo)
 #define NTFSLOG_NO_OLDEST_LSN 0x00000020
 
 /*
- * Helper struct to work with NTFS $LogFile
+ * Helper struct to work with NTFS LogFile
  */
 struct ntfs_log {
 	struct ntfs_inode *ni;
@@ -3803,9 +3803,11 @@ int log_replay(struct ntfs_inode *ni, bool *initialized)
 	u32 t32;
 
 	/* Get the size of page. NOTE: To replay we can use default page */
-	page_size = norm_file_page(PAGE_SIZE, &l_size,
-				   PAGE_SIZE >= DefaultLogPageSize &&
-					   PAGE_SIZE <= DefaultLogPageSize * 2);
+#if PAGE_SIZE >= DefaultLogPageSize && PAGE_SIZE <= DefaultLogPageSize * 2
+	page_size = norm_file_page(PAGE_SIZE, &l_size, true);
+#else
+	page_size = norm_file_page(PAGE_SIZE, &l_size, false);
+#endif
 	if (!page_size)
 		return -EINVAL;
 
@@ -4082,7 +4084,7 @@ int log_replay(struct ntfs_inode *ni, bool *initialized)
 	case 0x20000:
 		break;
 	default:
-		ntfs_warn(sbi->sb, "$LogFile version %d.%d is not supported",
+		ntfs_warn(sbi->sb, "\x24LogFile version %d.%d is not supported",
 			  log->major_ver, log->minor_ver);
 		err = -EOPNOTSUPP;
 		log->set_dirty = true;
diff --git a/fs/ntfs3/fsntfs.c b/fs/ntfs3/fsntfs.c
index ac466ed9b..f1d7cea2c 100644
--- a/fs/ntfs3/fsntfs.c
+++ b/fs/ntfs3/fsntfs.c
@@ -257,13 +257,13 @@ int ntfs_loadlog_and_replay(struct ntfs_inode *ni, struct ntfs_sb_info *sbi)
 {
 	int err = 0;
 	struct super_block *sb = sbi->sb;
-	struct inode *inode = &ni->vfs_inode;
 	bool initialized = false;
 	struct MFT_REF ref;
+	struct inode *inode;
 
 	/* Check for 4GB */
-	if (inode->i_size >= 0x100000000ull) {
-		ntfs_err(sb, "$LogFile is too big");
+	if (ni->vfs_inode.i_size >= 0x100000000ull) {
+		ntfs_err(sb, "\x24LogFile is too big");
 		err = -EINVAL;
 		goto out;
 	}
@@ -1184,7 +1184,7 @@ int ntfs_read_run_nb(struct ntfs_sb_info *sbi, const struct runs_tree *run,
 	struct buffer_head *bh;
 
 	if (!run) {
-		/* first reading of $Volume + $MFTMirr + $LogFile goes here*/
+		/* first reading of $Volume + $MFTMirr + LogFile goes here*/
 		if (vbo > MFT_REC_VOL * sbi->record_size) {
 			err = -ENOENT;
 			goto out;
diff --git a/fs/ntfs3/index.c b/fs/ntfs3/index.c
index 789952d37..931a7241e 100644
--- a/fs/ntfs3/index.c
+++ b/fs/ntfs3/index.c
@@ -582,8 +582,8 @@ static const struct NTFS_DE *hdr_find_split(const struct INDEX_HDR *hdr)
  * inserts some entries at the beginning of the buffer.
  * It is used to insert entries into a newly-created buffer.
  */
-static const struct NTFS_DE *
-hdr_insert_head(struct INDEX_HDR *hdr, const void *ins, u32 ins_bytes)
+static const struct NTFS_DE *hdr_insert_head(struct INDEX_HDR *hdr,
+					     const void *ins, u32 ins_bytes)
 {
 	u32 to_move;
 	struct NTFS_DE *e = hdr_first_de(hdr);
diff --git a/fs/ntfs3/inode.c b/fs/ntfs3/inode.c
index 7f549ba5d..419d7b0a8 100644
--- a/fs/ntfs3/inode.c
+++ b/fs/ntfs3/inode.c
@@ -1176,10 +1176,10 @@ ntfs_create_reparse_buffer(struct ntfs_sb_info *sbi, const char *symname,
 	return ERR_PTR(err);
 }
 
-int ntfs_create_inode(struct inode *dir, struct dentry *dentry,
-		      const struct cpu_str *uni, umode_t mode, dev_t dev,
-		      const char *symname, u32 size, int excl,
-		      struct ntfs_fnd *fnd, struct inode **new_inode)
+struct inode *ntfs_create_inode(struct inode *dir, struct dentry *dentry,
+				const struct cpu_str *uni, umode_t mode,
+				dev_t dev, const char *symname, u32 size,
+				int excl, struct ntfs_fnd *fnd)
 {
 	int err;
 	struct super_block *sb = dir->i_sb;
@@ -1209,11 +1209,11 @@ int ntfs_create_inode(struct inode *dir, struct dentry *dentry,
 		     S_ISSOCK(mode);
 
 	if (is_sp)
-		return -EOPNOTSUPP;
+		return ERR_PTR(-EOPNOTSUPP);
 
 	dir_root = indx_get_root(&dir_ni->dir, dir_ni, NULL, NULL);
 	if (!dir_root)
-		return -EINVAL;
+		return ERR_PTR(-EINVAL);
 
 	if (is_dir) {
 		/* use parent's directory attributes */
@@ -1345,18 +1345,10 @@ int ntfs_create_inode(struct inode *dir, struct dentry *dentry,
 	if (err)
 		goto out4;
 
-	fname = (struct ATTR_FILE_NAME *)(new_de + 1);
-
-	new_de->ref.low = cpu_to_le32(ino);
-#ifdef CONFIG_NTFS3_64BIT_CLUSTER
-	new_de->ref.high = cpu_to_le16(ino >> 32);
-	fname->home.high = cpu_to_le16(dir->i_ino >> 32);
-#endif
-	new_de->ref.seq = rec->seq;
-
-	fname->home.low = cpu_to_le32(dir->i_ino & 0xffffffff);
-	fname->home.seq = dir_ni->mi.mrec->seq;
+	mi_get_ref(&ni->mi, &new_de->ref);
 
+	fname = (struct ATTR_FILE_NAME *)(new_de + 1);
+	mi_get_ref(&dir_ni->mi, &fname->home);
 	fname->dup.cr_time = fname->dup.m_time = fname->dup.c_time =
 		fname->dup.a_time = std5->cr_time;
 	fname->dup.alloc_size = fname->dup.data_size = 0;
@@ -1638,12 +1630,11 @@ int ntfs_create_inode(struct inode *dir, struct dentry *dentry,
 
 out1:
 	if (err)
-		return err;
+		return ERR_PTR(err);
 
 	unlock_new_inode(inode);
 
-	*new_inode = inode;
-	return 0;
+	return inode;
 }
 
 int ntfs_link_inode(struct inode *inode, struct dentry *dentry)
@@ -1679,22 +1670,14 @@ int ntfs_link_inode(struct inode *inode, struct dentry *dentry)
 		goto out;
 
 	key_size = le16_to_cpu(new_de->key_size);
-	fname = (struct ATTR_FILE_NAME *)(new_de + 1);
-
 	err = ni_insert_resident(ni, key_size, ATTR_NAME, NULL, 0, &attr, NULL);
 	if (err)
 		goto out;
 
-	new_de->ref.low = cpu_to_le32(inode->i_ino);
-#ifdef CONFIG_NTFS3_64BIT_CLUSTER
-	new_de->ref.high = cpu_to_le16(inode->i_ino >> 32);
-	fname->home.high = cpu_to_le16(dir->i_ino >> 32);
-#endif
-	new_de->ref.seq = ni->mi.mrec->seq;
-
-	fname->home.low = cpu_to_le32(dir->i_ino & 0xffffffff);
-	fname->home.seq = dir_ni->mi.mrec->seq;
+	mi_get_ref(&ni->mi, &new_de->ref);
 
+	fname = (struct ATTR_FILE_NAME *)(new_de + 1);
+	mi_get_ref(&dir_ni->mi, &fname->home);
 	fname->dup.cr_time = fname->dup.m_time = fname->dup.c_time =
 		fname->dup.a_time = kernel2nt(&inode->i_ctime);
 	fname->dup.alloc_size = fname->dup.data_size = 0;
@@ -1772,14 +1755,7 @@ int ntfs_unlink_inode(struct inode *dir, const struct dentry *dentry)
 	ntfs_set_state(sbi, NTFS_DIRTY_DIRTY);
 
 	/* find name in record */
-#ifdef CONFIG_NTFS3_64BIT_CLUSTER
-	ref.low = cpu_to_le32(dir->i_ino & 0xffffffff);
-	ref.high = cpu_to_le16(dir->i_ino >> 32);
-#else
-	ref.low = cpu_to_le32(dir->i_ino & 0xffffffff);
-	ref.high = 0;
-#endif
-	ref.seq = dir_ni->mi.mrec->seq;
+	mi_get_ref(&dir_ni->mi, &ref);
 
 	le = NULL;
 	fname = ni_fname_name(ni, uni, &ref, &le);
diff --git a/fs/ntfs3/namei.c b/fs/ntfs3/namei.c
index 34d89ec2a..66805b2d9 100644
--- a/fs/ntfs3/namei.c
+++ b/fs/ntfs3/namei.c
@@ -105,18 +105,17 @@ static struct dentry *ntfs_lookup(struct inode *dir, struct dentry *dentry,
 static int ntfs_create(struct inode *dir, struct dentry *dentry, umode_t mode,
 		       bool excl)
 {
-	int err;
 	struct ntfs_inode *ni = ntfs_i(dir);
 	struct inode *inode;
 
 	ni_lock_dir(ni);
 
-	err = ntfs_create_inode(dir, dentry, NULL, S_IFREG | mode, 0, NULL, 0,
-				excl, NULL, &inode);
+	inode = ntfs_create_inode(dir, dentry, NULL, S_IFREG | mode,
+				  0, NULL, 0, excl, NULL);
 
 	ni_unlock(ni);
 
-	return err;
+	return IS_ERR(inode) ? PTR_ERR(inode) : 0;
 }
 
 /*
@@ -188,19 +187,18 @@ static int ntfs_unlink(struct inode *dir, struct dentry *dentry)
 static int ntfs_symlink(struct inode *dir, struct dentry *dentry,
 			const char *symname)
 {
-	int err;
 	u32 size = strlen(symname);
 	struct inode *inode;
 	struct ntfs_inode *ni = ntfs_i(dir);
 
 	ni_lock_dir(ni);
 
-	err = ntfs_create_inode(dir, dentry, NULL, S_IFLNK | 0777, 0, symname,
-				size, 0, NULL, &inode);
+	inode = ntfs_create_inode(dir, dentry, NULL, S_IFLNK | 0777,
+				  0, symname, size, 0, NULL);
 
 	ni_unlock(ni);
 
-	return err;
+	return IS_ERR(inode) ? PTR_ERR(inode) : 0;
 }
 
 /*
@@ -210,18 +208,17 @@ static int ntfs_symlink(struct inode *dir, struct dentry *dentry,
  */
 static int ntfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
 {
-	int err;
 	struct inode *inode;
 	struct ntfs_inode *ni = ntfs_i(dir);
 
 	ni_lock_dir(ni);
 
-	err = ntfs_create_inode(dir, dentry, NULL, S_IFDIR | mode, 0, NULL, -1,
-				0, NULL, &inode);
+	inode = ntfs_create_inode(dir, dentry, NULL, S_IFDIR | mode,
+				  0, NULL, -1, 0, NULL);
 
 	ni_unlock(ni);
 
-	return err;
+	return IS_ERR(inode) ? PTR_ERR(inode) : 0;
 }
 
 /*
@@ -331,11 +328,7 @@ static int ntfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 	ni_lock_dir(old_dir_ni);
 	ni_lock(old_ni);
 
-	old_name->home.low = cpu_to_le32(old_dir->i_ino);
-#ifdef CONFIG_NTFS3_64BIT_CLUSTER
-	old_name->home.high = cpu_to_le16(old_dir->i_ino >> 32);
-#endif
-	old_name->home.seq = old_dir_ni->mi.mrec->seq;
+	mi_get_ref(&old_dir_ni->mi, &old_name->home);
 
 	/*get pointer to file_name in mft*/
 	fname = ni_fname_name(old_ni, (struct cpu_str *)&old_name->name_len,
@@ -388,15 +381,8 @@ static int ntfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 	}
 
 	/* Add new name */
-	new_de->ref.low = cpu_to_le32(old_inode->i_ino);
-#ifdef CONFIG_NTFS3_64BIT_CLUSTER
-	new_de->ref.high = cpu_to_le16(old_inode->i_ino >> 32);
-	new_name->home.high = cpu_to_le16(new_dir->i_ino >> 32);
-#endif
-	new_de->ref.seq = old_ni->mi.mrec->seq;
-
-	new_name->home.low = cpu_to_le32(new_dir->i_ino);
-	new_name->home.seq = ntfs_i(new_dir)->mi.mrec->seq;
+	mi_get_ref(&old_ni->mi, &new_de->ref);
+	mi_get_ref(&ntfs_i(new_dir)->mi, &new_name->home);
 
 	new_de_key_size = le16_to_cpu(new_de->key_size);
 
@@ -532,10 +518,10 @@ static int ntfs_atomic_open(struct inode *dir, struct dentry *dentry,
 	file->f_mode |= FMODE_CREATED;
 
 	/*fnd contains tree's path to insert to*/
-	err = ntfs_create_inode(dir, dentry, uni, mode, 0, NULL, 0, excl, fnd,
-				&inode);
-	if (!err)
-		err = finish_open(file, dentry, ntfs_file_open);
+	inode = ntfs_create_inode(dir, dentry, uni, mode, 0,
+				  NULL, 0, excl, fnd);
+	err = IS_ERR(inode) ? PTR_ERR(inode)
+			    : finish_open(file, dentry, ntfs_file_open);
 	dput(d);
 
 out2:
diff --git a/fs/ntfs3/ntfs_fs.h b/fs/ntfs3/ntfs_fs.h
index f9453457a..60986dbc0 100644
--- a/fs/ntfs3/ntfs_fs.h
+++ b/fs/ntfs3/ntfs_fs.h
@@ -154,7 +154,7 @@ struct ntfs_index {
 	u8 type; // index_mutex_classed
 };
 
-/* Set when $LogFile is replaying */
+/* Set when LogFile is replaying */
 #define NTFS_FLAGS_LOG_REPLAYING 0x00000008
 
 /* Set when we changed first MFT's which copy must be updated in $MftMirr */
@@ -644,10 +644,10 @@ int ntfs_sync_inode(struct inode *inode);
 int ntfs_flush_inodes(struct super_block *sb, struct inode *i1,
 		      struct inode *i2);
 int inode_write_data(struct inode *inode, const void *data, size_t bytes);
-int ntfs_create_inode(struct inode *dir, struct dentry *dentry,
-		      const struct cpu_str *uni, umode_t mode, dev_t dev,
-		      const char *symname, u32 size, int excl,
-		      struct ntfs_fnd *fnd, struct inode **new_inode);
+struct inode *ntfs_create_inode(struct inode *dir, struct dentry *dentry,
+				const struct cpu_str *uni, umode_t mode,
+				dev_t dev, const char *symname, u32 size,
+				int excl, struct ntfs_fnd *fnd);
 int ntfs_link_inode(struct inode *inode, struct dentry *dentry);
 int ntfs_unlink_inode(struct inode *dir, const struct dentry *dentry);
 void ntfs_evict_inode(struct inode *inode);
@@ -705,6 +705,17 @@ static inline bool mi_is_ref(const struct mft_inode *mi,
 #endif
 }
 
+static inline void mi_get_ref(const struct mft_inode *mi, struct MFT_REF *ref)
+{
+	ref->low = cpu_to_le32(mi->rno);
+#ifdef CONFIG_NTFS3_64BIT_CLUSTER
+	ref->high = cpu_to_le16(mi->rno >> 32);
+#else
+	ref->high = 0;
+#endif
+	ref->seq = mi->mrec->seq;
+}
+
 /* globals from run.c */
 bool run_lookup_entry(const struct runs_tree *run, CLST vcn, CLST *lcn,
 		      CLST *len, size_t *index);
diff --git a/fs/ntfs3/super.c b/fs/ntfs3/super.c
index 96587689c..961782c76 100644
--- a/fs/ntfs3/super.c
+++ b/fs/ntfs3/super.c
@@ -831,11 +831,7 @@ static int ntfs_init_from_boot(struct super_block *sb, u32 sector_size,
 	}
 
 	clusters = sbi->volume.size >> sbi->cluster_bits;
-#ifdef CONFIG_NTFS3_64BIT_CLUSTER
-#if BITS_PER_LONG < 64
-#error "CONFIG_NTFS3_64BIT_CLUSTER incompatible in 32 bit OS"
-#endif
-#else
+#ifndef CONFIG_NTFS3_64BIT_CLUSTER
 	/* 32 bits per cluster */
 	if (clusters >> 32) {
 		ntfs_notice(
@@ -844,6 +840,8 @@ static int ntfs_init_from_boot(struct super_block *sb, u32 sector_size,
 			gb, mb);
 		goto out;
 	}
+#elif BITS_PER_LONG < 64
+#error "CONFIG_NTFS3_64BIT_CLUSTER incompatible in 32 bit OS"
 #endif
 
 	sbi->used.bitmap.nbits = clusters;
@@ -964,7 +962,7 @@ static int ntfs_fill_super(struct super_block *sb, void *data, int silent)
 #endif
 
 	/*
-	 * Load $Volume. This should be done before $LogFile
+	 * Load $Volume. This should be done before LogFile
 	 * 'cause 'sbi->volume.ni' is used 'ntfs_set_state'
 	 */
 	ref.low = cpu_to_le32(MFT_REC_VOL);
@@ -1033,13 +1031,13 @@ static int ntfs_fill_super(struct super_block *sb, void *data, int silent)
 
 	iput(inode);
 
-	/* Load $LogFile to replay */
+	/* Load LogFile to replay */
 	ref.low = cpu_to_le32(MFT_REC_LOG);
 	ref.seq = cpu_to_le16(MFT_REC_LOG);
 	inode = ntfs_iget5(sb, &ref, &NAME_LOGFILE);
 	if (IS_ERR(inode)) {
 		err = PTR_ERR(inode);
-		ntfs_err(sb, "Failed to load $LogFile.");
+		ntfs_err(sb, "Failed to load \x24LogFile.");
 		inode = NULL;
 		goto out;
 	}
@@ -1235,7 +1233,7 @@ static int ntfs_fill_super(struct super_block *sb, void *data, int silent)
 	inode = ntfs_iget5(sb, &ref, &NAME_UPCASE);
 	if (IS_ERR(inode)) {
 		err = PTR_ERR(inode);
-		ntfs_err(sb, "Failed to load $LogFile.");
+		ntfs_err(sb, "Failed to load \x24LogFile.");
 		inode = NULL;
 		goto out;
 	}
@@ -1306,7 +1304,6 @@ static int ntfs_fill_super(struct super_block *sb, void *data, int silent)
 	}
 
 load_root:
-
 	/* Load root */
 	ref.low = cpu_to_le32(MFT_REC_ROOT);
 	ref.seq = cpu_to_le16(MFT_REC_ROOT);
-- 
2.31.0.97.g1424303384

