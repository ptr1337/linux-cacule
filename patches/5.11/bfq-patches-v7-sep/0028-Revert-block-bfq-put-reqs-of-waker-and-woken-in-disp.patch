From e6f95b125aa229a57057a34aafb857eeae3d5ceb Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 3 Feb 2021 14:36:54 +0100
Subject: [PATCH 28/39] Revert "block, bfq: put reqs of waker and woken in
 dispatch list"

This reverts commit 41eaec5fb6fbd0f6a08e397ef7bdd22b6a1ce9f4.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-iosched.c | 17 +----------------
 1 file changed, 1 insertion(+), 16 deletions(-)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index 55dfd23cb..f66c76762 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -5650,22 +5650,7 @@ static void bfq_insert_request(struct blk_mq_hw_ctx *hctx, struct request *rq,
 
 	spin_lock_irq(&bfqd->lock);
 	bfqq = bfq_init_rq(rq);
-
-	/*
-	 * Additional case for putting rq directly into the dispatch
-	 * queue: the only active bfq_queues are bfqq and either its
-	 * waker bfq_queue or one of its woken bfq_queues. In this
-	 * case, there is no point in queueing rq in bfqq for
-	 * service. In fact, the in-service queue and bfqq agree on
-	 * serving this new I/O request as soon as possible.
-	 */
-	if (!bfqq ||
-	    (bfqq != bfqd->in_service_queue &&
-	     bfqd->in_service_queue != NULL &&
-	     bfq_tot_busy_queues(bfqd) == 1 + bfq_bfqq_busy(bfqq) &&
-	     (bfqq->waker_bfqq == bfqd->in_service_queue ||
-	      bfqd->in_service_queue->waker_bfqq == bfqq)) ||
-	    at_head || blk_rq_is_passthrough(rq)) {
+	if (!bfqq || at_head || blk_rq_is_passthrough(rq)) {
 		if (at_head)
 			list_add(&rq->queuelist, &bfqd->dispatch);
 		else
-- 
2.31.1.305.gd1b10fc6d8

