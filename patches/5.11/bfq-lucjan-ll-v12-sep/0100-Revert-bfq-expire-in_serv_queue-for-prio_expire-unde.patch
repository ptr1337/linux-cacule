From 9fd5bbe69f910ba139a3778ebfdc7659c0f34d45 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Tue, 20 Apr 2021 15:56:08 +0200
Subject: [PATCH 100/116] Revert "bfq: expire in_serv_queue for prio_expire
 under better_fairness"

This reverts commit 3349b21d5d1ce586aa89013c359897737eeb88a3.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-iosched.c |  7 +++---
 block/bfq-iosched.h |  1 -
 block/bfq-wf2q.c    | 60 ---------------------------------------------
 3 files changed, 4 insertions(+), 64 deletions(-)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index 1f332f6a2..bc23a7765 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -4845,9 +4845,10 @@ static struct request *bfq_dispatch_rq_from_bfqq(struct bfq_data *bfqd,
 	 * belongs to CLASS_IDLE and other queues are waiting for
 	 * service.
 	 */
-	if ((bfq_tot_busy_queues(bfqd) > 1 && bfq_class_idle(bfqq)) ||
-	    bfq_bfqq_prio_expire(bfqq))
-		bfq_bfqq_expire(bfqd, bfqq, false, BFQQE_BUDGET_EXHAUSTED);
+	if (!(bfq_tot_busy_queues(bfqd) > 1 && bfq_class_idle(bfqq)))
+		goto return_rq;
+
+	bfq_bfqq_expire(bfqd, bfqq, false, BFQQE_BUDGET_EXHAUSTED);
 
 return_rq:
 	return rq;
diff --git a/block/bfq-iosched.h b/block/bfq-iosched.h
index 416c85be7..6b1440dbb 100644
--- a/block/bfq-iosched.h
+++ b/block/bfq-iosched.h
@@ -1004,7 +1004,6 @@ void bfq_end_wr_async_queues(struct bfq_data *bfqd, struct bfq_group *bfqg);
 void bfq_release_process_ref(struct bfq_data *bfqd, struct bfq_queue *bfqq);
 void bfq_schedule_dispatch(struct bfq_data *bfqd);
 void bfq_put_async_queues(struct bfq_data *bfqd, struct bfq_group *bfqg);
-bool bfq_may_expire_in_serv_for_prio(struct bfq_entity *entity);
 
 /* ------------ end of main algorithm interface -------------- */
 
diff --git a/block/bfq-wf2q.c b/block/bfq-wf2q.c
index 66275f50f..e24e48072 100644
--- a/block/bfq-wf2q.c
+++ b/block/bfq-wf2q.c
@@ -161,51 +161,6 @@ struct bfq_group *bfq_bfqq_to_bfqg(struct bfq_queue *bfqq)
 	return bfq_entity_to_bfqg(group_entity);
 }
 
-bool bfq_may_expire_in_serv_for_prio(struct bfq_entity *entity)
-{
-	struct bfq_sched_data *sd;
-	struct bfq_queue *bfqq;
-	struct bfq_group *bfqg;
-	bool ret = false;
-
-	sd = entity->sched_data;
-	bfqg = container_of(sd, struct bfq_group, sched_data);
-
-	if (likely(!bfqg->bfqd->better_fairness))
-		return false;
-
-	bfqq = bfqg->bfqd->in_service_queue;
-	if (bfqq) {
-		struct bfq_entity *next_in_serv;
-
-		/*
-		 * Traverse the upper-level scheduling domain for
-		 * prio preemption, and expire in_service_queue
-		 * if necessary.
-		 */
-		entity = &bfqq->entity;
-		for_each_entity(entity) {
-			sd = entity->sched_data;
-			next_in_serv = sd->next_in_service;
-
-			if (!next_in_serv)
-				continue;
-
-			/*
-			 * Expire bfqq, if next_in_serv belongs to
-			 * a higher class.
-			 */
-			if (bfq_class_idx(next_in_serv) <
-			    bfq_class_idx(entity)) {
-				bfq_mark_bfqq_prio_expire(bfqq);
-				ret = true;
-				break;
-			}
-		}
-	}
-	return ret;
-}
-
 /*
  * Returns true if this budget changes may let next_in_service->parent
  * become the next_in_service entity for its parent entity.
@@ -289,11 +244,6 @@ struct bfq_group *bfq_bfqq_to_bfqg(struct bfq_queue *bfqq)
 	return bfqq->bfqd->root_group;
 }
 
-bool bfq_may_expire_in_serv_for_prio(struct bfq_entity *entity)
-{
-	return false;
-}
-
 static bool bfq_update_parent_budget(struct bfq_entity *next_in_service)
 {
 	return false;
@@ -1212,7 +1162,6 @@ static void bfq_activate_requeue_entity(struct bfq_entity *entity,
 					bool non_blocking_wait_rq,
 					bool requeue, bool expiration)
 {
-	struct bfq_entity *old_entity = entity;
 	struct bfq_sched_data *sd;
 
 	for_each_entity(entity) {
@@ -1223,15 +1172,6 @@ static void bfq_activate_requeue_entity(struct bfq_entity *entity,
 		    !requeue)
 			break;
 	}
-
-	/*
-	 * Expire in_service_queue, if a task belongs to higher class
-	 * is added to the upper-level scheduling domain, we should
-	 * initiate a new schedule. But here is just to mark bfqq
-	 * prio_expire, the real schedule occurs in
-	 * bfq_dispatch_rq_from_bfqq().
-	 */
-	bfq_may_expire_in_serv_for_prio(old_entity);
 }
 
 /**
-- 
2.31.1.305.gd1b10fc6d8

