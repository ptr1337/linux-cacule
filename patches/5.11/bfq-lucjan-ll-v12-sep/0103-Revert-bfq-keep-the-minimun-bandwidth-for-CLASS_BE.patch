From 24ec9bcf8b123e4d4dcd35c82ea641632d5f0ef2 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Tue, 20 Apr 2021 15:56:11 +0200
Subject: [PATCH 103/116] Revert "bfq: keep the minimun bandwidth for CLASS_BE"

This reverts commit 87ee463cfb60ea94c7474803959b25cd54b281fd.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-iosched.c |  6 ++---
 block/bfq-iosched.h | 11 +++------
 block/bfq-wf2q.c    | 59 +++++++++++++--------------------------------
 3 files changed, 23 insertions(+), 53 deletions(-)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index aa8b0444a..6a48ac78c 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -6919,11 +6919,9 @@ static void bfq_init_root_group(struct bfq_group *root_group,
 	root_group->bfqd = bfqd;
 #endif
 	root_group->rq_pos_tree = RB_ROOT;
-	for (i = 0; i < BFQ_IOPRIO_CLASSES; i++) {
+	for (i = 0; i < BFQ_IOPRIO_CLASSES; i++)
 		root_group->sched_data.service_tree[i] = BFQ_SERVICE_TREE_INIT;
-		root_group->sched_data.bfq_class_last_service[i] = jiffies;
-	}
-	root_group->sched_data.class_timeout_last_check = jiffies;
+	root_group->sched_data.bfq_class_idle_last_service = jiffies;
 }
 
 static int bfq_init_queue(struct request_queue *q, struct elevator_type *e)
diff --git a/block/bfq-iosched.h b/block/bfq-iosched.h
index f94c01833..33b4ff2fb 100644
--- a/block/bfq-iosched.h
+++ b/block/bfq-iosched.h
@@ -13,7 +13,7 @@
 #include "blk-cgroup-rwstat.h"
 
 #define BFQ_IOPRIO_CLASSES	3
-#define BFQ_CLASS_TIMEOUT	(HZ/5)
+#define BFQ_CL_IDLE_TIMEOUT	(HZ/5)
 
 #define BFQ_MIN_WEIGHT			1
 #define BFQ_MAX_WEIGHT			1000
@@ -97,12 +97,9 @@ struct bfq_sched_data {
 	struct bfq_entity *next_in_service;
 	/* array of service trees, one per ioprio_class */
 	struct bfq_service_tree service_tree[BFQ_IOPRIO_CLASSES];
-	/* last time the class was served */
-	unsigned long bfq_class_last_service[BFQ_IOPRIO_CLASSES];
-	/* last time class timeout was checked */
-	unsigned long class_timeout_last_check;
-	/* next index to check class timeout */
-	unsigned int next_class_index;
+	/* last time CLASS_IDLE was served */
+	unsigned long bfq_class_idle_last_service;
+
 };
 
 /**
diff --git a/block/bfq-wf2q.c b/block/bfq-wf2q.c
index e24e48072..8b19dc6c0 100644
--- a/block/bfq-wf2q.c
+++ b/block/bfq-wf2q.c
@@ -1188,7 +1188,6 @@ bool __bfq_deactivate_entity(struct bfq_entity *entity, bool ins_into_idle_tree)
 {
 	struct bfq_sched_data *sd = entity->sched_data;
 	struct bfq_service_tree *st;
-	int idx = bfq_class_idx(entity);
 	bool is_in_service;
 
 	if (!entity->on_st_or_in_serv) /*
@@ -1228,7 +1227,6 @@ bool __bfq_deactivate_entity(struct bfq_entity *entity, bool ins_into_idle_tree)
 	else
 		bfq_idle_insert(st, entity);
 
-	sd->bfq_class_last_service[idx] = jiffies;
 	return true;
 }
 
@@ -1457,45 +1455,6 @@ __bfq_lookup_next_entity(struct bfq_service_tree *st, bool in_service)
 	return entity;
 }
 
-static int bfq_select_next_class(struct bfq_sched_data *sd)
-{
-	struct bfq_service_tree *st = sd->service_tree;
-	unsigned long last_check, last_serve;
-	int i, class_idx, next_class = 0;
-	bool found = false;
-
-	/*
-	 * we needed to guarantee a minimum bandwidth for each class (if
-	 * there is some active entity in this class). This should also
-	 * mitigate priority-inversion problems in case a low priority
-	 * task is holding file system resources.
-	 */
-	last_check = sd->class_timeout_last_check;
-	if (time_is_after_jiffies(last_check + BFQ_CLASS_TIMEOUT))
-		return next_class;
-
-	sd->class_timeout_last_check = jiffies;
-	for (i = 0; i < BFQ_IOPRIO_CLASSES; i++) {
-		class_idx = (sd->next_class_index + i) % BFQ_IOPRIO_CLASSES;
-		last_serve = sd->bfq_class_last_service[class_idx];
-
-		if (time_is_after_jiffies(last_serve + BFQ_CLASS_TIMEOUT))
-			continue;
-
-		if (!RB_EMPTY_ROOT(&(st + class_idx)->active)) {
-			if (found)
-				continue;
-
-			next_class = class_idx++;
-			class_idx %= BFQ_IOPRIO_CLASSES;
-			sd->next_class_index = class_idx;
-			found = true;
-		}
-		sd->bfq_class_last_service[class_idx] = jiffies;
-	}
-	return next_class;
-}
-
 /**
  * bfq_lookup_next_entity - return the first eligible entity in @sd.
  * @sd: the sched_data.
@@ -1509,8 +1468,24 @@ static struct bfq_entity *bfq_lookup_next_entity(struct bfq_sched_data *sd,
 						 bool expiration)
 {
 	struct bfq_service_tree *st = sd->service_tree;
+	struct bfq_service_tree *idle_class_st = st + (BFQ_IOPRIO_CLASSES - 1);
 	struct bfq_entity *entity = NULL;
-	int class_idx = bfq_select_next_class(sd);
+	int class_idx = 0;
+
+	/*
+	 * Choose from idle class, if needed to guarantee a minimum
+	 * bandwidth to this class (and if there is some active entity
+	 * in idle class). This should also mitigate
+	 * priority-inversion problems in case a low priority task is
+	 * holding file system resources.
+	 */
+	if (time_is_before_jiffies(sd->bfq_class_idle_last_service +
+				   BFQ_CL_IDLE_TIMEOUT)) {
+		if (!RB_EMPTY_ROOT(&idle_class_st->active))
+			class_idx = BFQ_IOPRIO_CLASSES - 1;
+		/* About to be served if backlogged, or not yet backlogged */
+		sd->bfq_class_idle_last_service = jiffies;
+	}
 
 	/*
 	 * Find the next entity to serve for the highest-priority
-- 
2.31.1.305.gd1b10fc6d8

