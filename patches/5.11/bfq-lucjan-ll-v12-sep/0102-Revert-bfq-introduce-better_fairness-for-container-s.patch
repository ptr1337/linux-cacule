From 7dbc5b3ff7e9054365051f115ca9890137fbebfd Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Tue, 20 Apr 2021 15:56:10 +0200
Subject: [PATCH 102/116] Revert "bfq: introduce better_fairness for container
 scene"

This reverts commit ab813f010b3bef58cfdca45c8e395ddaa56bf90a.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-iosched.c | 22 ----------------------
 block/bfq-iosched.h | 10 ----------
 2 files changed, 32 deletions(-)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index 68fa0e4e0..aa8b0444a 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -7104,7 +7104,6 @@ SHOW_FUNCTION(bfq_slice_idle_show, bfqd->bfq_slice_idle, 2);
 SHOW_FUNCTION(bfq_max_budget_show, bfqd->bfq_user_max_budget, 0);
 SHOW_FUNCTION(bfq_timeout_sync_show, bfqd->bfq_timeout, 1);
 SHOW_FUNCTION(bfq_strict_guarantees_show, bfqd->strict_guarantees, 0);
-SHOW_FUNCTION(bfq_better_fairness_show, bfqd->better_fairness, 0);
 SHOW_FUNCTION(bfq_low_latency_show, bfqd->low_latency, 0);
 #undef SHOW_FUNCTION
 
@@ -7246,26 +7245,6 @@ static ssize_t bfq_strict_guarantees_store(struct elevator_queue *e,
 	return count;
 }
 
-static ssize_t bfq_better_fairness_store(struct elevator_queue *e,
-				     const char *page, size_t count)
-{
-	struct bfq_data *bfqd = e->elevator_data;
-	unsigned long __data;
-	int ret;
-
-	ret = bfq_var_store(&__data, (page));
-	if (ret)
-		return ret;
-
-	if (__data > 1)
-		__data = 1;
-	if (__data == 0 && bfqd->better_fairness != 0)
-		bfq_end_wr(bfqd);
-	bfqd->better_fairness = __data;
-
-	return count;
-}
-
 static ssize_t bfq_low_latency_store(struct elevator_queue *e,
 				     const char *page, size_t count)
 {
@@ -7299,7 +7278,6 @@ static struct elv_fs_entry bfq_attrs[] = {
 	BFQ_ATTR(max_budget),
 	BFQ_ATTR(timeout_sync),
 	BFQ_ATTR(strict_guarantees),
-	BFQ_ATTR(better_fairness),
 	BFQ_ATTR(low_latency),
 	__ATTR_NULL
 };
diff --git a/block/bfq-iosched.h b/block/bfq-iosched.h
index 1ea44404c..f94c01833 100644
--- a/block/bfq-iosched.h
+++ b/block/bfq-iosched.h
@@ -686,16 +686,6 @@ struct bfq_data {
 	 */
 	bool strict_guarantees;
 
-	/*
-	 * If there is no prio preemption, we force the device to
-	 * idle to ensure Qos. IO inject also has some additional
-	 * restrictions. The inject/merge queue should come from the
-	 * same class in the same group. Doing so will reduce the
-	 * throughput of the system, but it can better guarantee
-	 * the Qos of each group and real-time tasks.
-	 */
-	bool better_fairness;
-
 	/*
 	 * Last time at which a queue entered the current burst of
 	 * queues being activated shortly after each other; for more
-- 
2.31.1.305.gd1b10fc6d8

