From 61f0c747ec53ffffe2fdbd24705c28c5311a2320 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 3 Feb 2021 14:36:54 +0100
Subject: [PATCH 28/64] Revert "block, bfq: make shared queues inherit wakers"

This reverts commit 4a5850c9d924d992490ecceb44869f822ab2fa10.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-iosched.c | 42 +++---------------------------------------
 1 file changed, 3 insertions(+), 39 deletions(-)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index 38629a66e..141967f80 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -2820,29 +2820,6 @@ bfq_merge_bfqqs(struct bfq_data *bfqd, struct bfq_io_cq *bic,
 		bfq_mark_bfqq_IO_bound(new_bfqq);
 	bfq_clear_bfqq_IO_bound(bfqq);
 
-	/*
-	 * The processes associated with bfqq are cooperators of the
-	 * processes associated with new_bfqq. So, if bfqq has a
-	 * waker, then assume that all these processes will be happy
-	 * to let bfqq's waker freely inject I/O when they have no
-	 * I/O.
-	 */
-	if (bfqq->waker_bfqq && !new_bfqq->waker_bfqq &&
-	    bfqq->waker_bfqq != new_bfqq) {
-		new_bfqq->waker_bfqq = bfqq->waker_bfqq;
-		new_bfqq->tentative_waker_bfqq = NULL;
-
-		/*
-		 * If the waker queue disappears, then
-		 * new_bfqq->waker_bfqq must be reset. So insert
-		 * new_bfqq into the woken_list of the waker. See
-		 * bfq_check_waker for details.
-		 */
-		hlist_add_head(&new_bfqq->woken_list_node,
-			       &new_bfqq->waker_bfqq->woken_list);
-
-	}
-
 	/*
 	 * If bfqq is weight-raised, then let new_bfqq inherit
 	 * weight-raising. To reduce false positives, neglect the case
@@ -6304,7 +6281,7 @@ static struct bfq_queue *bfq_init_rq(struct request *rq)
 	if (likely(!new_queue)) {
 		/* If the queue was seeky for too long, break it apart. */
 		if (bfq_bfqq_coop(bfqq) && bfq_bfqq_split_coop(bfqq)) {
-			struct bfq_queue *old_bfqq = bfqq;
+			bfq_log_bfqq(bfqd, bfqq, "breaking apart bfqq");
 
 			/* Update bic before losing reference to bfqq */
 			if (bfq_bfqq_in_large_burst(bfqq))
@@ -6313,24 +6290,11 @@ static struct bfq_queue *bfq_init_rq(struct request *rq)
 			bfqq = bfq_split_bfqq(bic, bfqq);
 			split = true;
 
-			if (!bfqq) {
+			if (!bfqq)
 				bfqq = bfq_get_bfqq_handle_split(bfqd, bic, bio,
 								 true, is_sync,
 								 NULL);
-				bfqq->waker_bfqq = old_bfqq->waker_bfqq;
-				bfqq->tentative_waker_bfqq = NULL;
-
-				/*
-				 * If the waker queue disappears, then
-				 * new_bfqq->waker_bfqq must be
-				 * reset. So insert new_bfqq into the
-				 * woken_list of the waker. See
-				 * bfq_check_waker for details.
-				 */
-				if (bfqq->waker_bfqq)
-					hlist_add_head(&bfqq->woken_list_node,
-						       &bfqq->waker_bfqq->woken_list);
-			} else
+			else
 				bfqq_already_existing = true;
 		}
 	}
-- 
2.31.0.rc1

