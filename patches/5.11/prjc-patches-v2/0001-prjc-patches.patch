From 25f9fc1e560dc104b8a565f2c26dea4f20858222 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Thu, 18 Feb 2021 15:36:42 +0800
Subject: [PATCH 1/5] sched/alt: [Sync] 59a74b1544e1 sched: Fix kernel-doc
 markup

---
 kernel/sched/alt_core.c | 17 ++++++++---------
 1 file changed, 8 insertions(+), 9 deletions(-)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index cd1b0b85af6d..2daa6605ccdc 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -5417,15 +5417,6 @@ SYSCALL_DEFINE3(sched_getaffinity, pid_t, pid, unsigned int, len,
 	return ret;
 }
 
-/**
- * sys_sched_yield - yield the current processor to other threads.
- *
- * This function yields the current CPU to other tasks. It does this by
- * scheduling away the current task. If it still has the earliest deadline
- * it will be scheduled again as the next task.
- *
- * Return: 0.
- */
 static void do_sched_yield(void)
 {
 	struct rq *rq;
@@ -5453,6 +5444,14 @@ static void do_sched_yield(void)
 	schedule();
 }
 
+/**
+ * sys_sched_yield - yield the current processor to other threads.
+ *
+ * This function yields the current CPU to other tasks. If there are no
+ * other threads running on this CPU then this function will return.
+ *
+ * Return: 0.
+ */
 SYSCALL_DEFINE0(sched_yield)
 {
 	do_sched_yield();
-- 
2.30.1.489.g328c109303


From 85cf5793aab177f39b3c60e097cc940e83274da7 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Thu, 18 Feb 2021 15:58:32 +0800
Subject: [PATCH 2/5] sched/alt: [Sync] 36c6e17bf169 sched/core: Print out
 straggler tasks in sched_cpu_dying()

---
 kernel/sched/alt_core.c  | 26 ++++++++++++++++++++++++--
 kernel/sched/alt_sched.h |  2 +-
 2 files changed, 25 insertions(+), 3 deletions(-)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 2daa6605ccdc..b469a7a9156e 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -3761,7 +3761,7 @@ inline void alt_sched_debug(void) {}
 
 #ifdef	CONFIG_SMP
 
-#define SCHED_RQ_NR_MIGRATION (32UL)
+#define SCHED_RQ_NR_MIGRATION (32U)
 /*
  * Migrate pending tasks in @rq to @dest_cpu
  * Will try to migrate mininal of half of @rq nr_running tasks and
@@ -6248,6 +6248,25 @@ static void calc_load_migrate(struct rq *rq)
 		atomic_long_add(delta, &calc_load_tasks);
 }
 
+static void dump_rq_tasks(struct rq *rq, const char *loglvl)
+{
+	struct task_struct *g, *p;
+	int cpu = cpu_of(rq);
+
+	lockdep_assert_held(&rq->lock);
+
+	printk("%sCPU%d enqueued tasks (%u total):\n", loglvl, cpu, rq->nr_running);
+	for_each_process_thread(g, p) {
+		if (task_cpu(p) != cpu)
+			continue;
+
+		if (!task_on_rq_queued(p))
+			continue;
+
+		printk("%s\tpid: %d, name: %s\n", loglvl, p->pid, p->comm);
+	}
+}
+
 int sched_cpu_dying(unsigned int cpu)
 {
 	struct rq *rq = cpu_rq(cpu);
@@ -6257,7 +6276,10 @@ int sched_cpu_dying(unsigned int cpu)
 	sched_tick_stop(cpu);
 
 	raw_spin_lock_irqsave(&rq->lock, flags);
-	BUG_ON(rq->nr_running != 1 || rq_has_pinned_tasks(rq));
+	if (rq->nr_running != 1 || rq_has_pinned_tasks(rq)) {
+		WARN(true, "Dying CPU not properly vacated!");
+		dump_rq_tasks(rq, KERN_WARNING);
+	}
 	raw_spin_unlock_irqrestore(&rq->lock, flags);
 
 	/*
diff --git a/kernel/sched/alt_sched.h b/kernel/sched/alt_sched.h
index cc2739f843af..192586fee177 100644
--- a/kernel/sched/alt_sched.h
+++ b/kernel/sched/alt_sched.h
@@ -153,7 +153,7 @@ struct rq {
 	u64 last_ts_switch;
 	u64 clock_task;
 
-	unsigned long nr_running;
+	unsigned int  nr_running;
 	unsigned long nr_uninterruptible;
 
 #ifdef CONFIG_SCHED_HRTICK
-- 
2.30.1.489.g328c109303


From ed6c6c1e144b14d8f4b89717c88f93fa5d267535 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Thu, 18 Feb 2021 22:19:45 +0800
Subject: [PATCH 3/5] sched/alt: 5ba2ffba13a1 sched: Fix CPU hotplug / tighten
 is_per_cpu_kthread()

---
 kernel/sched/alt_core.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index b469a7a9156e..3ed24b3c8351 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -1979,6 +1979,13 @@ static void __ttwu_queue_wakelist(struct task_struct *p, int cpu, int wake_flags
 
 static inline bool ttwu_queue_cond(int cpu, int wake_flags)
 {
+	/*
+	 * Do not complicate things with the async wake_list while the CPU is
+	 * in hotplug state.
+	 */
+	if (!cpu_active(cpu))
+		return false;
+
 	/*
 	 * If the CPU does not share cache, then queue the task on the
 	 * remote rqs wakelist to avoid accessing remote data.
-- 
2.30.1.489.g328c109303


From 7d48ff5ca21191e56c7c4a5a878df860aa09638a Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Sun, 28 Feb 2021 22:16:39 +0800
Subject: [PATCH 4/5] sched/alt: Implement __cant_migrate() for BMQ/PDS.

---
 kernel/sched/alt_core.c | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 3ed24b3c8351..94dccc9a6e14 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -1146,6 +1146,8 @@ static inline bool is_per_cpu_kthread(struct task_struct *p)
 	return ((p->flags & PF_KTHREAD) && (1 == p->nr_cpus_allowed));
 }
 
+#define MDF_FORCE_ENABLED	0x80
+
 static void
 __do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask, u32 flags);
 
@@ -1165,6 +1167,7 @@ void migrate_disable(void)
 	preempt_disable();
 	this_rq()->nr_pinned++;
 	p->migration_disabled = 1;
+	p->migration_flags &= ~MDF_FORCE_ENABLED;
 
 	/*
 	 * Violates locking rules! see comment in __do_set_cpus_allowed().
@@ -1763,6 +1766,7 @@ static int __set_cpus_allowed_ptr(struct task_struct *p,
 		if (p->cpus_ptr != &p->cpus_mask)
 			__do_set_cpus_allowed(p, &p->cpus_mask, SCA_MIGRATE_ENABLE);
 		p->migration_disabled = 0;
+		p->migration_flags |= MDF_FORCE_ENABLED;
 		/* When p is migrate_disabled, rq->lock should be held */
 		rq->nr_pinned--;
 	}
@@ -6605,6 +6609,35 @@ EXPORT_SYMBOL_GPL(__cant_sleep);
 #ifdef CONFIG_SMP
 void __cant_migrate(const char *file, int line)
 {
+	static unsigned long prev_jiffy;
+
+	if (irqs_disabled())
+		return;
+
+	if (is_migration_disabled(current))
+		return;
+
+	if (!IS_ENABLED(CONFIG_PREEMPT_COUNT))
+		return;
+
+	if (preempt_count() > 0)
+		return;
+
+	if (current->migration_flags & MDF_FORCE_ENABLED)
+		return;
+
+	if (time_before(jiffies, prev_jiffy + HZ) && prev_jiffy)
+		return;
+	prev_jiffy = jiffies;
+
+	pr_err("BUG: assuming non migratable context at %s:%d\n", file, line);
+	pr_err("in_atomic(): %d, irqs_disabled(): %d, migration_disabled() %u pid: %d, name: %s\n",
+	       in_atomic(), irqs_disabled(), is_migration_disabled(current),
+	       current->pid, current->comm);
+
+	debug_show_held_locks(current);
+	dump_stack();
+	add_taint(TAINT_WARN, LOCKDEP_STILL_OK);
 }
 EXPORT_SYMBOL_GPL(__cant_migrate);
 #endif
-- 
2.30.1.489.g328c109303


From 11b5ab9bf0e36f802d89ab16c01e93d82b65b319 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Mon, 1 Mar 2021 13:52:16 +0800
Subject: [PATCH 5/5] Project-C v5.11-r1

---
 kernel/sched/alt_core.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 94dccc9a6e14..d5aeadfc1e9b 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -52,7 +52,7 @@
  */
 EXPORT_TRACEPOINT_SYMBOL_GPL(pelt_irq_tp);
 
-#define ALT_SCHED_VERSION "v5.11-r0"
+#define ALT_SCHED_VERSION "v5.11-r1"
 
 /* rt_prio(prio) defined in include/linux/sched/rt.h */
 #define rt_task(p)		rt_prio((p)->prio)
-- 
2.30.1.489.g328c109303

