From 3aaf255c05faca36262920ab656085f5a843d8f2 Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Mon, 1 Mar 2021 23:33:09 +0100
Subject: [PATCH 12/14] ntfs3-5.11: update to v22

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 fs/ntfs3/Kconfig   |  3 +-
 fs/ntfs3/attrib.c  |  4 +--
 fs/ntfs3/bitmap.c  | 16 +++++------
 fs/ntfs3/dir.c     | 23 +++++++++++----
 fs/ntfs3/file.c    |  8 +++---
 fs/ntfs3/frecord.c | 20 ++++++-------
 fs/ntfs3/fslog.c   | 70 ++++++++++++++++++++++------------------------
 fs/ntfs3/fsntfs.c  | 15 ++++++----
 fs/ntfs3/index.c   | 21 +++++++-------
 fs/ntfs3/inode.c   | 32 ++++++++++-----------
 fs/ntfs3/lznt.c    | 10 +++----
 fs/ntfs3/ntfs.h    |  3 +-
 fs/ntfs3/run.c     | 62 +++++++++++++++++-----------------------
 fs/ntfs3/super.c   | 20 ++++++-------
 fs/ntfs3/upcase.c  | 12 +++-----
 fs/ntfs3/xattr.c   | 16 +++++------
 16 files changed, 167 insertions(+), 168 deletions(-)

diff --git a/fs/ntfs3/Kconfig b/fs/ntfs3/Kconfig
index 4dde88e..6e4cbc4 100644
--- a/fs/ntfs3/Kconfig
+++ b/fs/ntfs3/Kconfig
@@ -28,6 +28,7 @@ config NTFS3_LZX_XPRESS
 	help
 	  In Windows 10 one can use command "compact" to compress any files.
 	  4 possible variants of compression are: xpress4k, xpress8k, xpress16k and lzx.
+	  If activated you will be able to read such files correctly.
 
 	  It is recommended to say Y here.
 
@@ -42,4 +43,4 @@ config NTFS3_FS_POSIX_ACL
 	  filesystems.
 	  NOTE: this is linux only feature. Windows will ignore these ACLs.
 
-	  If you don't know what Access Control Lists are, say N
+	  If you don't know what Access Control Lists are, say N.
diff --git a/fs/ntfs3/attrib.c b/fs/ntfs3/attrib.c
index 7c85a6d..edd9485 100644
--- a/fs/ntfs3/attrib.c
+++ b/fs/ntfs3/attrib.c
@@ -579,8 +579,8 @@ int attr_set_size(struct ntfs_inode *ni, enum ATTR_TYPE type,
 			err = attr_allocate_clusters(
 				sbi, run, vcn, lcn, to_allocate, &pre_alloc,
 				is_mft ? ALLOCATE_MFT : 0, &alen,
-				is_mft ? 0 :
-					 (sbi->record_size -
+				is_mft ? 0
+				       : (sbi->record_size -
 					  le32_to_cpu(rec->used) + 8) /
 							 3 +
 						 1,
diff --git a/fs/ntfs3/bitmap.c b/fs/ntfs3/bitmap.c
index b1f6d6b..8331cd1 100644
--- a/fs/ntfs3/bitmap.c
+++ b/fs/ntfs3/bitmap.c
@@ -277,9 +277,9 @@ static void wnd_add_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len,
 		if (wnd->uptodated != 1) {
 			/* Check bits before 'bit' */
 			ib = wnd->zone_bit == wnd->zone_end ||
-					     bit < wnd->zone_end ?
-				     0 :
-				     wnd->zone_end;
+					     bit < wnd->zone_end
+				     ? 0
+				     : wnd->zone_end;
 
 			while (bit > ib && wnd_is_free_hlp(wnd, bit - 1, 1)) {
 				bit -= 1;
@@ -288,9 +288,9 @@ static void wnd_add_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len,
 
 			/* Check bits after 'end_in' */
 			ib = wnd->zone_bit == wnd->zone_end ||
-					     end_in > wnd->zone_bit ?
-				     wnd->nbits :
-				     wnd->zone_bit;
+					     end_in > wnd->zone_bit
+				     ? wnd->nbits
+				     : wnd->zone_bit;
 
 			while (end_in < ib && wnd_is_free_hlp(wnd, end_in, 1)) {
 				end_in += 1;
@@ -410,8 +410,8 @@ static void wnd_remove_free_ext(struct wnd_bitmap *wnd, size_t bit, size_t len)
 			return;
 		n3 = rb_first(&wnd->count_tree);
 		wnd->extent_max =
-			n3 ? rb_entry(n3, struct e_node, count.node)->count.key :
-			     0;
+			n3 ? rb_entry(n3, struct e_node, count.node)->count.key
+			   : 0;
 		return;
 	}
 
diff --git a/fs/ntfs3/dir.c b/fs/ntfs3/dir.c
index 2b5114c..9ec6012 100644
--- a/fs/ntfs3/dir.c
+++ b/fs/ntfs3/dir.c
@@ -22,7 +22,7 @@
 int ntfs_utf16_to_nls(struct ntfs_sb_info *sbi, const struct le_str *uni,
 		      u8 *buf, int buf_len)
 {
-	int ret, uni_len;
+	int ret, uni_len, warn;
 	const __le16 *ip;
 	u8 *op;
 	struct nls_table *nls = sbi->options.nls;
@@ -40,10 +40,12 @@ int ntfs_utf16_to_nls(struct ntfs_sb_info *sbi, const struct le_str *uni,
 	ip = uni->name;
 	op = buf;
 	uni_len = uni->len;
+	warn = 0;
 
 	while (uni_len--) {
 		u16 ec;
 		int charlen;
+		char dump[5];
 
 		if (buf_len < NLS_MAX_CHARSET_SIZE) {
 			ntfs_warn(sbi->sb,
@@ -57,12 +59,21 @@ int ntfs_utf16_to_nls(struct ntfs_sb_info *sbi, const struct le_str *uni,
 		if (charlen > 0) {
 			op += charlen;
 			buf_len -= charlen;
-		} else {
-			*op++ = ':';
-			op = hex_byte_pack(op, ec >> 8);
-			op = hex_byte_pack(op, ec);
-			buf_len -= 5;
+			continue;
 		}
+
+		*op++ = '_';
+		buf_len -= 1;
+		if (warn)
+			continue;
+
+		warn = 1;
+		hex_byte_pack(&dump[0], ec >> 8);
+		hex_byte_pack(&dump[2], ec);
+		dump[4] = 0;
+
+		ntfs_err(sbi->sb, "failed to convert \"%s\" to %s", dump,
+			 nls->charset);
 	}
 
 	*op = '\0';
diff --git a/fs/ntfs3/file.c b/fs/ntfs3/file.c
index 3886a4a..0dbdf23 100644
--- a/fs/ntfs3/file.c
+++ b/fs/ntfs3/file.c
@@ -226,8 +226,8 @@ void ntfs_sparse_cluster(struct inode *inode, struct page *page0, CLST vcn,
 			continue;
 
 		page_off = (loff_t)idx << PAGE_SHIFT;
-		to = (page_off + PAGE_SIZE) > end ? (end - page_off) :
-						    PAGE_SIZE;
+		to = (page_off + PAGE_SIZE) > end ? (end - page_off)
+						  : PAGE_SIZE;
 		partial = false;
 
 		if ((from || PAGE_SIZE != to) &&
@@ -1015,8 +1015,8 @@ static ssize_t ntfs_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
 	if (ret)
 		goto out;
 
-	ret = is_compressed(ni) ? ntfs_compress_write(iocb, from) :
-				  __generic_file_write_iter(iocb, from);
+	ret = is_compressed(ni) ? ntfs_compress_write(iocb, from)
+				: __generic_file_write_iter(iocb, from);
 
 out:
 	inode_unlock(inode);
diff --git a/fs/ntfs3/frecord.c b/fs/ntfs3/frecord.c
index cf1fa47..1999dae 100644
--- a/fs/ntfs3/frecord.c
+++ b/fs/ntfs3/frecord.c
@@ -98,8 +98,8 @@ struct ATTR_STD_INFO *ni_std(struct ntfs_inode *ni)
 	const struct ATTRIB *attr;
 
 	attr = mi_find_attr(&ni->mi, NULL, ATTR_STD, NULL, 0, NULL);
-	return attr ? resident_data_ex(attr, sizeof(struct ATTR_STD_INFO)) :
-		      NULL;
+	return attr ? resident_data_ex(attr, sizeof(struct ATTR_STD_INFO))
+		    : NULL;
 }
 
 /*
@@ -113,8 +113,8 @@ struct ATTR_STD_INFO5 *ni_std5(struct ntfs_inode *ni)
 
 	attr = mi_find_attr(&ni->mi, NULL, ATTR_STD, NULL, 0, NULL);
 
-	return attr ? resident_data_ex(attr, sizeof(struct ATTR_STD_INFO5)) :
-		      NULL;
+	return attr ? resident_data_ex(attr, sizeof(struct ATTR_STD_INFO5))
+		    : NULL;
 }
 
 /*
@@ -1716,9 +1716,9 @@ int ni_new_attr_flags(struct ntfs_inode *ni, enum FILE_ATTRIBUTE new_fa)
 	}
 
 	/* resize nonresident empty attribute in-place only*/
-	new_asize = (new_aflags & (ATTR_FLAG_COMPRESSED | ATTR_FLAG_SPARSED)) ?
-			    (SIZEOF_NONRESIDENT_EX + 8) :
-			    (SIZEOF_NONRESIDENT + 8);
+	new_asize = (new_aflags & (ATTR_FLAG_COMPRESSED | ATTR_FLAG_SPARSED))
+			    ? (SIZEOF_NONRESIDENT_EX + 8)
+			    : (SIZEOF_NONRESIDENT + 8);
 
 	if (!mi_resize_attr(mi, attr, new_asize - le32_to_cpu(attr->size)))
 		return -EOPNOTSUPP;
@@ -2868,9 +2868,9 @@ static bool ni_update_parent(struct ntfs_inode *ni, struct NTFS_DUP_INFO *dup,
 			u64 data_size = le64_to_cpu(attr->nres.data_size);
 			__le64 valid_le;
 
-			dup->alloc_size = is_attr_ext(attr) ?
-						  attr->nres.total_size :
-						  attr->nres.alloc_size;
+			dup->alloc_size = is_attr_ext(attr)
+						  ? attr->nres.total_size
+						  : attr->nres.alloc_size;
 			dup->data_size = attr->nres.data_size;
 
 			if (new_valid > data_size)
diff --git a/fs/ntfs3/fslog.c b/fs/ntfs3/fslog.c
index 140847d..94cc4d1 100644
--- a/fs/ntfs3/fslog.c
+++ b/fs/ntfs3/fslog.c
@@ -392,8 +392,8 @@ static inline u32 lrh_length(const struct LOG_REC_HDR *lr)
 {
 	u16 t16 = le16_to_cpu(lr->lcns_follow);
 
-	return t16 > 1 ? sizeof(struct LOG_REC_HDR) + (t16 - 1) * sizeof(u64) :
-			 sizeof(struct LOG_REC_HDR);
+	return t16 > 1 ? sizeof(struct LOG_REC_HDR) + (t16 - 1) * sizeof(u64)
+		       : sizeof(struct LOG_REC_HDR);
 }
 
 struct lcb {
@@ -836,10 +836,10 @@ static inline struct RESTART_TABLE *extend_rsttbl(struct RESTART_TABLE *tbl,
 
 	memcpy(rt + 1, tbl + 1, esize * used);
 
-	rt->free_goal = free_goal == ~0u ?
-				cpu_to_le32(~0u) :
-				cpu_to_le32(sizeof(struct RESTART_TABLE) +
-					    free_goal * esize);
+	rt->free_goal = free_goal == ~0u
+				? cpu_to_le32(~0u)
+				: cpu_to_le32(sizeof(struct RESTART_TABLE) +
+					      free_goal * esize);
 
 	if (tbl->first_free) {
 		rt->first_free = tbl->first_free;
@@ -1092,9 +1092,9 @@ static inline u64 base_lsn(struct ntfs_log *log,
 		    (lsn < (lsn_to_vbo(log, h_lsn) & ~log->page_mask) ? 1 : 0))
 		   << log->file_data_bits) +
 		  ((((is_log_record_end(hdr) &&
-		      h_lsn <= le64_to_cpu(hdr->record_hdr.last_end_lsn)) ?
-			     le16_to_cpu(hdr->record_hdr.next_record_off) :
-			     log->page_size) +
+		      h_lsn <= le64_to_cpu(hdr->record_hdr.last_end_lsn))
+			     ? le16_to_cpu(hdr->record_hdr.next_record_off)
+			     : log->page_size) +
 		    lsn) >>
 		   3);
 
@@ -1320,9 +1320,9 @@ static void log_init_pg_hdr(struct ntfs_log *log, u32 sys_page_size,
 	if (!log->clst_per_page)
 		log->clst_per_page = 1;
 
-	log->first_page = major_ver >= 2 ?
-				  0x22 * page_size :
-				  ((sys_page_size << 1) + (page_size << 1));
+	log->first_page = major_ver >= 2
+				  ? 0x22 * page_size
+				  : ((sys_page_size << 1) + (page_size << 1));
 	log->major_ver = major_ver;
 	log->minor_ver = minor_ver;
 }
@@ -1535,20 +1535,19 @@ static u32 current_log_avail(struct ntfs_log *log)
 	 * have to compute the free range
 	 * If there is no oldest lsn then start at the first page of the file
 	 */
-	oldest_off = (log->l_flags & NTFSLOG_NO_OLDEST_LSN) ?
-			     log->first_page :
-			     (log->oldest_lsn_off & ~log->sys_page_mask);
+	oldest_off = (log->l_flags & NTFSLOG_NO_OLDEST_LSN)
+			     ? log->first_page
+			     : (log->oldest_lsn_off & ~log->sys_page_mask);
 
 	/*
 	 * We will use the next log page offset to compute the next free page\
 	 * If we are going to reuse this page go to the next page
 	 * If we are at the first page then use the end of the file
 	 */
-	next_free_off = (log->l_flags & NTFSLOG_REUSE_TAIL) ?
-				log->next_page + log->page_size :
-				log->next_page == log->first_page ?
-				log->l_size :
-				log->next_page;
+	next_free_off = (log->l_flags & NTFSLOG_REUSE_TAIL)
+				? log->next_page + log->page_size
+			: log->next_page == log->first_page ? log->l_size
+							    : log->next_page;
 
 	/* If the two offsets are the same then there is no available space */
 	if (oldest_off == next_free_off)
@@ -1558,9 +1557,9 @@ static u32 current_log_avail(struct ntfs_log *log)
 	 * this range from the total available pages
 	 */
 	free_bytes =
-		oldest_off < next_free_off ?
-			log->total_avail_pages - (next_free_off - oldest_off) :
-			oldest_off - next_free_off;
+		oldest_off < next_free_off
+			? log->total_avail_pages - (next_free_off - oldest_off)
+			: oldest_off - next_free_off;
 
 	free_bytes >>= log->page_bits;
 	return free_bytes * log->reserved;
@@ -1790,8 +1789,8 @@ static int last_log_lsn(struct ntfs_log *log)
 
 	page_cnt = page_pos = 1;
 
-	curpage_off = seq_base == log->seq_num ? min(log->next_page, page_off) :
-						 log->next_page;
+	curpage_off = seq_base == log->seq_num ? min(log->next_page, page_off)
+					       : log->next_page;
 
 	wrapped_file =
 		curpage_off == log->first_page &&
@@ -1849,9 +1848,9 @@ static int last_log_lsn(struct ntfs_log *log)
 			    le64_to_cpu(cur_page->record_hdr.last_end_lsn) &&
 		    ((lsn_cur >> log->file_data_bits) +
 		     ((curpage_off <
-		       (lsn_to_vbo(log, lsn_cur) & ~log->page_mask)) ?
-			      1 :
-			      0)) != expected_seq) {
+		       (lsn_to_vbo(log, lsn_cur) & ~log->page_mask))
+			      ? 1
+			      : 0)) != expected_seq) {
 			goto check_tail;
 		}
 
@@ -2665,10 +2664,9 @@ static inline bool check_index_root(const struct ATTRIB *attr,
 {
 	bool ret;
 	const struct INDEX_ROOT *root = resident_data(attr);
-	u8 index_bits =
-		le32_to_cpu(root->index_block_size) >= sbi->cluster_size ?
-			sbi->cluster_bits :
-			SECTOR_SHIFT;
+	u8 index_bits = le32_to_cpu(root->index_block_size) >= sbi->cluster_size
+				? sbi->cluster_bits
+				: SECTOR_SHIFT;
 	u8 block_clst = root->index_block_clst;
 
 	if (le32_to_cpu(attr->res.data_size) < sizeof(struct INDEX_ROOT) ||
@@ -3895,10 +3893,10 @@ int log_replay(struct ntfs_inode *ni)
 	log->init_ra = !!rst_info.vbo;
 
 	/* If we have a valid page then grab a pointer to the restart area */
-	ra2 = rst_info.valid_page ?
-		      Add2Ptr(rst_info.r_page,
-			      le16_to_cpu(rst_info.r_page->ra_off)) :
-		      NULL;
+	ra2 = rst_info.valid_page
+		      ? Add2Ptr(rst_info.r_page,
+				le16_to_cpu(rst_info.r_page->ra_off))
+		      : NULL;
 
 	if (rst_info.chkdsk_was_run ||
 	    (ra2 && ra2->client_idx[1] == LFS_NO_CLIENT_LE)) {
diff --git a/fs/ntfs3/fsntfs.c b/fs/ntfs3/fsntfs.c
index ecf3aaa..4edd583 100644
--- a/fs/ntfs3/fsntfs.c
+++ b/fs/ntfs3/fsntfs.c
@@ -151,8 +151,8 @@ int ntfs_fix_post_read(struct NTFS_RECORD_HEADER *rhdr, size_t bytes,
 	u16 sample, fo, fn;
 
 	fo = le16_to_cpu(rhdr->fix_off);
-	fn = simple ? ((bytes >> SECTOR_SHIFT) + 1) :
-		      le16_to_cpu(rhdr->fix_num);
+	fn = simple ? ((bytes >> SECTOR_SHIFT) + 1)
+		    : le16_to_cpu(rhdr->fix_num);
 
 	/* Check errors */
 	if ((fo & 1) || fo + fn * sizeof(short) > SECTOR_SIZE || !fn-- ||
@@ -1738,8 +1738,15 @@ static bool is_acl_valid(const struct ACL *acl, u32 len)
 	u32 i;
 	u16 ace_count, ace_size;
 
-	if (acl->AclRevision != ACL_REVISION)
+	if (acl->AclRevision != ACL_REVISION &&
+	    acl->AclRevision != ACL_REVISION_DS) {
+		/*
+		 * This value should be ACL_REVISION, unless the ACL contains an
+		 * object-specific ACE, in which case this value must be ACL_REVISION_DS.
+		 * All ACEs in an ACL must be at the same revision level.
+		 */
 		return false;
+	}
 
 	if (acl->Sbz1)
 		return false;
@@ -1751,7 +1758,6 @@ static bool is_acl_valid(const struct ACL *acl, u32 len)
 		return false;
 
 	len -= sizeof(struct ACL);
-
 	ace = (struct ACE_HEADER *)&acl[1];
 	ace_count = le16_to_cpu(acl->AceCount);
 
@@ -1764,7 +1770,6 @@ static bool is_acl_valid(const struct ACL *acl, u32 len)
 			return false;
 
 		len -= ace_size;
-
 		ace = Add2Ptr(ace, ace_size);
 	}
 
diff --git a/fs/ntfs3/index.c b/fs/ntfs3/index.c
index 7386714..5a2f529 100644
--- a/fs/ntfs3/index.c
+++ b/fs/ntfs3/index.c
@@ -424,9 +424,8 @@ static int scan_nres_bitmap(struct ntfs_inode *ni, struct ATTRIB *bitmap,
 		if (vbo + blocksize > data_size)
 			nbits = 8 * (data_size - vbo);
 
-		ok = nbits > from ?
-			     (*fn)((ulong *)bh->b_data, from, nbits, ret) :
-			     false;
+		ok = nbits > from ? (*fn)((ulong *)bh->b_data, from, nbits, ret)
+				  : false;
 		put_bh(bh);
 
 		if (ok) {
@@ -1659,9 +1658,9 @@ static int indx_insert_into_root(struct ntfs_index *indx, struct ntfs_inode *ni,
 	mi->dirty = true;
 
 	/* Create alloc and bitmap attributes (if not) */
-	err = run_is_empty(&indx->alloc_run) ?
-		      indx_create_allocate(indx, ni, &new_vbn) :
-		      indx_add_allocate(indx, ni, &new_vbn);
+	err = run_is_empty(&indx->alloc_run)
+		      ? indx_create_allocate(indx, ni, &new_vbn)
+		      : indx_add_allocate(indx, ni, &new_vbn);
 
 	/* layout of record may be changed, so rescan root */
 	root = indx_get_root(indx, ni, &attr, &mi);
@@ -1841,9 +1840,9 @@ indx_insert_into_buffer(struct ntfs_index *indx, struct ntfs_inode *ni,
 	hdr_insert_de(indx,
 		      (*indx->cmp)(new_de + 1, le16_to_cpu(new_de->key_size),
 				   up_e + 1, le16_to_cpu(up_e->key_size),
-				   ctx) < 0 ?
-			      hdr2 :
-			      hdr1,
+				   ctx) < 0
+			      ? hdr2
+			      : hdr1,
 		      new_de, NULL, ctx);
 
 	indx_mark_used(indx, ni, new_vbn >> indx->idx2vbn_bits);
@@ -2302,8 +2301,8 @@ int indx_delete_entry(struct ntfs_index *indx, struct ntfs_inode *ni,
 			err = level ? indx_insert_into_buffer(indx, ni, root,
 							      re, ctx,
 							      fnd->level - 1,
-							      fnd) :
-				      indx_insert_into_root(indx, ni, re, e,
+							      fnd)
+				    : indx_insert_into_root(indx, ni, re, e,
 							    ctx, fnd);
 			ntfs_free(re);
 
diff --git a/fs/ntfs3/inode.c b/fs/ntfs3/inode.c
index 504d783..7f549ba 100644
--- a/fs/ntfs3/inode.c
+++ b/fs/ntfs3/inode.c
@@ -243,8 +243,8 @@ static struct inode *ntfs_read_mft(struct inode *inode,
 		if (!attr->nres.alloc_size)
 			goto next_attr;
 
-		run = ino == MFT_REC_BITMAP ? &sbi->used.bitmap.run :
-					      &ni->file.run;
+		run = ino == MFT_REC_BITMAP ? &sbi->used.bitmap.run
+					    : &ni->file.run;
 		break;
 
 	case ATTR_ROOT:
@@ -271,9 +271,9 @@ static struct inode *ntfs_read_mft(struct inode *inode,
 		if (err)
 			goto out;
 
-		mode = sb->s_root ?
-			       (S_IFDIR | (0777 & sbi->options.fs_dmask_inv)) :
-			       (S_IFDIR | 0777);
+		mode = sb->s_root
+			       ? (S_IFDIR | (0777 & sbi->options.fs_dmask_inv))
+			       : (S_IFDIR | 0777);
 		goto next_attr;
 
 	case ATTR_ALLOC:
@@ -762,8 +762,8 @@ static ssize_t ntfs_direct_IO(struct kiocb *iocb, struct iov_iter *iter)
 	}
 
 	ret = blockdev_direct_IO(iocb, inode, iter,
-				 wr ? ntfs_get_block_direct_IO_W :
-				      ntfs_get_block_direct_IO_R);
+				 wr ? ntfs_get_block_direct_IO_W
+				    : ntfs_get_block_direct_IO_R);
 	valid = ni->i_valid;
 	if (wr) {
 		if (ret <= 0)
@@ -1556,10 +1556,9 @@ int ntfs_create_inode(struct inode *dir, struct dentry *dentry,
 
 	/* Fill vfs inode fields */
 	inode->i_uid = sbi->options.uid ? sbi->options.fs_uid : current_fsuid();
-	inode->i_gid =
-		sbi->options.gid ?
-			sbi->options.fs_gid :
-			(dir->i_mode & S_ISGID) ? dir->i_gid : current_fsgid();
+	inode->i_gid = sbi->options.gid		 ? sbi->options.fs_gid
+		       : (dir->i_mode & S_ISGID) ? dir->i_gid
+						 : current_fsgid();
 	inode->i_generation = le16_to_cpu(rec->seq);
 
 	dir->i_mtime = dir->i_ctime = inode->i_atime;
@@ -1767,7 +1766,7 @@ int ntfs_unlink_inode(struct inode *dir, const struct dentry *dentry)
 	err = ntfs_nls_to_utf16(sbi, name->name, name->len, uni, NTFS_NAME_LEN,
 				UTF16_HOST_ENDIAN);
 	if (err < 0)
-		goto out4;
+		goto out2;
 
 	/*mark rw ntfs as dirty. it will be cleared at umount*/
 	ntfs_set_state(sbi, NTFS_DIRTY_DIRTY);
@@ -1794,7 +1793,7 @@ int ntfs_unlink_inode(struct inode *dir, const struct dentry *dentry)
 	err = indx_delete_entry(indx, dir_ni, fname, fname_full_size(fname),
 				sbi);
 	if (err)
-		goto out4;
+		goto out3;
 
 	/* Then remove name from mft */
 	ni_remove_attr_le(ni, attr_from_name(fname), le);
@@ -1809,15 +1808,14 @@ int ntfs_unlink_inode(struct inode *dir, const struct dentry *dentry)
 			err = indx_delete_entry(indx, dir_ni, fname,
 						fname_full_size(fname), sbi);
 			if (err)
-				goto out4;
+				goto out3;
 
 			ni_remove_attr_le(ni, attr_from_name(fname), le);
 
 			le16_add_cpu(&ni->mi.mrec->hard_links, -1);
 		}
 	}
-
-out4:
+out3:
 	switch (err) {
 	case 0:
 		drop_nlink(inode);
@@ -1835,7 +1833,7 @@ int ntfs_unlink_inode(struct inode *dir, const struct dentry *dentry)
 	if (inode->i_nlink)
 		mark_inode_dirty(inode);
 
-out3:
+out2:
 	__putname(uni);
 out1:
 	ni_unlock(ni);
diff --git a/fs/ntfs3/lznt.c b/fs/ntfs3/lznt.c
index 34822f0..ead9ab7 100644
--- a/fs/ntfs3/lznt.c
+++ b/fs/ntfs3/lznt.c
@@ -294,8 +294,8 @@ static inline ssize_t decompress_chunk(u8 *unc, u8 *unc_end, const u8 *cmpr,
  */
 struct lznt *get_lznt_ctx(int level)
 {
-	struct lznt *r = ntfs_zalloc(level ? offsetof(struct lznt, hash) :
-					     sizeof(struct lznt));
+	struct lznt *r = ntfs_zalloc(level ? offsetof(struct lznt, hash)
+					   : sizeof(struct lznt));
 
 	if (r)
 		r->std = !level;
@@ -391,9 +391,9 @@ ssize_t decompress_lznt(const void *cmpr, size_t cmpr_size, void *unc,
 			unc_use = err;
 		} else {
 			/* This chunk does not contain compressed data */
-			unc_use = unc_chunk + LZNT_CHUNK_SIZE > unc_end ?
-					  unc_end - unc_chunk :
-					  LZNT_CHUNK_SIZE;
+			unc_use = unc_chunk + LZNT_CHUNK_SIZE > unc_end
+					  ? unc_end - unc_chunk
+					  : LZNT_CHUNK_SIZE;
 
 			if (cmpr_chunk + sizeof(chunk_hdr) + unc_use >
 			    cmpr_end) {
diff --git a/fs/ntfs3/ntfs.h b/fs/ntfs3/ntfs.h
index b6a97b6..d3d3d93 100644
--- a/fs/ntfs3/ntfs.h
+++ b/fs/ntfs3/ntfs.h
@@ -1194,7 +1194,8 @@ struct EA_FULL {
 
 static_assert(offsetof(struct EA_FULL, name) == 8);
 
-#define ACL_REVISION 2
+#define ACL_REVISION	2
+#define ACL_REVISION_DS 4
 
 #define SE_SELF_RELATIVE cpu_to_le16(0x8000)
 
diff --git a/fs/ntfs3/run.c b/fs/ntfs3/run.c
index 354c6ba..67d1a85 100644
--- a/fs/ntfs3/run.c
+++ b/fs/ntfs3/run.c
@@ -433,9 +433,9 @@ bool run_add_entry(struct runs_tree *run, CLST vcn, CLST lcn, CLST len,
 			should_add_tail = Tovcn < r->len;
 
 			if (should_add_tail) {
-				tail_lcn = r->lcn == SPARSE_LCN ?
-						   SPARSE_LCN :
-						   (r->lcn + Tovcn);
+				tail_lcn = r->lcn == SPARSE_LCN
+						   ? SPARSE_LCN
+						   : (r->lcn + Tovcn);
 				tail_vcn = r->vcn + Tovcn;
 				tail_len = r->len - Tovcn;
 			}
@@ -1007,7 +1007,7 @@ int run_unpack_ex(struct runs_tree *run, struct ntfs_sb_info *sbi, CLST ino,
 	struct wnd_bitmap *wnd;
 
 	ret = run_unpack(run, sbi, ino, svcn, evcn, vcn, run_buf, run_buf_size);
-	if (ret < 0)
+	if (ret <= 0)
 		return ret;
 
 	if (!sbi->used.bitmap.sb || !run || run == RUN_DEALLOCATE)
@@ -1022,8 +1022,6 @@ int run_unpack_ex(struct runs_tree *run, struct ntfs_sb_info *sbi, CLST ino,
 	for (ok = run_lookup_entry(run, vcn, &lcn, &len, &index);
 	     next_vcn <= evcn;
 	     ok = run_get_entry(run, ++index, &vcn, &lcn, &len)) {
-		CLST real_free, i;
-
 		if (!ok || next_vcn != vcn)
 			return -EINVAL;
 
@@ -1035,7 +1033,6 @@ int run_unpack_ex(struct runs_tree *run, struct ntfs_sb_info *sbi, CLST ino,
 		if (sbi->flags & NTFS_FLAGS_NEED_REPLAY)
 			continue;
 
-next:
 		down_read_nested(&wnd->rw_lock, BITMAP_MUTEX_CLUSTERS);
 		/* Check for free blocks */
 		ok = wnd_is_used(wnd, lcn, len);
@@ -1043,40 +1040,33 @@ int run_unpack_ex(struct runs_tree *run, struct ntfs_sb_info *sbi, CLST ino,
 		if (ok)
 			continue;
 
+		/* Looks like volume is corrupted */
 		ntfs_set_state(sbi, NTFS_DIRTY_ERROR);
 
-		if (!down_write_trylock(&wnd->rw_lock))
-			continue;
+		if (down_write_trylock(&wnd->rw_lock)) {
+			/* mark all zero bits as used in range [lcn, lcn+len) */
+			CLST i, lcn_f = 0, len_f = 0;
+
+			err = 0;
+			for (i = 0; i < len; i++) {
+				if (wnd_is_free(wnd, lcn + i, 1)) {
+					if (!len_f)
+						lcn_f = lcn + i;
+					len_f += 1;
+				} else if (len_f) {
+					err = wnd_set_used(wnd, lcn_f, len_f);
+					len_f = 0;
+					if (err)
+						break;
+				}
+			}
 
-		/* Find first free */
-		real_free = len;
-		while (real_free && !wnd_is_free(wnd, lcn, 1)) {
-			lcn += 1;
-			real_free -= 1;
-		}
+			if (len_f)
+				err = wnd_set_used(wnd, lcn_f, len_f);
 
-		if (!real_free) {
 			up_write(&wnd->rw_lock);
-			continue;
-		}
-
-		/* Find total free */
-		i = 1;
-		while (i < real_free && wnd_is_free(wnd, lcn + i, 1))
-			i += 1;
-
-		real_free = i;
-
-		err = wnd_set_used(wnd, lcn, real_free);
-		up_write(&wnd->rw_lock);
-
-		if (err)
-			return err;
-
-		if (len != real_free) {
-			len -= real_free + 1;
-			lcn += real_free + 1;
-			goto next;
+			if (err)
+				return err;
 		}
 	}
 
diff --git a/fs/ntfs3/super.c b/fs/ntfs3/super.c
index 69c8a7d..9648f82 100644
--- a/fs/ntfs3/super.c
+++ b/fs/ntfs3/super.c
@@ -701,9 +701,9 @@ static u32 format_size_gb(const u64 bytes, u32 *mb)
 
 static u32 true_sectors_per_clst(const struct NTFS_BOOT *boot)
 {
-	return boot->sectors_per_clusters <= 0x80 ?
-		       boot->sectors_per_clusters :
-		       (1u << (0 - boot->sectors_per_clusters));
+	return boot->sectors_per_clusters <= 0x80
+		       ? boot->sectors_per_clusters
+		       : (1u << (0 - boot->sectors_per_clusters));
 }
 
 /* inits internal info from on-disk boot sector*/
@@ -799,10 +799,10 @@ static int ntfs_init_from_boot(struct super_block *sb, u32 sector_size,
 
 	sbi->cluster_mask = sbi->cluster_size - 1;
 	sbi->cluster_mask_inv = ~(u64)sbi->cluster_mask;
-	sbi->record_size = record_size = boot->record_size < 0 ?
-						 1 << (-boot->record_size) :
-						 (u32)boot->record_size
-							 << sbi->cluster_bits;
+	sbi->record_size = record_size = boot->record_size < 0
+						 ? 1 << (-boot->record_size)
+						 : (u32)boot->record_size
+							   << sbi->cluster_bits;
 
 	if (record_size > MAXIMUM_BYTES_PER_MFT)
 		goto out;
@@ -815,9 +815,9 @@ static int ntfs_init_from_boot(struct super_block *sb, u32 sector_size,
 		QuadAlign(((record_size >> SECTOR_SHIFT) * sizeof(short))) -
 		QuadAlign(sizeof(enum ATTR_TYPE));
 
-	sbi->index_size = boot->index_size < 0 ?
-				  1u << (-boot->index_size) :
-				  (u32)boot->index_size << sbi->cluster_bits;
+	sbi->index_size = boot->index_size < 0
+				  ? 1u << (-boot->index_size)
+				  : (u32)boot->index_size << sbi->cluster_bits;
 
 	sbi->volume.ser_num = le64_to_cpu(boot->serial_num);
 	sbi->volume.size = sectors << sbi->sector_bits;
diff --git a/fs/ntfs3/upcase.c b/fs/ntfs3/upcase.c
index f43af9c..bd828bc 100644
--- a/fs/ntfs3/upcase.c
+++ b/fs/ntfs3/upcase.c
@@ -54,10 +54,8 @@ int ntfs_cmp_names(const __le16 *s1, size_t l1, const __le16 *s2, size_t l2,
 			return diff2;
 	}
 
-	if (bothcase && diff1)
-		return diff1;
-
-	return l1 - l2;
+	diff2 = l1 - l2;
+	return diff2 ? diff2 : diff1;
 }
 
 int ntfs_cmp_names_cpu(const struct cpu_str *uni1, const struct le_str *uni2,
@@ -93,8 +91,6 @@ int ntfs_cmp_names_cpu(const struct cpu_str *uni1, const struct le_str *uni2,
 			return diff2;
 	}
 
-	if (bothcase && diff1)
-		return diff1;
-
-	return l1 - l2;
+	diff2 = l1 - l2;
+	return diff2 ? diff2 : diff1;
 }
diff --git a/fs/ntfs3/xattr.c b/fs/ntfs3/xattr.c
index f94f215..f81329e 100644
--- a/fs/ntfs3/xattr.c
+++ b/fs/ntfs3/xattr.c
@@ -26,8 +26,8 @@
 static inline size_t unpacked_ea_size(const struct EA_FULL *ea)
 {
 	return !ea->size ? DwordAlign(offsetof(struct EA_FULL, name) + 1 +
-				      ea->name_len + le16_to_cpu(ea->elength)) :
-			   le32_to_cpu(ea->size);
+				      ea->name_len + le16_to_cpu(ea->elength))
+			 : le32_to_cpu(ea->size);
 }
 
 static inline size_t packed_ea_size(const struct EA_FULL *ea)
@@ -876,9 +876,9 @@ static int ntfs_getxattr(const struct xattr_handler *handler, struct dentry *de,
 		     sizeof(XATTR_NAME_POSIX_ACL_DEFAULT)))) {
 		err = ntfs_xattr_get_acl(
 			inode,
-			name_len == sizeof(XATTR_NAME_POSIX_ACL_ACCESS) - 1 ?
-				ACL_TYPE_ACCESS :
-				ACL_TYPE_DEFAULT,
+			name_len == sizeof(XATTR_NAME_POSIX_ACL_ACCESS) - 1
+				? ACL_TYPE_ACCESS
+				: ACL_TYPE_DEFAULT,
 			buffer, size);
 		goto out;
 	}
@@ -1005,9 +1005,9 @@ static noinline int ntfs_setxattr(const struct xattr_handler *handler,
 		     sizeof(XATTR_NAME_POSIX_ACL_DEFAULT)))) {
 		err = ntfs_xattr_set_acl(
 			inode,
-			name_len == sizeof(XATTR_NAME_POSIX_ACL_ACCESS) - 1 ?
-				ACL_TYPE_ACCESS :
-				ACL_TYPE_DEFAULT,
+			name_len == sizeof(XATTR_NAME_POSIX_ACL_ACCESS) - 1
+				? ACL_TYPE_ACCESS
+				: ACL_TYPE_DEFAULT,
 			value, size);
 		goto out;
 	}
-- 
2.31.0.rc1

