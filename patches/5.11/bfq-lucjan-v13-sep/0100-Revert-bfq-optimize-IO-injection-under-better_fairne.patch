From 75eafaeb94a6fb1684508ea41a0f476903622054 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Tue, 20 Apr 2021 15:56:07 +0200
Subject: [PATCH 100/118] Revert "bfq: optimize IO injection under
 better_fairness"

This reverts commit 0db0ad00c92269d0e82552605db4dc42bc034c2b.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-iosched.c | 28 +---------------------------
 1 file changed, 1 insertion(+), 27 deletions(-)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index 06f1b57c2..1f332f6a2 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -1904,27 +1904,6 @@ static void bfq_reset_inject_limit(struct bfq_data *bfqd,
 	bfqq->decrease_time_jif = jiffies;
 }
 
-static bool bfq_bfqq_may_inject(struct bfq_queue *bfqq, struct bfq_queue *new_bfqq)
-{
-	struct bfq_data *bfqd = bfqq->bfqd;
-	bool ret = true;
-
-	if (unlikely(bfqd->better_fairness)) {
-		/*
-		 * In addition to throughput, better_fairness also pays
-		 * attention to Qos. In the container scenario, in order
-		 * to ensure the Qos of each group we only allow tasks
-		 * of the same class in the same group to be injected.
-		 */
-		if (bfq_class(bfqq) != bfq_class(new_bfqq))
-			ret = false;
-
-		if (bfqq_group(bfqq) != bfqq_group(new_bfqq))
-			ret = false;
-	}
-	return ret;
-}
-
 static void bfq_update_io_intensity(struct bfq_queue *bfqq, u64 now_ns)
 {
 	u64 tot_io_time = now_ns - bfqq->io_start_time;
@@ -2010,8 +1989,7 @@ static void bfq_check_waker(struct bfq_data *bfqd, struct bfq_queue *bfqq,
 	    bfqd->last_completed_rq_bfqq == bfqq ||
 	    bfq_bfqq_has_short_ttime(bfqq) ||
 	    now_ns - bfqd->last_completion >= 4 * NSEC_PER_MSEC ||
-	    bfqd->last_completed_rq_bfqq == bfqq->waker_bfqq ||
-	    !bfq_bfqq_may_inject(bfqq, bfqd->last_completed_rq_bfqq))
+	    bfqd->last_completed_rq_bfqq == bfqq->waker_bfqq)
 		return;
 
 	if (bfqd->last_completed_rq_bfqq !=
@@ -4524,9 +4502,6 @@ bfq_choose_bfqq_for_injection(struct bfq_data *bfqd)
 			else
 				limit = in_serv_bfqq->inject_limit;
 
-			if (!bfq_bfqq_may_inject(in_serv_bfqq, bfqq))
-				continue;
-
 			if (bfqd->rq_in_driver < limit) {
 				bfqd->rqs_injected = true;
 				return bfqq;
@@ -4716,7 +4691,6 @@ static struct bfq_queue *bfq_select_queue(struct bfq_data *bfqd)
 		 * happen to be served only after other queues.
 		 */
 		if (async_bfqq &&
-		    !(bfqd->better_fairness && !bfq_class_idx(&bfqq->entity)) &&
 		    icq_to_bic(async_bfqq->next_rq->elv.icq) == bfqq->bic &&
 		    bfq_serv_to_charge(async_bfqq->next_rq, async_bfqq) <=
 		    bfq_bfqq_budget_left(async_bfqq))
-- 
2.31.1.305.gd1b10fc6d8

