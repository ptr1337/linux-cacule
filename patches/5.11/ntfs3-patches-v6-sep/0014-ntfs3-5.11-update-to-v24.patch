From f55ef5e5d29358ed1f7d0a256c0bdc1ca3717fc9 Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Sat, 20 Mar 2021 23:29:02 +0100
Subject: [PATCH 14/16] ntfs3-5.11: update to v24

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 fs/ntfs3/Makefile  |  3 +++
 fs/ntfs3/fslog.c   |  6 +++++-
 fs/ntfs3/fsntfs.c  |  7 +++++--
 fs/ntfs3/index.c   |  4 ++--
 fs/ntfs3/ntfs_fs.h |  2 +-
 fs/ntfs3/super.c   | 18 +++++++-----------
 6 files changed, 23 insertions(+), 17 deletions(-)

diff --git a/fs/ntfs3/Makefile b/fs/ntfs3/Makefile
index b9aacc061..b06a06cc0 100644
--- a/fs/ntfs3/Makefile
+++ b/fs/ntfs3/Makefile
@@ -3,6 +3,9 @@
 # Makefile for the ntfs3 filesystem support.
 #
 
+# to check robot warnings
+ccflags-y += -Wunused-but-set-variable -Wold-style-declaration -Wint-to-pointer-cast
+
 obj-$(CONFIG_NTFS3_FS) += ntfs3.o
 
 ntfs3-y :=	attrib.o \
diff --git a/fs/ntfs3/fslog.c b/fs/ntfs3/fslog.c
index 94cc4d100..e9260d472 100644
--- a/fs/ntfs3/fslog.c
+++ b/fs/ntfs3/fslog.c
@@ -3756,8 +3756,9 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
  *
  * this function is called during mount operation
  * it replays log and empties it
+ * initialized is set false if logfile contains '-1'
  */
-int log_replay(struct ntfs_inode *ni)
+int log_replay(struct ntfs_inode *ni, bool *initialized)
 {
 	int err;
 	struct ntfs_sb_info *sbi = ni->mi.sbi;
@@ -3830,6 +3831,9 @@ int log_replay(struct ntfs_inode *ni)
 	if (err)
 		goto out;
 
+	/* remember 'initialized' */
+	*initialized = rst_info.initialized;
+
 	if (!rst_info.restart) {
 		if (rst_info.initialized) {
 			/* no restart area but the file is not initialized */
diff --git a/fs/ntfs3/fsntfs.c b/fs/ntfs3/fsntfs.c
index 4edd583c6..ac466ed9b 100644
--- a/fs/ntfs3/fsntfs.c
+++ b/fs/ntfs3/fsntfs.c
@@ -258,6 +258,7 @@ int ntfs_loadlog_and_replay(struct ntfs_inode *ni, struct ntfs_sb_info *sbi)
 	int err = 0;
 	struct super_block *sb = sbi->sb;
 	struct inode *inode = &ni->vfs_inode;
+	bool initialized = false;
 	struct MFT_REF ref;
 
 	/* Check for 4GB */
@@ -297,9 +298,10 @@ int ntfs_loadlog_and_replay(struct ntfs_inode *ni, struct ntfs_sb_info *sbi)
 
 	sbi->mft.ni = ntfs_i(inode);
 
+	/* LogFile should not contains attribute list */
 	err = ni_load_all_mi(sbi->mft.ni);
 	if (!err)
-		err = log_replay(ni);
+		err = log_replay(ni, &initialized);
 
 	iput(inode);
 	sbi->mft.ni = NULL;
@@ -312,9 +314,10 @@ int ntfs_loadlog_and_replay(struct ntfs_inode *ni, struct ntfs_sb_info *sbi)
 		goto out;
 	}
 
-	if (sb_rdonly(sb))
+	if (sb_rdonly(sb) || !initialized)
 		goto out;
 
+	/* fill LogFile by '-1' if it is initialized */
 	err = ntfs_bio_fill_1(sbi, &ni->file.run);
 
 out:
diff --git a/fs/ntfs3/index.c b/fs/ntfs3/index.c
index 8ccb4ed5d..789952d37 100644
--- a/fs/ntfs3/index.c
+++ b/fs/ntfs3/index.c
@@ -551,7 +551,7 @@ int indx_used_bit(struct ntfs_index *indx, struct ntfs_inode *ni, size_t *bit)
  * be split.
  * NOTE: This function should never return 'END' entry NULL returns on error
  */
-static inline const struct NTFS_DE *hdr_find_split(const struct INDEX_HDR *hdr)
+static const struct NTFS_DE *hdr_find_split(const struct INDEX_HDR *hdr)
 {
 	size_t o;
 	const struct NTFS_DE *e = hdr_first_de(hdr);
@@ -582,7 +582,7 @@ static inline const struct NTFS_DE *hdr_find_split(const struct INDEX_HDR *hdr)
  * inserts some entries at the beginning of the buffer.
  * It is used to insert entries into a newly-created buffer.
  */
-static inline const struct NTFS_DE *
+static const struct NTFS_DE *
 hdr_insert_head(struct INDEX_HDR *hdr, const void *ins, u32 ins_bytes)
 {
 	u32 to_move;
diff --git a/fs/ntfs3/ntfs_fs.h b/fs/ntfs3/ntfs_fs.h
index 984656737..f9453457a 100644
--- a/fs/ntfs3/ntfs_fs.h
+++ b/fs/ntfs3/ntfs_fs.h
@@ -524,7 +524,7 @@ int ni_write_frame(struct ntfs_inode *ni, struct page **pages,
 		   u32 pages_per_frame);
 
 /* globals from fslog.c */
-int log_replay(struct ntfs_inode *ni);
+int log_replay(struct ntfs_inode *ni, bool *initialized);
 
 /* globals from fsntfs.c */
 bool ntfs_fix_pre_write(struct NTFS_RECORD_HEADER *rhdr, size_t bytes);
diff --git a/fs/ntfs3/super.c b/fs/ntfs3/super.c
index 3d45e7055..96587689c 100644
--- a/fs/ntfs3/super.c
+++ b/fs/ntfs3/super.c
@@ -391,17 +391,13 @@ static int ntfs_remount(struct super_block *sb, int *flags, char *data)
 	if (err)
 		goto restore_opts;
 
-	ro_rw = 0;
-	if (sb_rdonly(sb) && !(*flags & SB_RDONLY)) {
-		/* ro -> rw */
-		ro_rw = 1;
-		if (sbi->flags & NTFS_FLAGS_NEED_REPLAY) {
-			ntfs_warn(
-				sb,
-				"Couldn't remount rw because journal is not replayed. Please umount/remount instead\n");
-			err = -EINVAL;
-			goto restore_opts;
-		}
+	ro_rw = sb_rdonly(sb) && !(*flags & SB_RDONLY);
+	if (ro_rw && (sbi->flags & NTFS_FLAGS_NEED_REPLAY)) {
+		ntfs_warn(
+			sb,
+			"Couldn't remount rw because journal is not replayed. Please umount/remount instead\n");
+		err = -EINVAL;
+		goto restore_opts;
 	}
 
 	sync_filesystem(sb);
-- 
2.31.0.97.g1424303384

