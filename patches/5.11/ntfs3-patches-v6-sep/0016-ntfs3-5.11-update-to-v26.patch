From 816692e54342705f606067dc700b1b0bf031a23e Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Fri, 2 Apr 2021 21:01:33 +0200
Subject: [PATCH 16/16] ntfs3-5.11: update to v26

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 fs/ntfs3/attrib.c  |   7 +--
 fs/ntfs3/frecord.c |   2 +-
 fs/ntfs3/fslog.c   | 149 +++++++++++++++++++--------------------------
 fs/ntfs3/fsntfs.c  |   3 +-
 fs/ntfs3/ntfs.h    |  15 ++---
 fs/ntfs3/ntfs_fs.h |  16 +++--
 fs/ntfs3/super.c   |  24 ++++----
 fs/ntfs3/xattr.c   |  66 ++++++++++----------
 8 files changed, 123 insertions(+), 159 deletions(-)

diff --git a/fs/ntfs3/attrib.c b/fs/ntfs3/attrib.c
index 188c8b280..bca85e7b6 100644
--- a/fs/ntfs3/attrib.c
+++ b/fs/ntfs3/attrib.c
@@ -1724,11 +1724,10 @@ int attr_collapse_range(struct ntfs_inode *ni, u64 vbo, u64 bytes)
 		mask = sbi->cluster_mask;
 	}
 
-	if (vbo & mask)
-		return -EINVAL;
-
-	if (bytes & mask)
+	if ((vbo & mask) || (bytes & mask)) {
+		/* allow to collapse only cluster aligned ranges */
 		return -EINVAL;
+	}
 
 	if (vbo > data_size)
 		return -EINVAL;
diff --git a/fs/ntfs3/frecord.c b/fs/ntfs3/frecord.c
index 27ccb3706..c3121bf9c 100644
--- a/fs/ntfs3/frecord.c
+++ b/fs/ntfs3/frecord.c
@@ -647,7 +647,7 @@ static int ni_repack(struct ntfs_inode *ni)
 	}
 
 	if (err) {
-		ntfs_inode_warn(&ni->vfs_inode, "there is a problem");
+		ntfs_inode_warn(&ni->vfs_inode, "repack problem");
 		ntfs_set_state(sbi, NTFS_DIRTY_ERROR);
 
 		/* Pack loaded but not packed runs */
diff --git a/fs/ntfs3/fslog.c b/fs/ntfs3/fslog.c
index fc287a500..53da12252 100644
--- a/fs/ntfs3/fslog.c
+++ b/fs/ntfs3/fslog.c
@@ -35,7 +35,7 @@ struct RESTART_HDR {
 	__le16 ra_off;        // 0x18:
 	__le16 minor_ver;     // 0x1A:
 	__le16 major_ver;     // 0x1C:
-	__le16 fixups[1];
+	__le16 fixups[];
 };
 
 #define LFS_NO_CLIENT 0xffff
@@ -69,7 +69,7 @@ struct RESTART_AREA {
 	__le16 data_off;       // 0x26: log page data length
 	__le32 open_log_count; // 0x28:
 	__le32 align[5];       // 0x2C:
-	struct CLIENT_REC clients[1]; // 0x40:
+	struct CLIENT_REC clients[]; // 0x40:
 };
 
 struct LOG_REC_HDR {
@@ -86,10 +86,10 @@ struct LOG_REC_HDR {
 	__le16 cluster_off;  // 0x14:
 	__le16 reserved;     // 0x16:
 	__le64 target_vcn;   // 0x18:
-	__le64 page_lcns[1]; // 0x20:
+	__le64 page_lcns[];  // 0x20:
 };
 
-static_assert(sizeof(struct LOG_REC_HDR) == 0x28);
+static_assert(sizeof(struct LOG_REC_HDR) == 0x20);
 
 #define RESTART_ENTRY_ALLOCATED    0xFFFFFFFF
 #define RESTART_ENTRY_ALLOCATED_LE cpu_to_le32(0xFFFFFFFF)
@@ -110,7 +110,7 @@ static_assert(sizeof(struct RESTART_TABLE) == 0x18);
 struct ATTR_NAME_ENTRY {
 	__le16 off; // offset in the Open attribute Table
 	__le16 name_bytes;
-	__le16 name[1];
+	__le16 name[];
 };
 
 struct OPEN_ATTR_ENRTY {
@@ -157,10 +157,10 @@ struct DIR_PAGE_ENTRY {
 	__le32 lcns_follow;  // 0x0C:
 	__le64 vcn;          // 0x10:  Vcn of dirty page
 	__le64 oldest_lsn;   // 0x18:
-	__le64 page_lcns[1]; // 0x20:
+	__le64 page_lcns[];  // 0x20:
 };
 
-static_assert(sizeof(struct DIR_PAGE_ENTRY) == 0x28);
+static_assert(sizeof(struct DIR_PAGE_ENTRY) == 0x20);
 
 /* 32 bit version of 'struct DIR_PAGE_ENTRY' */
 struct DIR_PAGE_ENTRY_32 {
@@ -392,8 +392,7 @@ static inline u32 lrh_length(const struct LOG_REC_HDR *lr)
 {
 	u16 t16 = le16_to_cpu(lr->lcns_follow);
 
-	return t16 > 1 ? sizeof(struct LOG_REC_HDR) + (t16 - 1) * sizeof(u64)
-		       : sizeof(struct LOG_REC_HDR);
+	return struct_size(lr, page_lcns, max_t(u16, 1, t16));
 }
 
 struct lcb {
@@ -1370,8 +1369,7 @@ static void log_create(struct ntfs_log *log, u32 l_size, const u64 last_lsn,
 		offsetof(struct RESTART_HDR, fixups) +
 		sizeof(short) * ((log->sys_page_size >> SECTOR_SHIFT) + 1));
 	log->restart_size = log->sys_page_size - log->ra_off;
-	log->ra_size = offsetof(struct RESTART_AREA, clients) +
-		       sizeof(struct CLIENT_REC);
+	log->ra_size = struct_size(log->ra, clients, 1);
 	log->current_openlog_count = open_log_count;
 
 	/*
@@ -3047,9 +3045,11 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 	struct ATTR_FILE_NAME *fname;
 	struct OpenAttr *oa, *oa2;
 	u32 nsize, t32, asize, used, esize, bmp_off, bmp_bits;
-	u16 t16, id, id2;
+	u16 id, id2;
 	u32 record_size = sbi->record_size;
 	u64 t64;
+	u16 roff = le16_to_cpu(lrh->record_off);
+	u16 aoff = le16_to_cpu(lrh->attr_off);
 	u64 lco = 0;
 	u64 cbo = (u64)le16_to_cpu(lrh->cluster_off) << SECTOR_SHIFT;
 	u64 tvo = le64_to_cpu(lrh->target_vcn) << sbi->cluster_bits;
@@ -3081,7 +3081,6 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 	case UpdateFileNameRoot:
 	case UpdateRecordDataRoot:
 	case ZeroEndOfFileRecord:
-
 		rno = vbo >> sbi->record_bits;
 		inode = ilookup(sbi->sb, rno);
 		if (inode) {
@@ -3111,7 +3110,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 				goto out;
 			if (!check_file_record(rec, NULL, sbi))
 				goto dirty_vol;
-			attr = Add2Ptr(rec, le16_to_cpu(lrh->record_off));
+			attr = Add2Ptr(rec, roff);
 		}
 
 		if (is_rec_base(rec) || InitializeFileRecordSegment == op) {
@@ -3144,7 +3143,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 			inode = inode_parent;
 			mi = mi2_child;
 			rec = mi2_child->mrec;
-			attr = Add2Ptr(rec, le16_to_cpu(lrh->record_off));
+			attr = Add2Ptr(rec, roff);
 		}
 
 skip_load_parent:
@@ -3164,7 +3163,6 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 	case SetBitsInNonresidentBitMap:
 	case ClearBitsInNonresidentBitMap:
 	case UpdateRecordDataAllocation:
-
 		attr = oa->attr;
 		bytes = UpdateNonresidentValue == op ? dlen : 0;
 		lco = (u64)le16_to_cpu(lrh->lcns_follow) << sbi->cluster_bits;
@@ -3178,7 +3176,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		if (!bytes)
 			bytes = lco - cbo;
 
-		bytes += le16_to_cpu(lrh->record_off);
+		bytes += roff;
 		if (attr->type == ATTR_ALLOC)
 			bytes = (bytes + 511) & ~511; // align
 
@@ -3202,11 +3200,10 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 	/* Big switch to do operation */
 	switch (op) {
 	case InitializeFileRecordSegment:
-		t16 = le16_to_cpu(lrh->record_off);
-		if (t16 + dlen > record_size)
+		if (roff + dlen > record_size)
 			goto dirty_vol;
 
-		memcpy(Add2Ptr(rec, t16), data, dlen);
+		memcpy(Add2Ptr(rec, roff), data, dlen);
 		mi->dirty = true;
 		break;
 
@@ -3218,13 +3215,11 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 
 	case WriteEndOfFileRecordSegment:
 		attr2 = (struct ATTRIB *)data;
-		t16 = le16_to_cpu(lrh->record_off);
-
-		if (!check_if_attr(rec, lrh) || t16 + dlen > record_size)
+		if (!check_if_attr(rec, lrh) || roff + dlen > record_size)
 			goto dirty_vol;
 
 		memmove(attr, attr2, dlen);
-		rec->used = cpu_to_le32(QuadAlign(t16 + dlen));
+		rec->used = cpu_to_le32(QuadAlign(roff + dlen));
 
 		mi->dirty = true;
 		break;
@@ -3233,7 +3228,6 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		attr2 = (struct ATTRIB *)data;
 		asize = le32_to_cpu(attr2->size);
 		used = le32_to_cpu(rec->used);
-		t16 = le16_to_cpu(lrh->record_off);
 
 		if (!check_if_attr(rec, lrh) || dlen < SIZEOF_RESIDENT ||
 		    !IsQuadAligned(asize) ||
@@ -3242,7 +3236,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 			goto dirty_vol;
 		}
 
-		memmove(Add2Ptr(attr, asize), attr, used - t16);
+		memmove(Add2Ptr(attr, asize), attr, used - roff);
 		memcpy(attr, attr2, asize);
 
 		rec->used = cpu_to_le32(used + asize);
@@ -3270,7 +3264,6 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 	case DeleteAttribute:
 		asize = le32_to_cpu(attr->size);
 		used = le32_to_cpu(rec->used);
-		t16 = le16_to_cpu(lrh->record_off);
 
 		if (!check_if_attr(rec, lrh))
 			goto dirty_vol;
@@ -3279,14 +3272,13 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		if (is_attr_indexed(attr))
 			le16_add_cpu(&rec->hard_links, -1);
 
-		memmove(attr, Add2Ptr(attr, asize), used - t16);
+		memmove(attr, Add2Ptr(attr, asize), used - asize - roff);
 
 		mi->dirty = true;
 		break;
 
 	case UpdateResidentValue:
-		t16 = le16_to_cpu(lrh->attr_off);
-		nsize = t16 + dlen;
+		nsize = aoff + dlen;
 
 		if (!check_if_attr(rec, lrh))
 			goto dirty_vol;
@@ -3307,7 +3299,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		data_off = le16_to_cpu(attr->res.data_off);
 
 		if (nsize < asize) {
-			memmove(Add2Ptr(attr, t16), data, dlen);
+			memmove(Add2Ptr(attr, aoff), data, dlen);
 			data = NULL; // To skip below memmove
 		}
 
@@ -3316,11 +3308,11 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 
 		rec->used = cpu_to_le32(used + nsize - asize);
 		attr->size = cpu_to_le32(nsize);
-		attr->res.data_size = cpu_to_le32(t16 + dlen - data_off);
+		attr->res.data_size = cpu_to_le32(aoff + dlen - data_off);
 
 move_data:
 		if (data)
-			memmove(Add2Ptr(attr, t16), data, dlen);
+			memmove(Add2Ptr(attr, aoff), data, dlen);
 
 		oa2 = find_loaded_attr(log, attr, rno_base);
 		if (oa2) {
@@ -3338,13 +3330,12 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		break;
 
 	case UpdateMappingPairs:
-		t16 = le16_to_cpu(lrh->attr_off);
-		nsize = t16 + dlen;
+		nsize = aoff + dlen;
 		asize = le32_to_cpu(attr->size);
 		used = le32_to_cpu(rec->used);
 
 		if (!check_if_attr(rec, lrh) || !attr->non_res ||
-		    t16 < le16_to_cpu(attr->nres.run_off) || t16 > asize ||
+		    aoff < le16_to_cpu(attr->nres.run_off) || aoff > asize ||
 		    (nsize > asize && nsize - asize > record_size - used)) {
 			goto dirty_vol;
 		}
@@ -3355,7 +3346,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 			used - le16_to_cpu(lrh->record_off) - asize);
 		rec->used = cpu_to_le32(used + nsize - asize);
 		attr->size = cpu_to_le32(nsize);
-		memmove(Add2Ptr(attr, t16), data, dlen);
+		memmove(Add2Ptr(attr, aoff), data, dlen);
 
 		if (run_get_highest_vcn(le64_to_cpu(attr->nres.svcn),
 					attr_run(attr), &t64)) {
@@ -3372,7 +3363,6 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 
 	case SetNewAttributeSizes:
 		new_sz = data;
-
 		if (!check_if_attr(rec, lrh) || !attr->non_res)
 			goto dirty_vol;
 
@@ -3496,8 +3486,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		break;
 
 	case ZeroEndOfFileRecord:
-		t16 = le16_to_cpu(lrh->record_off);
-		if (t16 + dlen > record_size)
+		if (roff + dlen > record_size)
 			goto dirty_vol;
 
 		memset(attr, 0, dlen);
@@ -3505,12 +3494,10 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		break;
 
 	case UpdateNonresidentValue:
-		t16 = le16_to_cpu(lrh->record_off);
-
-		if (lco < cbo + t16 + dlen)
+		if (lco < cbo + roff + dlen)
 			goto dirty_vol;
 
-		memcpy(Add2Ptr(buffer_le, t16), data, dlen);
+		memcpy(Add2Ptr(buffer_le, roff), data, dlen);
 
 		a_dirty = true;
 		if (attr->type == ATTR_ALLOC)
@@ -3518,13 +3505,11 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		break;
 
 	case AddIndexEntryAllocation:
-		t16 = le16_to_cpu(lrh->record_off);
-		ib = Add2Ptr(buffer_le, t16);
+		ib = Add2Ptr(buffer_le, roff);
 		hdr = &ib->ihdr;
 		e = data;
 		esize = le16_to_cpu(e->size);
-		t16 = le16_to_cpu(lrh->attr_off);
-		e1 = Add2Ptr(ib, t16);
+		e1 = Add2Ptr(ib, aoff);
 
 		if (is_baad(&ib->rhdr))
 			goto dirty_vol;
@@ -3534,7 +3519,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		used = le32_to_cpu(hdr->used);
 
 		if (!check_index_buffer(ib, bytes) ||
-		    !check_if_alloc_index(hdr, t16) ||
+		    !check_if_alloc_index(hdr, aoff) ||
 		    Add2Ptr(e, esize) > Add2Ptr(lrh, rec_len) ||
 		    used + esize > le32_to_cpu(hdr->total)) {
 			goto dirty_vol;
@@ -3552,11 +3537,9 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		break;
 
 	case DeleteIndexEntryAllocation:
-		t16 = le16_to_cpu(lrh->record_off);
-		ib = Add2Ptr(buffer_le, t16);
+		ib = Add2Ptr(buffer_le, roff);
 		hdr = &ib->ihdr;
-		t16 = le16_to_cpu(lrh->attr_off);
-		e = Add2Ptr(ib, t16);
+		e = Add2Ptr(ib, aoff);
 		esize = le16_to_cpu(e->size);
 
 		if (is_baad(&ib->rhdr))
@@ -3565,7 +3548,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 			goto out;
 
 		if (!check_index_buffer(ib, bytes) ||
-		    !check_if_alloc_index(hdr, t16)) {
+		    !check_if_alloc_index(hdr, aoff)) {
 			goto dirty_vol;
 		}
 
@@ -3583,20 +3566,18 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		break;
 
 	case WriteEndOfIndexBuffer:
-		t16 = le16_to_cpu(lrh->record_off);
-		ib = Add2Ptr(buffer_le, t16);
+		ib = Add2Ptr(buffer_le, roff);
 		hdr = &ib->ihdr;
-		t16 = le16_to_cpu(lrh->attr_off);
-		e = Add2Ptr(ib, t16);
+		e = Add2Ptr(ib, aoff);
 
 		if (is_baad(&ib->rhdr))
 			goto dirty_vol;
 		if (!check_lsn(&ib->rhdr, rlsn))
 			goto out;
 		if (!check_index_buffer(ib, bytes) ||
-		    !check_if_alloc_index(hdr, t16) ||
-		    t16 + dlen > offsetof(struct INDEX_BUFFER, ihdr) +
-					 le32_to_cpu(hdr->total)) {
+		    !check_if_alloc_index(hdr, aoff) ||
+		    aoff + dlen > offsetof(struct INDEX_BUFFER, ihdr) +
+					  le32_to_cpu(hdr->total)) {
 			goto dirty_vol;
 		}
 
@@ -3608,11 +3589,9 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		break;
 
 	case SetIndexEntryVcnAllocation:
-		t16 = le16_to_cpu(lrh->record_off);
-		ib = Add2Ptr(buffer_le, t16);
+		ib = Add2Ptr(buffer_le, roff);
 		hdr = &ib->ihdr;
-		t16 = le16_to_cpu(lrh->attr_off);
-		e = Add2Ptr(ib, t16);
+		e = Add2Ptr(ib, aoff);
 
 		if (is_baad(&ib->rhdr))
 			goto dirty_vol;
@@ -3620,7 +3599,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		if (!check_lsn(&ib->rhdr, rlsn))
 			goto out;
 		if (!check_index_buffer(ib, bytes) ||
-		    !check_if_alloc_index(hdr, t16)) {
+		    !check_if_alloc_index(hdr, aoff)) {
 			goto dirty_vol;
 		}
 
@@ -3631,11 +3610,9 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		break;
 
 	case UpdateFileNameAllocation:
-		t16 = le16_to_cpu(lrh->record_off);
-		ib = Add2Ptr(buffer_le, t16);
+		ib = Add2Ptr(buffer_le, roff);
 		hdr = &ib->ihdr;
-		t16 = le16_to_cpu(lrh->attr_off);
-		e = Add2Ptr(ib, t16);
+		e = Add2Ptr(ib, aoff);
 
 		if (is_baad(&ib->rhdr))
 			goto dirty_vol;
@@ -3643,7 +3620,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		if (!check_lsn(&ib->rhdr, rlsn))
 			goto out;
 		if (!check_index_buffer(ib, bytes) ||
-		    !check_if_alloc_index(hdr, t16)) {
+		    !check_if_alloc_index(hdr, aoff)) {
 			goto dirty_vol;
 		}
 
@@ -3658,14 +3635,13 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		bmp_off =
 			le32_to_cpu(((struct BITMAP_RANGE *)data)->bitmap_off);
 		bmp_bits = le32_to_cpu(((struct BITMAP_RANGE *)data)->bits);
-		t16 = le16_to_cpu(lrh->record_off);
 
 		if (cbo + (bmp_off + 7) / 8 > lco ||
 		    cbo + ((bmp_off + bmp_bits + 7) / 8) > lco) {
 			goto dirty_vol;
 		}
 
-		__bitmap_set(Add2Ptr(buffer_le, t16), bmp_off, bmp_bits);
+		__bitmap_set(Add2Ptr(buffer_le, roff), bmp_off, bmp_bits);
 		a_dirty = true;
 		break;
 
@@ -3673,23 +3649,20 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		bmp_off =
 			le32_to_cpu(((struct BITMAP_RANGE *)data)->bitmap_off);
 		bmp_bits = le32_to_cpu(((struct BITMAP_RANGE *)data)->bits);
-		t16 = le16_to_cpu(lrh->record_off);
 
 		if (cbo + (bmp_off + 7) / 8 > lco ||
 		    cbo + ((bmp_off + bmp_bits + 7) / 8) > lco) {
 			goto dirty_vol;
 		}
 
-		__bitmap_clear(Add2Ptr(buffer_le, t16), bmp_off, bmp_bits);
+		__bitmap_clear(Add2Ptr(buffer_le, roff), bmp_off, bmp_bits);
 		a_dirty = true;
 		break;
 
 	case UpdateRecordDataAllocation:
-		t16 = le16_to_cpu(lrh->record_off);
-		ib = Add2Ptr(buffer_le, t16);
+		ib = Add2Ptr(buffer_le, roff);
 		hdr = &ib->ihdr;
-		t16 = le16_to_cpu(lrh->attr_off);
-		e = Add2Ptr(ib, t16);
+		e = Add2Ptr(ib, aoff);
 
 		if (is_baad(&ib->rhdr))
 			goto dirty_vol;
@@ -3697,7 +3670,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 		if (!check_lsn(&ib->rhdr, rlsn))
 			goto out;
 		if (!check_index_buffer(ib, bytes) ||
-		    !check_if_alloc_index(hdr, t16)) {
+		    !check_if_alloc_index(hdr, aoff)) {
 			goto dirty_vol;
 		}
 
@@ -3720,9 +3693,7 @@ static int do_action(struct ntfs_log *log, struct OPEN_ATTR_ENRTY *oe,
 			ib->rhdr.lsn = t64;
 	}
 
-	if (inode) {
-		err = _ni_write_inode(inode, 0);
-	} else if (mi && mi->dirty) {
+	if (mi && mi->dirty) {
 		err = mi_write(mi, 0);
 		if (err)
 			goto out;
@@ -4495,14 +4466,13 @@ int log_replay(struct ntfs_inode *ni, bool *initialized)
 		 * which wrote the checkpoint, possibly creating the table
 		 */
 		if (dptbl) {
-			t32 = 1 + (le16_to_cpu(dptbl->size) -
-				   sizeof(struct DIR_PAGE_ENTRY)) /
-					  sizeof(u64);
+			t32 = (le16_to_cpu(dptbl->size) -
+			       sizeof(struct DIR_PAGE_ENTRY)) /
+			      sizeof(u64);
 		} else {
 			t32 = log->clst_per_page;
 			ntfs_free(dptbl);
-			dptbl = init_rsttbl(sizeof(struct DIR_PAGE_ENTRY) +
-						    (t32 - 1) * sizeof(u64),
+			dptbl = init_rsttbl(struct_size(dp, page_lcns, t32),
 					    32);
 			if (!dptbl) {
 				err = -ENOMEM;
@@ -5097,6 +5067,9 @@ int log_replay(struct ntfs_inode *ni, bool *initialized)
 	if (rec_lsn)
 		goto undo_action_next;
 
+	lcb_put(lcb);
+	lcb = NULL;
+
 commit_undo:
 	free_rsttbl_idx(trtbl, log->transaction_id);
 
diff --git a/fs/ntfs3/fsntfs.c b/fs/ntfs3/fsntfs.c
index f1d7cea2c..38be81c21 100644
--- a/fs/ntfs3/fsntfs.c
+++ b/fs/ntfs3/fsntfs.c
@@ -1728,8 +1728,7 @@ static_assert(sizeof(s_default_security) == 0x50);
 
 static inline u32 sid_length(const struct SID *sid)
 {
-	return offsetof(struct SID, SubAuthority[0]) +
-	       (sid->SubAuthorityCount * sizeof(u32));
+	return struct_size(sid, SubAuthority, sid->SubAuthorityCount);
 }
 
 /*
diff --git a/fs/ntfs3/ntfs.h b/fs/ntfs3/ntfs.h
index d3d3d93a1..40398e6c3 100644
--- a/fs/ntfs3/ntfs.h
+++ b/fs/ntfs3/ntfs.h
@@ -64,7 +64,7 @@ struct cpu_str {
 struct le_str {
 	u8 len;
 	u8 unused;
-	__le16 name[1];
+	__le16 name[];
 };
 
 static_assert(SECTOR_SHIFT == 9);
@@ -285,7 +285,7 @@ struct MFT_REC {
 
 	__le16 res;		// 0x2A: High part of mft record?
 	__le32 mft_record;	// 0x2C: Current mft record number
-	__le16 fixups[1];	// 0x30:
+	__le16 fixups[];	// 0x30:
 };
 
 #define MFTRECORD_FIXUP_OFFSET_1 offsetof(struct MFT_REC, res)
@@ -572,7 +572,7 @@ struct ATTR_FILE_NAME {
 	struct NTFS_DUP_INFO dup;// 0x08
 	u8 name_len;		// 0x40: File name length in words
 	u8 type;		// 0x41: File name type
-	__le16 name[1];		// 0x42: File name
+	__le16 name[];		// 0x42: File name
 };
 
 static_assert(sizeof(((struct ATTR_FILE_NAME *)NULL)->dup) == 0x38);
@@ -587,6 +587,7 @@ static inline struct ATTRIB *attr_from_name(struct ATTR_FILE_NAME *fname)
 
 static inline u16 fname_full_size(const struct ATTR_FILE_NAME *fname)
 {
+	// don't return struct_size(fname, name, fname->name_len);
 	return offsetof(struct ATTR_FILE_NAME, name) +
 	       fname->name_len * sizeof(short);
 }
@@ -1137,7 +1138,7 @@ struct REPARSE_DATA_BUFFER {
 			__le16 SubstituteNameLength; // 0x0A
 			__le16 PrintNameOffset;      // 0x0C
 			__le16 PrintNameLength;      // 0x0E
-			__le16 PathBuffer[1];	     // 0x10
+			__le16 PathBuffer[];	     // 0x10
 		} MountPointReparseBuffer;
 
 		// If ReparseTag == 0xA000000C (IO_REPARSE_TAG_SYMLINK)
@@ -1149,7 +1150,7 @@ struct REPARSE_DATA_BUFFER {
 			__le16 PrintNameLength;      // 0x0E
 			// 0-absolute path 1- relative path, SYMLINK_FLAG_RELATIVE
 			__le32 Flags;		     // 0x10
-			__le16 PathBuffer[1];	     // 0x14
+			__le16 PathBuffer[];	     // 0x14
 		} SymbolicLinkReparseBuffer;
 
 		// If ReparseTag == 0x80000017U
@@ -1189,7 +1190,7 @@ struct EA_FULL {
 	u8 flags;		// 0x04
 	u8 name_len;		// 0x05
 	__le16 elength;		// 0x06
-	u8 name[1];		// 0x08
+	u8 name[];		// 0x08
 };
 
 static_assert(offsetof(struct EA_FULL, name) == 8);
@@ -1230,7 +1231,7 @@ struct SID {
 	u8 Revision;
 	u8 SubAuthorityCount;
 	u8 IdentifierAuthority[6];
-	__le32 SubAuthority[1];
+	__le32 SubAuthority[];
 };
 static_assert(offsetof(struct SID, SubAuthority) == 8);
 
diff --git a/fs/ntfs3/ntfs_fs.h b/fs/ntfs3/ntfs_fs.h
index 60986dbc0..b27e8560c 100644
--- a/fs/ntfs3/ntfs_fs.h
+++ b/fs/ntfs3/ntfs_fs.h
@@ -21,8 +21,13 @@
 
 /* sbi->flags */
 #define NTFS_FLAGS_NODISCARD		0x00000001
+/* Set when LogFile is replaying */
+#define NTFS_FLAGS_LOG_REPLAYING	0x00000008
+/* Set when we changed first MFT's which copy must be updated in $MftMirr */
+#define NTFS_FLAGS_MFTMIRR		0x00001000
 #define NTFS_FLAGS_NEED_REPLAY		0x04000000
 
+
 /* ni->ni_flags */
 /*
  * Data attribute is external compressed (lzx/xpress)
@@ -154,12 +159,6 @@ struct ntfs_index {
 	u8 type; // index_mutex_classed
 };
 
-/* Set when LogFile is replaying */
-#define NTFS_FLAGS_LOG_REPLAYING 0x00000008
-
-/* Set when we changed first MFT's which copy must be updated in $MftMirr */
-#define NTFS_FLAGS_MFTMIRR 0x00001000
-
 /* Minimum mft zone */
 #define NTFS_MIN_MFT_ZONE 100
 
@@ -539,7 +538,7 @@ int ntfs_look_for_free_space(struct ntfs_sb_info *sbi, CLST lcn, CLST len,
 			     enum ALLOCATE_OPT opt);
 int ntfs_look_free_mft(struct ntfs_sb_info *sbi, CLST *rno, bool mft,
 		       struct ntfs_inode *ni, struct mft_inode **mi);
-void ntfs_mark_rec_free(struct ntfs_sb_info *sbi, CLST nRecord);
+void ntfs_mark_rec_free(struct ntfs_sb_info *sbi, CLST rno);
 int ntfs_clear_mft_tail(struct ntfs_sb_info *sbi, size_t from, size_t to);
 int ntfs_refresh_zone(struct ntfs_sb_info *sbi);
 int ntfs_update_mftmirr(struct ntfs_sb_info *sbi, int wait);
@@ -951,9 +950,8 @@ static inline u64 bytes_to_block(const struct super_block *sb, u64 size)
 static inline struct buffer_head *ntfs_bread(struct super_block *sb,
 					     sector_t block)
 {
-	struct buffer_head *bh;
+	struct buffer_head *bh = sb_bread(sb, block);
 
-	bh = sb_bread(sb, block);
 	if (bh)
 		return bh;
 
diff --git a/fs/ntfs3/super.c b/fs/ntfs3/super.c
index 961782c76..b6122a70e 100644
--- a/fs/ntfs3/super.c
+++ b/fs/ntfs3/super.c
@@ -82,26 +82,24 @@ void ntfs_inode_printk(struct inode *inode, const char *fmt, ...)
 	if (!___ratelimit(&sbi->msg_ratelimit, "ntfs3"))
 		return;
 
-	if (atomic_dec_and_test(&s_name_buf_cnt)) {
-		/* use static allocated buffer */
-		name = s_name_buf;
-	} else {
-		name = kmalloc(sizeof(s_name_buf), GFP_NOFS);
-	}
+	/* use static allocated buffer, if possible */
+	name = atomic_dec_and_test(&s_name_buf_cnt)
+		       ? s_name_buf
+		       : kmalloc(sizeof(s_name_buf), GFP_NOFS);
 
 	if (name) {
-		struct dentry *dentry = d_find_alias(inode);
+		struct dentry *de = d_find_alias(inode);
 		const u32 name_len = ARRAY_SIZE(s_name_buf) - 1;
 
-		if (dentry) {
-			spin_lock(&dentry->d_lock);
-			snprintf(name, name_len, "%s", dentry->d_name.name);
-			spin_unlock(&dentry->d_lock);
-			dput(dentry);
+		if (de) {
+			spin_lock(&de->d_lock);
+			snprintf(name, name_len, " \"%s\"", de->d_name.name);
+			spin_unlock(&de->d_lock);
 			name[name_len] = 0; /* to be sure*/
 		} else {
 			name[0] = 0;
 		}
+		dput(de); /* cocci warns if placed in branch "if (de)" */
 	}
 
 	va_start(args, fmt);
@@ -110,7 +108,7 @@ void ntfs_inode_printk(struct inode *inode, const char *fmt, ...)
 	vaf.fmt = printk_skip_level(fmt);
 	vaf.va = &args;
 
-	printk("%c%cntfs3: %s: ino=%lx, \"%s\" %pV\n", KERN_SOH_ASCII, level,
+	printk("%c%cntfs3: %s: ino=%lx,%s %pV\n", KERN_SOH_ASCII, level,
 	       sb->s_id, inode->i_ino, name ? name : "", &vaf);
 
 	va_end(args);
diff --git a/fs/ntfs3/xattr.c b/fs/ntfs3/xattr.c
index f81329ef7..cfc7b5ff7 100644
--- a/fs/ntfs3/xattr.c
+++ b/fs/ntfs3/xattr.c
@@ -25,16 +25,17 @@
 
 static inline size_t unpacked_ea_size(const struct EA_FULL *ea)
 {
-	return !ea->size ? DwordAlign(offsetof(struct EA_FULL, name) + 1 +
-				      ea->name_len + le16_to_cpu(ea->elength))
-			 : le32_to_cpu(ea->size);
+	return ea->size ? le32_to_cpu(ea->size)
+			: DwordAlign(struct_size(
+				  ea, name,
+				  1 + ea->name_len + le16_to_cpu(ea->elength)));
 }
 
 static inline size_t packed_ea_size(const struct EA_FULL *ea)
 {
-	return offsetof(struct EA_FULL, name) + 1 -
-	       offsetof(struct EA_FULL, flags) + ea->name_len +
-	       le16_to_cpu(ea->elength);
+	return struct_size(ea, name,
+			   1 + ea->name_len + le16_to_cpu(ea->elength)) -
+	       offsetof(struct EA_FULL, flags);
 }
 
 /*
@@ -151,17 +152,19 @@ static int ntfs_read_ea(struct ntfs_inode *ni, struct EA_FULL **ea,
  *
  * copy a list of xattrs names into the buffer
  * provided, or compute the buffer size required
+ *
+ * Returns a negative error number on failure, or the number of bytes
+ * used / required on success.
  */
-static int ntfs_list_ea(struct ntfs_inode *ni, char *buffer,
-			size_t bytes_per_buffer, size_t *bytes)
+static ssize_t ntfs_list_ea(struct ntfs_inode *ni, char *buffer,
+			    size_t bytes_per_buffer)
 {
 	const struct EA_INFO *info;
 	struct EA_FULL *ea_all = NULL;
 	const struct EA_FULL *ea;
 	u32 off, size;
 	int err;
-
-	*bytes = 0;
+	size_t ret;
 
 	err = ntfs_read_ea(ni, &ea_all, 0, &info);
 	if (err)
@@ -173,25 +176,25 @@ static int ntfs_list_ea(struct ntfs_inode *ni, char *buffer,
 	size = le32_to_cpu(info->size);
 
 	/* Enumerate all xattrs */
-	for (off = 0; off < size; off += unpacked_ea_size(ea)) {
+	for (ret = 0, off = 0; off < size; off += unpacked_ea_size(ea)) {
 		ea = Add2Ptr(ea_all, off);
 
 		if (buffer) {
-			if (*bytes + ea->name_len + 1 > bytes_per_buffer) {
+			if (ret + ea->name_len + 1 > bytes_per_buffer) {
 				err = -ERANGE;
 				goto out;
 			}
 
-			memcpy(buffer + *bytes, ea->name, ea->name_len);
-			buffer[*bytes + ea->name_len] = 0;
+			memcpy(buffer + ret, ea->name, ea->name_len);
+			buffer[ret + ea->name_len] = 0;
 		}
 
-		*bytes += ea->name_len + 1;
+		ret += ea->name_len + 1;
 	}
 
 out:
 	ntfs_free(ea_all);
-	return err;
+	return err ? err : ret;
 }
 
 static int ntfs_get_ea(struct inode *inode, const char *name, size_t name_len,
@@ -286,8 +289,7 @@ static noinline int ntfs_set_ea(struct inode *inode, const char *name,
 		goto out;
 	}
 
-	add = DwordAlign(offsetof(struct EA_FULL, name) + 1 + name_len +
-			 val_size);
+	add = DwordAlign(struct_size(ea_all, name, 1 + name_len + val_size));
 
 	err = ntfs_read_ea(ni, &ea_all, add, &info);
 	if (err)
@@ -444,17 +446,15 @@ static noinline int ntfs_set_ea(struct inode *inode, const char *name,
 		mi->dirty = true;
 	}
 
-	if (ea_info.size_pack != size_pack)
-		ni->ni_flags |= NI_FLAG_UPDATE_PARENT;
-	mark_inode_dirty(&ni->vfs_inode);
-
 	/* Check if we delete the last xattr */
-	if (val_size || flags != XATTR_REPLACE ||
-	    ntfs_list_ea(ni, NULL, 0, &val_size) || val_size) {
+	if (size)
 		ni->ni_flags |= NI_FLAG_EA;
-	} else {
+	else
 		ni->ni_flags &= ~NI_FLAG_EA;
-	}
+
+	if (ea_info.size_pack != size_pack)
+		ni->ni_flags |= NI_FLAG_UPDATE_PARENT;
+	mark_inode_dirty(&ni->vfs_inode);
 
 out:
 	if (!locked)
@@ -770,23 +770,19 @@ ssize_t ntfs_listxattr(struct dentry *dentry, char *buffer, size_t size)
 {
 	struct inode *inode = d_inode(dentry);
 	struct ntfs_inode *ni = ntfs_i(inode);
-	ssize_t ret = -1;
-	int err;
+	ssize_t ret;
 
 	if (!(ni->ni_flags & NI_FLAG_EA)) {
-		ret = 0;
-		goto out;
+		/* no xattr in file */
+		return 0;
 	}
 
 	ni_lock(ni);
 
-	err = ntfs_list_ea(ni, buffer, size, (size_t *)&ret);
+	ret = ntfs_list_ea(ni, buffer, size);
 
 	ni_unlock(ni);
 
-	if (err)
-		ret = err;
-out:
 	return ret;
 }
 
@@ -1021,7 +1017,7 @@ static noinline int ntfs_setxattr(const struct xattr_handler *handler,
 
 static bool ntfs_xattr_user_list(struct dentry *dentry)
 {
-	return 1;
+	return true;
 }
 
 static const struct xattr_handler ntfs_xattr_handler = {
-- 
2.31.0.97.g1424303384

