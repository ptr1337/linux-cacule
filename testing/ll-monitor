#!/usr/bin/env ruby
interval_ms = 500

def get_fake_interactive_tasks
	pid_tasks = Hash.new
	raw_input = File.read("/proc/sched_debug")
	sections = raw_input.split(/\R{2,}/).keep_if{|section| section =~ /^runnable tasks:$/}
	tasks = sections.map do |section|
		lines = section.split(/\R/)
		content_lines = lines[3..]
		content_data = content_lines.map do |content_line|
			columns = content_line.strip.split(/\s+/)[0..9]
			[1,3,5,6].each{|i| columns[i] = columns[i].to_i}
			[4,7,8,9].each{|i| columns[i] = columns[i].to_f}
			columns
		end
		content_data
	end.sum([])
	filtered_tasks = tasks.keep_if do |task|
		task[1] > 0
	end
	filtered_tasks.each do |task|
		pid_tasks[task[3]] = task
	end
	return pid_tasks
end

previous_tasks = get_fake_interactive_tasks
loop do
	dtime = Time.now.strftime("%Y-%m-%d %H:%M:%S")
	current_tasks = get_fake_interactive_tasks
	pids_new  = current_tasks.keys - previous_tasks.keys
	pids_gone = previous_tasks.keys - current_tasks.keys
	pids_kept = current_tasks.keys - pids_new
	
	pids_gone.each do |pid|
		name = previous_tasks[pid][2]
		puts "#{dtime} DEL: #{pid} \e[1m\e[34m#{name}\e[0m"
	end
	pids_kept.each do |pid|
		current_task  = current_tasks[pid]
		previous_task = previous_tasks[pid]
		if (current_il = current_task[1]) != (previous_il = previous_task[1])
			name = current_task[2]
			color = current_il > previous_il ? 35 : 36
			puts "#{dtime} CHG: #{pid} \e[1m#{name}\e[0m #{previous_il} -> \e[1m\e[#{color}m#{current_il}\e[0m"
		end
	end
	pids_new.each do |pid|
		task = current_tasks[pid]
			name = task[2]
		puts "#{dtime} NEW: #{pid} \e[1m#{name}\e[0m = \e[1m\e[33m#{task[1]}\e[0m"
	end
	previous_tasks = current_tasks
	sleep interval_ms.to_f / 1000
end

